---
layout: post
title:  "ctf"
date:   2024-08-08 12:32:45 +0100
categories:
---

[Platforms](#platforms)
[Tools](#tools)
[Videos](#videos)
[Useful Codes](#useful-codes)
[More Resources](#more-resources)

# ------ Platforms ------
{:#platforms}

[turkhackteam](https://ctf.turkhackteam.org/tr/)
[attackdefense](https://attackdefense.com/)
[cryptohack](https://cryptohack.org/)
[cmdchallenge](https://cmdchallenge.com/)
[CTFTime](https://ctftime.org)
[OverTheWire](https://overthewire.org/wargames)
[PicoCTF](https://picoctf.org/)
[ImaginaryCTF](https://imaginaryctf.org)
[247CTF](https://247ctf.com)
[CTF Challenge](https://ctfchallenge.com)
[CTF Learn](https://ctflearn.com)
[CryptoHack](https://cryptohack.org/) - [Writeups](https://github.com/Adamkadaban/CTFs/tree/master/2.Labs/CryptoHack)
[HackThisSite](https://www.hackthissite.org)
[SmashTheStack](http://smashthestack.org/).
[W3Challs](https://w3challs.com/)
[Ringzer0CTF](https://ringzer0ctf.com/challenges)
[Enigma Group](https://www.enigmagroup.org)
[Root Me](https://www.root-me.org)
[UCF](https://ctf.hackucf.org/challenges) - [Writeups](https://github.com/Adamkadaban/CTFs/tree/master/1.CTFs/HackUCF)
[Hacker101](https://www.hacker101.com/)
[HackTheBox](https://www.hackthebox.com)
[TryHackMe](https://tryhackme.com)
[VulnHub](https://www.vulnhub.com/)
[pwnable.kr](http://pwnable.kr/index.php)
[pwnable.tw](https://pwnable.tw/challenge/)
[pwnable.xyz](https://pwnable.xyz/challenges/)
[pwn dojo](https://dojo.pwn.college)
[Pwn.college](https://pwn.college/)
[websec.fr](http://websec.fr/)
[WebHacking](http://webhacking.kr)
[PortSwigger](https://portswigger.net/web-security/dashboard)
[Web Security Academy](https://portswigger.net/web-security)
[burpsuite](https://portswigger.net/burp/communitydownload) to intercept http request packages
[BurpSuite](https://portswigger.net/burp) - A graphical tool to testing website security.
[Turbo Intruder](https://portswigger.net/research/turbo-intruder-embracing-the-billion-request-attack) - Burp Suite extension for sending large numbers of HTTP requests 
[Turbo Intruder](https://portswigger.net/bappstore/9abaa233088242e8be252cd4ff534988) - Burp Suite extension for sending large numbers of HTTP requests and analyzing the results.
[BurpSuite](https://portswigger.net/burp) - A graphical tool to testing website security.
[BurpSuite](https://portswigger.net/burp) - Intercepts web requests and allows you to modify them
[Cryptopals](https://cryptopals.com/)
[CryptoCTF](https://cr.yp.toc.tf) - Previous years accessible at `20{19,20,21,22,23,24}.cr.yp.toc.tf`.
[Capture the Ether](https://capturetheether.com/)
[CloudFoxable](https://cloudfoxable.bishopfox.com)
[hacksplaining](https://www.hacksplaining.com/lessons)
[Ringzer0Team](https://ringzer0team.com/) - Ringzer0 Team Online CTF.
[SANS HHC](https://holidayhackchallenge.com/past-challenges/)
[Viblo CTF](https://ctf.viblo.asia) - Various amazing CTF challenges, in many different categories. Has both Practice mode and Contest mode.
[0x0539](https://0x0539.net/) - Online CTF challenges.
[Archive.ooo](https://archive.ooo/) - Live, playable archive of DEF CON CTF challenges.
[Atenea](https://atenea.ccn-cert.cni.es/) - Spanish CCN-CERT CTF platform.
[CTF365](https://ctf365.com/) - Security Training Platform.
[Defend the Web](https://defendtheweb.net/?hackthis) - An Interactive Cyber Security Platform.
[Dreamhack.io](https://dreamhack.io/wargame) - Online wargame.
[echoCTF.RED](https://echoctf.red/)
[Flagyard](https://flagyard.com/) - An Online Playground of Hands-on Cybersecurity Challenges.
[HackBBS](https://hackbbs.org/index.php) - Online wargame.
[Hackropole](https://hackropole.fr/en/) - This platform allows you to replay the challenges of the France Cybersecurity Challenge.
[HBH](https://hbh.sh/home) - Community designed to teach methods and tactics used by malicious hackers to access systems and sensitive information.
[Komodo](http://ctf.komodosec.com/) - This is a game designed to challenge your application hacking skills.
[MicroCorruption](https://microcorruption.com/) - Embedded Security CTF.
[MNCTF](https://mnctf.info/) - Online cybersecurity challenges.
[PWN.TN](https://pwn.tn/) - Educational and non commercial wargame.
[WeChall](https://www.wechall.net/active_sites) - Challenge sites directory & forum.
[YEHD 2015](https://2015-yehd-ctf.meiji-ncc.tech/) - YEHD CTF 2015 online challenges.
[IO](http://io.netgarage.org/) - Wargame for binary challenges.
[Hacking-Lab](https://hacking-lab.com/) - Ethical hacking, computer network and security challenge platform.
[OffSec Proving Grounds](https://www.offensive-security.com/labs)
[HackXOR](https://hackxor.net)
[Hacktoria](https://hacktoria.com)

# ------ Tools ------
{:#tools}

[Ghidra](https://ghidra.re/CheatSheet.html)
[Volatility](https://github.com/volatilityfoundation/volatility/wiki/Linux)
[PwnTools](https://github.com/Gallopsled/pwntools-tutorial)
[CyberChef](https://gchq.github.io/CyberChef)
[DCode](https://www.dcode.fr/en)
[Run Code](https://tio.run)
[GTFOBins](https://gtfobins.github.io)
[ExploitDB](https://www.exploit-db.com)
[Wireshark](https://www.wireshark.org/)
[XORTool](https://github.com/hellman/xortool) - A tool to analyze multi-byte xor cipher.
[XSSer](https://xsser.03c8.net/) - Automated XSS testor.
[dirsearch](https://github.com/maurosoria/dirsearch) - Web path scanner.
[Commix](https://github.com/commixproject/commix) - Automated All-in-One OS Command Injection and Exploitation Tool.
[Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en) - Add on for chrome for debugging network requests.
[W3af](https://github.com/andresriancho/w3af) -  Web Application Attack and Audit Framework.
[ngrok](https://ngrok.com/) - Secure introspectable tunnels to localhost.
[WPScan](http://wpscan.com)
[SQLMap](https://github.com/sqlmapproject/sqlmap)
[Nikto](https://tools.kali.org/information-gathering/nikto)
[gobuster](https://tools.kali.org/web-applications/gobuster)
[hydra](https://tools.kali.org/password-attacks/hydra)
[PayloadsAllTheThings](https://github.com/swisskyrepo/PayloadsAllTheThings)
[Dirhunt](https://github.com/Nekmo/dirhunt) - Find web directories without bruteforce.
[ffuf](https://github.com/ffuf/ffuf) - Fast web fuzzer written in Go.
[hashcat](https://github.com/hashcat/hashcat) to attack hash
[John the Ripper](https://github.com/openwall/john) jumbo to crack password
[Ophcrack](https://ophcrack.sourceforge.io/) - Free Windows password cracker based on rainbow tables.
[saucenao](https://saucenao.com/) to search for image source
[aperisolve.com](https://www.aperisolve.com/) do stego for image online
[29a.ch](https://29a.ch/photo-forensics/) do stego for image online
[autopsy](https://github.com/sleuthkit/autopsy) a GUI tool for forensics
[binwalk](https://github.com/ReFirmLabs/binwalk)
[foremost](https://github.com/korczis/foremost)
[QuipQuip](https://quipqiup.com) - An online tool for breaking substitution ciphers or vigenere ciphers (without key).
[shodan.io](http://shodan.io) - find open ports and services online
[GeoSpy AI](https://geospy.ai)
[XSStrike] https://github.com/UltimateHackers/XSStrike
[LC4] https://www.schneier.com/blog/archives/2018/05/lc4_another_pen.html
[LC4] This is an adaptation of RC4... just not. There is an implementation available in Python. [https://github.com/dstein64/LC4/blob/master/documentation.md](https://github.com/dstein64/LC4/blob/master/documentation.md)

# ------ Videos ------
{:#videos}

[LiveOverFlow](https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w) - Video tutorials on Exploitation.
[John Hammond](https://www.youtube.com/c/JohnHammond010)
[IppSec](https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA)
[XCT](https://www.youtube.com/channel/UClGm2C8Qi0_Wv68zfjCz2YA)
[Gynvael](https://www.youtube.com/user/GynvaelEN)
[ZetaTwo](https://www.youtube.com/c/ZetaTwo)
[PwnFunction](https://www.youtube.com/channel/UCW6MNdOsqv2E9AjQkv9we7A)
[0xdf](https://www.youtube.com/channel/UChO9OAH57Flz35RRX__E25A)
[247CTF](https://www.youtube.com/channel/UCtGLeKomT06x3xZ2SZp2l9Q)
[MalFind](https://www.youtube.com/channel/UCJf4-reOhoiAlScWC1WzLgQ)
[DayZeroSec](https://www.youtube.com/c/dayzerosec)
[Rana Khalil](https://www.youtube.com/c/RanaKhalil101)
[PinkDraconian](https://www.youtube.com/channel/UCmXwpkCXmIKjoRLMsq9I3RA)
[Superhero1](https://www.youtube.com/channel/UCm2SwKmx3Ya1HG5RmHR7SCA)
[S1lk](https://www.youtube.com/c/AlexChaveriat)
[Alh4zr3d](https://www.youtube.com/channel/UCz-Z-d2VPQXHGkch0-_KovA)
[Paweł Łukasik](https://www.youtube.com/c/PawelLukasik)
[Ephemeral](https://www.youtube.com/c/BasteG0d69)
[Hak5](https://www.youtube.com/c/hak5)
[Conda](https://www.youtube.com/c/c0nd4)
[HackerSploit](https://www.youtube.com/c/HackerSploit)
[Condingo](https://www.youtube.com/c/codingo)
[InsiderPhd](https://www.youtube.com/c/InsiderPhD)
[HackSplained](https://www.youtube.com/c/Hacksplained)
[TheCyberMentor](https://www.youtube.com/c/TheCyberMentor)
[StackSmashing](https://www.youtube.com/c/stacksmashing)
[stacksmashing](https://www.youtube.com/c/stacksmashing/videos)
[Cybersecurity Meg](https://www.youtube.com/c/CybersecurityMeg)
[Tib3rius](https://www.youtube.com/c/Tib3rius)
[SecAura](https://www.youtube.com/channel/UCx89Lz24SEPZpExl6OfQ0Gg)
[DarkSec](https://www.youtube.com/c/DarkSec)
[Hexorcist](https://www.youtube.com/c/HEXORCIST)
[PwnCollege](https://www.youtube.com/c/pwncollege)
[pwn.college](https://www.youtube.com/channel/UCkRe0pvrQvhkhFSciV0l2MQ) - Guided course material: [https://pwn.college/](https://pwn.college/) - Tons of practice problems: [https://dojo.pwn.college/](https://dojo.pwn.college/)
[NahamSec](https://www.youtube.com/c/Nahamsec)
[Optional](https://www.youtube.com/c/optionalctf)
[TheHackerish](https://www.youtube.com/c/thehackerish)
[Ryan Gordon](https://www.youtube.com/c/0xRy4n)
[AlmondForce](https://www.youtube.com/c/AlmondForce)
[VulnMachines](https://www.youtube.com/c/vulnmachines)
[Computerphile](https://www.youtube.com/user/Computerphile)
[Martin Carlisle](https://www.youtube.com/user/carlislemc/featured)
[Sam Bowne](https://www.youtube.com/channel/UCC2OBhIt1sHE4odV05RYP1w) - CCSF professor that open sources all of his lectures and course material on [his website](https://samsclass.info/)
[Black Hills Information Security](https://www.youtube.com/@BlackHillsInformationSecurity) - Security firm that makes a ton of educational content - Always doing free [courses](https://www.antisyphontraining.com/pay-what-you-can/) and [webcasts](https://discord.gg/BHIS) about security topics
[InfoSecLab at Georgia Tech](https://www.youtube.com/channel/UCUcnLCrBVK9gS6ctEUVvkjA/featured)
[RPISEC](https://www.youtube.com/c/RPISEC_talks/videos)
[Matt Brown](https://www.youtube.com/@mattbrwn)
[Others](https://securitycreators.video)

# ------ More Resources ------
{:#more-resources}

[Bug Bounty Platforms](https://github.com/disclose/bug-bounty-platforms)
[HackTricks](https://book.hacktricks.xyz)
[HackTricks](https://book.hacktricks.xyz/pentesting-methodology)
[CTF Resources](https://github.com/apsdehal/awesome-ctf)
[Security Resources](https://github.com/CompassSecurity/security_resources)
[Seal9055 Resources](https://github.com/seal9055/resources)
[Forensics](https://cugu.github.io/awesome-forensics)
[Learn RE](https://hshrzd.wordpress.com/how-to-start)
[Learn BinExp](https://guyinatuxedo.github.io)
[HTB Writeups](https://0xdf.gitlab.io)

[bi0s Wiki](https://teambi0s.gitlab.io/bi0s-wiki/) - Wiki from team bi0s.
[OpenToAll](https://github.com/OpenToAllCTF/Tips) - CTF tips by OTA CTF team members.
[OpenToAll](https://opentoallctf.github.io/)
[Roppers Bootcamp](https://www.roppers.org/courses/ctf) - CTF Bootcamp.
[Offsec Metasploit](https://www.offsec.com/metasploit-unleashed/) - bak.
[Seclist XSS](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/XSS)
[Seclist LFI Intruder](https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI)
[Here’s a helpful cheatsheet](https://trailofbits.github.io/ctf/forensics/)

[pcap]: https://en.wikipedia.org/wiki/Pcap
[Windows]: https://en.wikipedia.org/wiki/Microsoft_Windows
[.NET]: https://en.wikipedia.org/wiki/.NET_Framework
[Wine]: https://en.wikipedia.org/wiki/Wine
[Portable Executable]: https://en.wikipedia.org/wiki/Portable_Executable
[QR code]: https://en.wikipedia.org/wiki/QR_code
[Vigenere Cipher]: https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher
[PDF]: https://en.wikipedia.org/wiki/
[Playfair Cipher]: https://en.wikipedia.org/wiki/Playfair_cipher
[GET]: https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods
[wget]: https://en.wikipedia.org/wiki/Wget
[XSS]: https://en.wikipedia.org/wiki/Cross-site_scripting
[HTML]: https://en.wikipedia.org/wiki/HTML
[JavaScript]: https://en.wikipedia.org/wiki/JavaScript
[cookie]: https://en.wikipedia.org/wiki/HTTP_cookie
[Atbash Cipher]: https://en.wikipedia.org/wiki/Atbash
[PNG]: https://en.wikipedia.org/wiki/Portable_Network_Graphics
[RCE]: https://en.wikipedia.org/wiki/Arbitrary_code_execution
[Malboge]: https://en.wikipedia.org/wiki/Malbolge
[Base64]: https://en.wikipedia.org/wiki/Base64
[Base32]: https://en.wikipedia.org/wiki/Base32
[Base85]: https://en.wikipedia.org/wiki/Ascii85
[International Code of Signals Maritime]: https://en.wikipedia.org/wiki/International_Code_of_Signals
[printf vulnerability]: https://www.owasp.org/index.php/Format_string_attack

*Tutorials to learn how to play CTFs*

- [CTF Field Guide](https://trailofbits.github.io/ctf/) - Field Guide by Trails of Bits.
- [CTF Resources](http://ctfs.github.io/resources/) -  Start Guide maintained by community.
- [How to Get Started in CTF](https://www.endgame.com/blog/how-get-started-ctf) - Short guideline for CTF beginners by Endgame
- [Intro. to CTF Course](https://www.hoppersroppers.org/courseCTF.html) - A free course that teaches beginners the basics of forensics, crypto, and web-ex.
- [MIPT CTF](https://github.com/xairy/mipt-ctf) - A small course for beginners in CTFs (in Russian).

For CTF
--------

- [Exiftool](https://linux.die.net/man/1/exiftool) - Read and write meta information in files.
- [Image Steganography Online](https://incoherency.co.uk/image-steganography/) - Client-side Javascript tool to steganographically hide/unhide images inside the lower "bits" of other images. 
- [Steganography Online](https://stylesuxx.github.io/steganography/) - Online steganography encoder and decoder.
- [Pngtools](https://packages.debian.org/sid/pngtools) - For various analysis related to PNGs.
- [Stegbreak](https://linux.die.net/man/1/stegbreak) - Launches brute-force dictionary attacks on JPG image.
- [StegCracker](https://github.com/Paradoxis/StegCracker) - Steganography brute-force utility to uncover hidden data inside files.
    Don't ever forget about [`steghide`][steghide]! This tool can use a password list like `rockyou.txt` with steghide. SOME IMAGES CAN HAVE MULTIPLE FILED ENCODED WITH MULTIPLE PASSWORDS.
- [StegSeek][https://github.com/RickdeJager/stegseek]
    This is similar to `stegcracker`, but _much_ faster. Can also extract metadata without a password list.
- [stegextract](https://github.com/evyatarmeged/stegextract) - Detect hidden files and text in images.
- [Steghide](http://steghide.sourceforge.net/) - Hide data in various kinds of image- and audio-files.
- [`steghide`][steghide]
    A command-line tool typically used alongside a password or key, that could be uncovered some other way when solving a challenge. 
- [StegOnline](https://georgeom.net/StegOnline/upload) - Conduct a wide range of image steganography operations, such as concealing/revealing files hidden within bits (open-source).
- [Zsteg](https://github.com/zed-0xff/zsteg/) - PNG/BMP analysis.
- Unicode Steganography / Zero-Width Space Characters
    Some text that may be trying to hide something, in a seemingly innocent way, like "Hmm, there may be something hiding here..." may include zero-width characters. This is a utility that might help: [https://330k.github.io/misc_tools/unicode_steganography.html](https://330k.github.io/misc_tools/unicode_steganography.html) ... Other options are just gross find and replace operations in Python IDLE.
- Online LSB Tools
    There are many online LSB tools that work in different ways. If you are given a file that you know is part of a Least Significant Bit challenge, try these tools:
    [https://manytools.org/hacker-tools/steganography-encode-text-into-image/](https://manytools.org/hacker-tools/steganography-encode-text-into-image/) Only supports PNG
- [jsteg](https://github.com/lukechampine/jsteg) - Command-line tool to use against JPEG images.
- [Jstego][Jstego]
    A GUI tool for JPG steganography. [https://sourceforge.net/projects/jstego/](https://sourceforge.net/projects/jstego/) It is a [Java][Java] [JAR] file similar to stegsolve.jar
- Morse Code
    Always test for this if you are seeing two distinct values... _it may not always be binary!_ Online decoders like so: [https://morsecode.scphillips.com/translator.html](https://morsecode.scphillips.com/translator.html) 	
- Whitespace
    Tabs and spaces could be representing 1's and 0's and treating them as a binary message... or, they could be whitespace done with [`snow`][snow] or an esoteric programming language interpreter: [https://tio.run/#whitespace](https://tio.run/#whitespace)
- [stegsnow](https://manpages.ubuntu.com/manpages/trusty/man1/stegsnow.1.html) - Whitespace steganography program.
- Audio Speed Change (also change pitch)

```
mplayer -af scaletempo -speed 64 flag.mp3
```
- [Sonic Visualizer](https://www.sonicvisualiser.org/) - Audio file visualization.
- [Detect DTMF Tones]
    Audio frequencies common to a phone button, DTMF: [https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling).
- Phone-Keypad
    Some messages may be hidden with a string of numbers, but really be encoded with old cell-phone keypads, like text messaging with numbers repeated:

![https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQSySxHjMFv80XWp74LZpfrnAro6a1MLqeF1F3zpguA5PGSW9ov)

- [DTMF Detection](https://unframework.github.io/dtmf-detect/) - Audio frequencies common to a phone button.
- [DTMF Tones](http://dialabc.com/sound/detect/index.html) - Audio frequencies common to a phone button.
- DTMF (dual tone multiple frequency) phone keys
    - `multimon-ng -a DTMF -t wav <file.wav>`
        - Keep in mind that these could me multitap letters.
            - [This](https://www.dcode.fr/multitap-abc-cipher) can decode the numbers into text

- [FotoForensics](https://fotoforensics.com/) - Provides budding researchers and professional investigators access to cutting-edge tools for digital photo forensics.
- [ImageMagick](http://www.imagemagick.org/script/index.php) - Tool for manipulating images.
- [Magic Eye Solver](http://magiceye.ecksdee.co.uk/) - Get hidden information from images.
- [Pngcheck](http://www.libpng.org/pub/png/apps/pngcheck.html) - Verifies the integrity of PNG and dump all of the chunk-level information in human-readable form.
- Change pitch, speed, direction...
    - [Pitch, speed, tune](https://29a.ch/timestretch/)
    - [Reverse](https://audiotrimmer.com/online-mp3-reverser/)
- [Depix](https://github.com/beurtschipper/Depix) - Unpixelate text
- [pixrecovery](https://online.officerecovery.com/pixrecovery/)
- [Malboge]
    An esoteric language that looks a lot like Base85... but isn't. Often has references to "Inferno" or "Hell" or "Dante." Online interpreters like so: [http://www.malbolge.doleczek.pl/](http://www.malbolge.doleczek.pl/) Example code:
```
D'`A:p>JI5GjVyg5S-t>*`o^9\*j"hWfU0cb?>|;)]xwYXtsl2Sinmlkjiba'_dcbaZ~^]V[TSwQuUTSR43ImM/KJIBAe?'CBA@9]~<5Y9216543,P*).-,%I#('&}C#"!~}vu;\xqputm3qponmfN+ihJI_%]b[!BXWV[ZSwWVU7Mq43ImMF.JCBG@dDCB$#?8\6|:32V6/u3,+*No-,+$H(!g%${A!~}vu;sxwpun4Uqjing-NMiha'eGcbaZ~k
```

- [Atbash Cipher]
    If you have some text that you have no idea what it is, try the [Atbash cipher]! It's a letter mapping, but the alphabet is reversed: like `A` maps to `Z`, `B` maps to `Y` and so on. There are tons of online tools to do this ([http://rumkin.com/tools/cipher/atbash.php](http://rumkin.com/tools/cipher/atbash.php)), and you can build it with [Python].
- [Vigenere Cipher]
    [http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx](http://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx), [https://www.guballa.de/vigenere-solver](https://www.guballa.de/vigenere-solver) and personal Python code here: [https://pastebin.com/2Vr29g6J](https://pastebin.com/2Vr29g6J)
- [Vigenere Solver](https://www.guballa.de/vigenere-solver) - Online tool that breaks Vigenère ciphers without knowing the key.
- Gronsfeld Cipher
    A variant of the Vignere cipher that uses numbers insteads of letters. [http://rumkin.com/tools/cipher/gronsfeld.php](http://rumkin.com/tools/cipher/gronsfeld.php)
- [Bacon Cipher](https://en.wikipedia.org/wiki/Bacon%27s_cipher)
    A substitution cipher that replaces each character with five characters from a set of two (A and B is used most of the time). If we look at A as 0 and B as 1 it is a special encoding to binary numbers, where the character A has the value of binary `b00000`. Easy to recognize, because the ciphertext only contains two characters (e.g.: A and B) and the length of the ciphertext is divisible by 5. Example: `AAABB AAABA ABBAB AAABB AABAA AAAAB AAAAA AAABA ABBAB ABBAA`.
        [Online tool](http://rumkin.com/tools/cipher/baconian.php)
- Python random module cracker/predictor
    [https://github.com/tna0y/Python-random-module-cracker](https://github.com/tna0y/Python-random-module-cracker)... helps attack the Mersenne Twister used in Python's random module. 
* Substitution Cipher (use quip quip!)
    [https://quipqiup.com/](https://quipqiup.com/)
* Railfence Cipher
    [http://rumkin.com/tools/cipher/railfence.php](http://rumkin.com/tools/cipher/railfence.php)
* [Playfair Cipher]
    racker: [http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html](http://bionsgadgets.appspot.com/ww_forms/playfair_ph_web_worker3.html)
* Polybius Square
    [https://www.braingle.com/brainteasers/codes/polybius.php](https://www.braingle.com/brainteasers/codes/polybius.php)

* Two-Time Pad

* Hexahue Alphabet 
The hexhue is an another tex-to-image encoder. you can find a decoder
on [https://www.boxentriq.com/code-breaking/hexahue](https://www.boxentriq.com/code-breaking/hexahue)


- [Base65536](https://github.com/qntm/base65536) - Unicode's answer to Base64.
- [Braille Translator](https://www.branah.com/braille-translator) - Translate from braille to text.
- [Ciphey](https://github.com/Ciphey/Ciphey) - Tool to automatically decrypt encryptions without knowing the key or cipher, decode encodings, and crack hashes.
- [Decodify](https://github.com/s0md3v/Decodify) - Detect and decode encoded strings, recursively.
- [Enigma Machine](https://summersidemakerspace.ca/projects/enigma-machine/) - Universal Enigma Machine Simulator.
- [FeatherDuster](https://github.com/nccgroup/featherduster) - An automated, modular cryptanalysis tool.
- [Galois](http://web.eecs.utk.edu/~jplank/plank/papers/CS-07-593/) - A fast galois field arithmetic library/toolkit.
- [HashExtender](https://github.com/iagox86/hash_extender) - Tool for performing hash length extension attacks.
- [Hash-identifier](https://code.google.com/p/hash-identifier/source/checkout) - Simple hash algorithm identifier.
- [name-that-hash](https://github.com/HashPals/Name-That-Hash) - better hash analyzer
- [padding-oracle-attacker](https://github.com/KishanBagaria/padding-oracle-attacker) - CLI tool and library to execute padding oracle attacks easily.
- [PadBuster](https://github.com/AonCyberLabs/PadBuster) - Automated script for performing Padding Oracle attacks.
- [PEMCrack](https://github.com/robertdavidgraham/pemcrack) - Cracks SSL PEM files that hold encrypted private keys. Brute forces or dictionary cracks.
- [PKCrack](https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html) - PkZip encryption cracker.
- [Polybius Square Cipher](https://www.braingle.com/brainteasers/codes/polybius.php) - Table that allows someone to translate letters into numbers.
- [Quipqiup](https://quipqiup.com/) - Automated cryptogram solver.
- [RsaCtfTool](https://github.com/RsaCtfTool/RsaCtfTool) - RSA multi attacks tool.
- [RSATool](https://github.com/ius/rsatool) - Tool to to calculate RSA and RSA-CRT parameter.
- [Rumkin Cipher Tools](http://rumkin.com/tools/cipher/) - Collection of ciphhers/encoders tools.
- [Crackstation](https://crackstation.net/) - Hash cracker (database).
- [Hash Analyzer](https://www.tunnelsup.com/hash-analyzer/)
- [Cipher Identifier (online tool) | Boxentriq](https://www.boxentriq.com/code-breaking/cipher-identifier)
- [Online Encyclopedia of Integer Sequences](https://oeis.org/) - OEIS: The On-Line Encyclopedia of Integer Sequences

Privilege Escalation:
------------------------------------------------------------

- sudo -l - List commands we can run as root 
[Gtfobins](https://gtfobins.github.io/) - If we dont exactly remember how to use a given setuid command to get Privliges.
[linpeas](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS) - Automatically looks for privilege escalation vectors

If Python is executable as root

```bash
python3 -c "import pty;pty.spawn('/bin/sh');"
```

[Get interactive shell]
python3 -c "import pty;pty.spawn('/bin/bash')"
export TERM=xterm
ctrl+z
stty raw -echo; fg


searchsploit
netdiscover
ifconfig
nmap
msfconsole
rlwrap
dirsearch
wpscan
hydra
hashcat
strings
exiftool
steghide
crunch
cupp
ffuf
john
hexedit


Stegcracker
Steghide
Fcrackzip
